const l=JSON.parse('{"key":"v-2bf42aec","path":"/guide/markdown/Java%E9%9D%A2%E8%AF%95%E5%AE%9D%E5%85%B8/Java%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%88JVM%EF%BC%89%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8851%E9%81%93%E5%90%AB%E7%AD%94%E6%A1%88%EF%BC%89.html","title":"","lang":"zh-CN","frontmatter":{"description":"目录 一、Java内存模型 1. 我们开发人员编写的Java代码是怎么让电脑认识的 2. 为什么说java是跨平台语言 3. Jdk和Jre和JVM的区别 4. 说一下 JVM由那些部分组成，运行流程是什么？ 5. 说一下 JVM 运行时数据区 6. 详细的介绍下程序计数器？（重点理解） 7. 详细介绍下Java虚拟机栈?（重点理解） 8. 你能给我详细的介绍Java堆吗?（重点理解） 9. 能不能解释一下本地方法栈？ 10. 能不能解释一下方法区（重点理解） 11. 什么是JVM字节码执行引擎 12. 你听过直接内存吗？ 13. 知道垃圾收集系统吗？ 14. 堆栈的区别是什么？ 15. 深拷贝和浅拷贝 16. Java会存在内存泄漏吗？请说明为什么？ 二、垃圾回收机制及算法 17. 简述Java垃圾回收机制 18. GC是什么？为什么要GC 19. 垃圾回收的优点和缺点 20. 垃圾回收器的原理是什么？有什么办法手动进行垃圾回收？ 21. JVM 中都有哪些引用类型？ 22. 怎么判断对象是否可以被回收？ 23. Full GC是什么 24. 对象什么时候可以被垃圾器回收 25. JVM 垃圾回收算法有哪些？ 26. JVM中的永久代中会发生垃圾回收吗 三、垃圾收集器以及新生代、老年代、永久代 27. 讲一下新生代、老年代、永久代的区别 28. Minor GC、Major GC、Full GC是什么 29. Minor GC、Major GC、Full GC区别及触发条件 30. 为什么新生代要分Eden和两个 Survivor 区域？ 31. Java堆老年代( Old ) 和新生代 ( Young ) 的默认比例？ 32. 为什么要这样分代： 33. 什么是垃圾回收器他和垃圾算法有什么区别 34. 说一下 JVM 有哪些垃圾回收器？ 35. 收集器可以这么分配？（了解就好了） 36. 新生代垃圾回收器和老年代垃圾回收器都有哪些？有什么区别？ 37. 简述分代垃圾回收器是怎么工作的？ 四、内存分配策略 38. 简述java内存分配与回收策率以及Minor GC和Major GC 39. 对象优先在 Eden 区分配 40. 为什么大对象直接进入老年代 41. 长期存活对象将进入老年代 五、虚拟机类加载机制 42. 简述java类加载机制? 43. 类加载的机制及过程 44. 描述一下JVM加载Class文件的原理机制 45. 什么是类加载器，类加载器有哪些? 46. 说一下类装载的执行过程？ 47. 什么是双亲委派模型？ 六、JVM调优 48. JVM 调优的参数可以在那设置参数值 49. 说一下 JVM 调优的工具？ 50. 常用的 JVM 调优的参数都有哪些？ 51. JVM的GC收集器设置","head":[["meta",{"property":"og:url","content":"https://www.icu-web.tk/vuepress-doc/guide/markdown/Java%E9%9D%A2%E8%AF%95%E5%AE%9D%E5%85%B8/Java%E8%99%9A%E6%8B%9F%E6%9C%BA%EF%BC%88JVM%EF%BC%89%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8851%E9%81%93%E5%90%AB%E7%AD%94%E6%A1%88%EF%BC%89.html"}],["meta",{"property":"og:site_name","content":"折戟沉沙、丿"}],["meta",{"property":"og:description","content":"目录 一、Java内存模型 1. 我们开发人员编写的Java代码是怎么让电脑认识的 2. 为什么说java是跨平台语言 3. Jdk和Jre和JVM的区别 4. 说一下 JVM由那些部分组成，运行流程是什么？ 5. 说一下 JVM 运行时数据区 6. 详细的介绍下程序计数器？（重点理解） 7. 详细介绍下Java虚拟机栈?（重点理解） 8. 你能给我详细的介绍Java堆吗?（重点理解） 9. 能不能解释一下本地方法栈？ 10. 能不能解释一下方法区（重点理解） 11. 什么是JVM字节码执行引擎 12. 你听过直接内存吗？ 13. 知道垃圾收集系统吗？ 14. 堆栈的区别是什么？ 15. 深拷贝和浅拷贝 16. Java会存在内存泄漏吗？请说明为什么？ 二、垃圾回收机制及算法 17. 简述Java垃圾回收机制 18. GC是什么？为什么要GC 19. 垃圾回收的优点和缺点 20. 垃圾回收器的原理是什么？有什么办法手动进行垃圾回收？ 21. JVM 中都有哪些引用类型？ 22. 怎么判断对象是否可以被回收？ 23. Full GC是什么 24. 对象什么时候可以被垃圾器回收 25. JVM 垃圾回收算法有哪些？ 26. JVM中的永久代中会发生垃圾回收吗 三、垃圾收集器以及新生代、老年代、永久代 27. 讲一下新生代、老年代、永久代的区别 28. Minor GC、Major GC、Full GC是什么 29. Minor GC、Major GC、Full GC区别及触发条件 30. 为什么新生代要分Eden和两个 Survivor 区域？ 31. Java堆老年代( Old ) 和新生代 ( Young ) 的默认比例？ 32. 为什么要这样分代： 33. 什么是垃圾回收器他和垃圾算法有什么区别 34. 说一下 JVM 有哪些垃圾回收器？ 35. 收集器可以这么分配？（了解就好了） 36. 新生代垃圾回收器和老年代垃圾回收器都有哪些？有什么区别？ 37. 简述分代垃圾回收器是怎么工作的？ 四、内存分配策略 38. 简述java内存分配与回收策率以及Minor GC和Major GC 39. 对象优先在 Eden 区分配 40. 为什么大对象直接进入老年代 41. 长期存活对象将进入老年代 五、虚拟机类加载机制 42. 简述java类加载机制? 43. 类加载的机制及过程 44. 描述一下JVM加载Class文件的原理机制 45. 什么是类加载器，类加载器有哪些? 46. 说一下类装载的执行过程？ 47. 什么是双亲委派模型？ 六、JVM调优 48. JVM 调优的参数可以在那设置参数值 49. 说一下 JVM 调优的工具？ 50. 常用的 JVM 调优的参数都有哪些？ 51. JVM的GC收集器设置"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-05T14:04:17.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-05T14:04:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-05T14:04:17.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":2,"title":"一、Java内存模型","slug":"一、java内存模型","link":"#一、java内存模型","children":[]},{"level":2,"title":"1. 我们开发人员编写的Java代码是怎么让电脑认识的","slug":"_1-我们开发人员编写的java代码是怎么让电脑认识的","link":"#_1-我们开发人员编写的java代码是怎么让电脑认识的","children":[]},{"level":2,"title":"2. 为什么说java是跨平台语言","slug":"_2-为什么说java是跨平台语言","link":"#_2-为什么说java是跨平台语言","children":[]},{"level":2,"title":"3. Jdk和Jre和JVM的区别","slug":"_3-jdk和jre和jvm的区别","link":"#_3-jdk和jre和jvm的区别","children":[]},{"level":2,"title":"4. 说一下 JVM由那些部分组成，运行流程是什么？","slug":"_4-说一下-jvm由那些部分组成-运行流程是什么","link":"#_4-说一下-jvm由那些部分组成-运行流程是什么","children":[]},{"level":2,"title":"5. 说一下 JVM 运行时数据区","slug":"_5-说一下-jvm-运行时数据区","link":"#_5-说一下-jvm-运行时数据区","children":[]},{"level":2,"title":"6. 详细的介绍下程序计数器？（重点理解）","slug":"_6-详细的介绍下程序计数器-重点理解","link":"#_6-详细的介绍下程序计数器-重点理解","children":[]},{"level":2,"title":"7. 详细介绍下Java虚拟机栈?（重点理解）","slug":"_7-详细介绍下java虚拟机栈-重点理解","link":"#_7-详细介绍下java虚拟机栈-重点理解","children":[]},{"level":2,"title":"8. 你能给我详细的介绍Java堆吗?（重点理解）","slug":"_8-你能给我详细的介绍java堆吗-重点理解","link":"#_8-你能给我详细的介绍java堆吗-重点理解","children":[]},{"level":2,"title":"9. 能不能解释一下本地方法栈？","slug":"_9-能不能解释一下本地方法栈","link":"#_9-能不能解释一下本地方法栈","children":[]},{"level":2,"title":"10. 能不能解释一下方法区（重点理解）","slug":"_10-能不能解释一下方法区-重点理解","link":"#_10-能不能解释一下方法区-重点理解","children":[]},{"level":2,"title":"11. 什么是JVM字节码执行引擎","slug":"_11-什么是jvm字节码执行引擎","link":"#_11-什么是jvm字节码执行引擎","children":[]},{"level":2,"title":"12. 你听过直接内存吗？","slug":"_12-你听过直接内存吗","link":"#_12-你听过直接内存吗","children":[]},{"level":2,"title":"13. 知道垃圾收集系统吗？","slug":"_13-知道垃圾收集系统吗","link":"#_13-知道垃圾收集系统吗","children":[]},{"level":2,"title":"14. 堆栈的区别是什么？","slug":"_14-堆栈的区别是什么","link":"#_14-堆栈的区别是什么","children":[]},{"level":2,"title":"15. 深拷贝和浅拷贝","slug":"_15-深拷贝和浅拷贝","link":"#_15-深拷贝和浅拷贝","children":[]},{"level":2,"title":"16. Java会存在内存泄漏吗？请说明为什么？","slug":"_16-java会存在内存泄漏吗-请说明为什么","link":"#_16-java会存在内存泄漏吗-请说明为什么","children":[]},{"level":2,"title":"二、垃圾回收机制及算法","slug":"二、垃圾回收机制及算法","link":"#二、垃圾回收机制及算法","children":[]},{"level":2,"title":"17. 简述Java垃圾回收机制","slug":"_17-简述java垃圾回收机制","link":"#_17-简述java垃圾回收机制","children":[]},{"level":2,"title":"18. GC是什么？为什么要GC","slug":"_18-gc是什么-为什么要gc","link":"#_18-gc是什么-为什么要gc","children":[]},{"level":2,"title":"19. 垃圾回收的优点和缺点","slug":"_19-垃圾回收的优点和缺点","link":"#_19-垃圾回收的优点和缺点","children":[]},{"level":2,"title":"20. 垃圾回收器的原理是什么？有什么办法手动进行垃圾回收？","slug":"_20-垃圾回收器的原理是什么-有什么办法手动进行垃圾回收","link":"#_20-垃圾回收器的原理是什么-有什么办法手动进行垃圾回收","children":[]},{"level":2,"title":"21. JVM 中都有哪些引用类型？","slug":"_21-jvm-中都有哪些引用类型","link":"#_21-jvm-中都有哪些引用类型","children":[]},{"level":2,"title":"22. 怎么判断对象是否可以被回收？","slug":"_22-怎么判断对象是否可以被回收","link":"#_22-怎么判断对象是否可以被回收","children":[]},{"level":2,"title":"23. Full GC是什么","slug":"_23-full-gc是什么","link":"#_23-full-gc是什么","children":[]},{"level":2,"title":"24. 对象什么时候可以被垃圾器回收","slug":"_24-对象什么时候可以被垃圾器回收","link":"#_24-对象什么时候可以被垃圾器回收","children":[]},{"level":2,"title":"25. JVM 垃圾回收算法有哪些？","slug":"_25-jvm-垃圾回收算法有哪些","link":"#_25-jvm-垃圾回收算法有哪些","children":[]},{"level":2,"title":"26. JVM中的永久代中会发生垃圾回收吗","slug":"_26-jvm中的永久代中会发生垃圾回收吗","link":"#_26-jvm中的永久代中会发生垃圾回收吗","children":[]},{"level":2,"title":"三、垃圾收集器以及新生代、老年代、永久代","slug":"三、垃圾收集器以及新生代、老年代、永久代","link":"#三、垃圾收集器以及新生代、老年代、永久代","children":[]},{"level":2,"title":"27. 讲一下新生代、老年代、永久代的区别","slug":"_27-讲一下新生代、老年代、永久代的区别","link":"#_27-讲一下新生代、老年代、永久代的区别","children":[]},{"level":2,"title":"28. Minor GC、Major GC、Full GC是什么","slug":"_28-minor-gc、major-gc、full-gc是什么","link":"#_28-minor-gc、major-gc、full-gc是什么","children":[]},{"level":2,"title":"29. Minor GC、Major GC、Full GC区别及触发条件","slug":"_29-minor-gc、major-gc、full-gc区别及触发条件","link":"#_29-minor-gc、major-gc、full-gc区别及触发条件","children":[]},{"level":2,"title":"30. 为什么新生代要分Eden和两个 Survivor 区域？","slug":"_30-为什么新生代要分eden和两个-survivor-区域","link":"#_30-为什么新生代要分eden和两个-survivor-区域","children":[]},{"level":2,"title":"31. Java堆老年代( Old ) 和新生代 ( Young ) 的默认比例？","slug":"_31-java堆老年代-old-和新生代-young-的默认比例","link":"#_31-java堆老年代-old-和新生代-young-的默认比例","children":[]},{"level":2,"title":"32. 为什么要这样分代：","slug":"_32-为什么要这样分代","link":"#_32-为什么要这样分代","children":[]},{"level":2,"title":"33. 什么是垃圾回收器他和垃圾算法有什么区别","slug":"_33-什么是垃圾回收器他和垃圾算法有什么区别","link":"#_33-什么是垃圾回收器他和垃圾算法有什么区别","children":[]},{"level":2,"title":"34. 说一下 JVM 有哪些垃圾回收器？","slug":"_34-说一下-jvm-有哪些垃圾回收器","link":"#_34-说一下-jvm-有哪些垃圾回收器","children":[]},{"level":2,"title":"35. 收集器可以这么分配？（了解就好了）","slug":"_35-收集器可以这么分配-了解就好了","link":"#_35-收集器可以这么分配-了解就好了","children":[]},{"level":2,"title":"36. 新生代垃圾回收器和老年代垃圾回收器都有哪些？有什么区别？","slug":"_36-新生代垃圾回收器和老年代垃圾回收器都有哪些-有什么区别","link":"#_36-新生代垃圾回收器和老年代垃圾回收器都有哪些-有什么区别","children":[]},{"level":2,"title":"37. 简述分代垃圾回收器是怎么工作的？","slug":"_37-简述分代垃圾回收器是怎么工作的","link":"#_37-简述分代垃圾回收器是怎么工作的","children":[]},{"level":2,"title":"四、内存分配策略","slug":"四、内存分配策略","link":"#四、内存分配策略","children":[]},{"level":2,"title":"38. 简述java内存分配与回收策率以及Minor GC和Major GC","slug":"_38-简述java内存分配与回收策率以及minor-gc和major-gc","link":"#_38-简述java内存分配与回收策率以及minor-gc和major-gc","children":[]},{"level":2,"title":"39. 对象优先在 Eden 区分配","slug":"_39-对象优先在-eden-区分配","link":"#_39-对象优先在-eden-区分配","children":[]},{"level":2,"title":"40. 为什么大对象直接进入老年代","slug":"_40-为什么大对象直接进入老年代","link":"#_40-为什么大对象直接进入老年代","children":[]},{"level":2,"title":"41. 长期存活对象将进入老年代","slug":"_41-长期存活对象将进入老年代","link":"#_41-长期存活对象将进入老年代","children":[]},{"level":2,"title":"五、虚拟机类加载机制","slug":"五、虚拟机类加载机制","link":"#五、虚拟机类加载机制","children":[]},{"level":2,"title":"42. 简述java类加载机制?","slug":"_42-简述java类加载机制","link":"#_42-简述java类加载机制","children":[]},{"level":2,"title":"43. 类加载的机制及过程","slug":"_43-类加载的机制及过程","link":"#_43-类加载的机制及过程","children":[]},{"level":2,"title":"44. 描述一下JVM加载Class文件的原理机制","slug":"_44-描述一下jvm加载class文件的原理机制","link":"#_44-描述一下jvm加载class文件的原理机制","children":[]},{"level":2,"title":"45. 什么是类加载器，类加载器有哪些?","slug":"_45-什么是类加载器-类加载器有哪些","link":"#_45-什么是类加载器-类加载器有哪些","children":[]},{"level":2,"title":"46. 说一下类装载的执行过程？","slug":"_46-说一下类装载的执行过程","link":"#_46-说一下类装载的执行过程","children":[]},{"level":2,"title":"47. 什么是双亲委派模型？","slug":"_47-什么是双亲委派模型","link":"#_47-什么是双亲委派模型","children":[]},{"level":2,"title":"六、JVM调优","slug":"六、jvm调优","link":"#六、jvm调优","children":[]},{"level":2,"title":"48. JVM 调优的参数可以在那设置参数值","slug":"_48-jvm-调优的参数可以在那设置参数值","link":"#_48-jvm-调优的参数可以在那设置参数值","children":[]},{"level":2,"title":"49. 说一下 JVM 调优的工具？","slug":"_49-说一下-jvm-调优的工具","link":"#_49-说一下-jvm-调优的工具","children":[]},{"level":2,"title":"50. 常用的 JVM 调优的参数都有哪些？","slug":"_50-常用的-jvm-调优的参数都有哪些","link":"#_50-常用的-jvm-调优的参数都有哪些","children":[]},{"level":2,"title":"51. JVM的GC收集器设置","slug":"_51-jvm的gc收集器设置","link":"#_51-jvm的gc收集器设置","children":[]}],"git":{"createdTime":1693922657000,"updatedTime":1693922657000,"contributors":[{"name":"bincooo","email":"admin@bincooodeiMac.local","commits":1}]},"readingTime":{"minutes":46.81,"words":14043},"filePathRelative":"guide/markdown/Java面试宝典/Java虚拟机（JVM）面试题（51道含答案）.md","localizedDate":"2023年9月5日","excerpt":"<h3> 目录</h3>\\n<ul>\\n<li><a href=\\"#Java_1\\">一、Java内存模型</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#1_Java_2\\">1. 我们开发人员编写的Java代码是怎么让电脑认识的</a></li>\\n<li><a href=\\"#2_java_13\\">2. 为什么说java是跨平台语言</a></li>\\n<li><a href=\\"#3_JdkJreJVM_19\\">3. Jdk和Jre和JVM的区别</a></li>\\n<li><a href=\\"#4__JVM_28\\">4. 说一下 JVM由那些部分组成，运行流程是什么？</a></li>\\n<li><a href=\\"#5__JVM__44\\">5. 说一下 JVM 运行时数据区</a></li>\\n<li><a href=\\"#6__67\\">6. 详细的介绍下程序计数器？（重点理解）</a></li>\\n<li><a href=\\"#7_Java_90\\">7. 详细介绍下Java虚拟机栈?（重点理解）</a></li>\\n<li><a href=\\"#8_Java_118\\">8. 你能给我详细的介绍Java堆吗?（重点理解）</a></li>\\n<li><a href=\\"#9__131\\">9. 能不能解释一下本地方法栈？</a></li>\\n<li><a href=\\"#10__138\\">10. 能不能解释一下方法区（重点理解）</a></li>\\n<li><a href=\\"#11_JVM_144\\">11. 什么是JVM字节码执行引擎</a></li>\\n<li><a href=\\"#12__150\\">12. 你听过直接内存吗？</a></li>\\n<li><a href=\\"#13__156\\">13. 知道垃圾收集系统吗？</a></li>\\n<li><a href=\\"#14__164\\">14. 堆栈的区别是什么？</a></li>\\n<li><a href=\\"#15__175\\">15. 深拷贝和浅拷贝</a></li>\\n<li><a href=\\"#16_Java_183\\">16. Java会存在内存泄漏吗？请说明为什么？</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#_192\\">二、垃圾回收机制及算法</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#17__Java_193\\">17. 简述Java垃圾回收机制</a></li>\\n<li><a href=\\"#18_GCGC_199\\">18. GC是什么？为什么要GC</a></li>\\n<li><a href=\\"#19__205\\">19. 垃圾回收的优点和缺点</a></li>\\n<li><a href=\\"#20__209\\">20. 垃圾回收器的原理是什么？有什么办法手动进行垃圾回收？</a></li>\\n<li><a href=\\"#21_JVM__217\\">21. JVM 中都有哪些引用类型？</a></li>\\n<li><a href=\\"#22__224\\">22. 怎么判断对象是否可以被回收？</a></li>\\n<li><a href=\\"#23_Full_GC_235\\">23. Full GC是什么</a></li>\\n<li><a href=\\"#24__239\\">24. 对象什么时候可以被垃圾器回收</a></li>\\n<li><a href=\\"#25_JVM__245\\">25. JVM 垃圾回收算法有哪些？</a></li>\\n<li><a href=\\"#26_JVM_289\\">26. JVM中的永久代中会发生垃圾回收吗</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#_297\\">三、垃圾收集器以及新生代、老年代、永久代</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#27__298\\">27. 讲一下新生代、老年代、永久代的区别</a></li>\\n<li><a href=\\"#28_Minor_GCMajor_GCFull_GC_310\\">28. Minor GC、Major GC、Full GC是什么</a></li>\\n<li><a href=\\"#29_Minor_GCMajor_GCFull_GC_317\\">29. Minor GC、Major GC、Full GC区别及触发条件</a></li>\\n<li><a href=\\"#30_Eden_Survivor__331\\">30. 为什么新生代要分Eden和两个 Survivor 区域？</a></li>\\n<li><a href=\\"#31_Java_Old____Young___343\\">31. Java堆老年代( Old ) 和新生代 ( Young ) 的默认比例？</a></li>\\n<li><a href=\\"#32__351\\">32. 为什么要这样分代：</a></li>\\n<li><a href=\\"#33__366\\">33. 什么是垃圾回收器他和垃圾算法有什么区别</a></li>\\n<li><a href=\\"#34__JVM__370\\">34. 说一下 JVM 有哪些垃圾回收器？</a></li>\\n<li><a href=\\"#35__401\\">35. 收集器可以这么分配？（了解就好了）</a></li>\\n<li><a href=\\"#36__412\\">36. 新生代垃圾回收器和老年代垃圾回收器都有哪些？有什么区别？</a></li>\\n<li><a href=\\"#37__420\\">37. 简述分代垃圾回收器是怎么工作的？</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#_436\\">四、内存分配策略</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#38_javaMinor_GCMajor_GC_437\\">38. 简述java内存分配与回收策率以及Minor GC和Major GC</a></li>\\n<li><a href=\\"#39__Eden__445\\">39. 对象优先在 Eden 区分配</a></li>\\n<li><a href=\\"#40__456\\">40. 为什么大对象直接进入老年代</a></li>\\n<li><a href=\\"#41__463\\">41. 长期存活对象将进入老年代</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#_472\\">五、虚拟机类加载机制</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#42_java_473\\">42. 简述java类加载机制?</a></li>\\n<li><a href=\\"#43__476\\">43. 类加载的机制及过程</a></li>\\n<li><a href=\\"#44_JVMClass_510\\">44. 描述一下JVM加载Class文件的原理机制</a></li>\\n<li><a href=\\"#45__522\\">45. 什么是类加载器，类加载器有哪些?</a></li>\\n<li><a href=\\"#46__532\\">46. 说一下类装载的执行过程？</a></li>\\n<li><a href=\\"#47__541\\">47. 什么是双亲委派模型？</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#JVM_565\\">六、JVM调优</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#48_JVM__566\\">48. JVM 调优的参数可以在那设置参数值</a></li>\\n<li><a href=\\"#49__JVM__574\\">49. 说一下 JVM 调优的工具？</a></li>\\n<li><a href=\\"#50__JVM__582\\">50. 常用的 JVM 调优的参数都有哪些？</a></li>\\n<li><a href=\\"#51_JVMGC_606\\">51. JVM的GC收集器设置</a></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{l as data};
