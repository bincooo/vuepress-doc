import{_ as a,E as o,Z as e,$ as l,a0 as n,a3 as t,a1 as i,a4 as s}from"./framework-e0d053a9.js";const p={},d=n("h2",{id:"【2022最新java面试宝典】——-springboot面试题-44道含答案",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#【2022最新java面试宝典】——-springboot面试题-44道含答案","aria-hidden":"true"},"#"),t(" 【2022最新Java面试宝典】—— SpringBoot面试题（44道含答案）")],-1),c=n("figure",null,[n("img",{src:"https://csdnimg.cn/release/blogv2/dist/pc/img/original.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),_=n("p",null,"于 2022-04-28 08:00:00 首次发布",-1),h={href:"http://creativecommons.org/licenses/by-sa/4.0/",target:"_blank",rel:"noopener noreferrer"},g=s(`<h3 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h3><ul><li><a href="#1__Spring_Boot_2">1. 什么是 Spring Boot？</a></li><li><a href="#2_SpringBoot_6">2. 为什么要用SpringBoot</a></li><li><a href="#3_SpringBootSpringCloud__9">3. SpringBoot与SpringCloud 区别</a></li><li><a href="#4_Spring_Boot__12">4. Spring Boot 有哪些优点？</a></li><li><a href="#5_Spring_Boot__20">5. Spring Boot 的核心注解是哪个？它主要由哪几个注解组成的？</a></li><li><a href="#6_Spring_Boot__29">6. Spring Boot 支持哪些日志框架？推荐和默认的日志框架是哪个？</a></li><li><a href="#7_SpringBoot_Starter_34">7. SpringBoot Starter的工作原理</a></li><li><a href="#8_Spring_Boot_2X__1X__40">8. Spring Boot 2.X 有什么新特性？与 1.X 有什么区别？</a></li><li><a href="#9_SpringBoot_49">9. SpringBoot支持什么前端模板，</a></li><li><a href="#10_SpringBoot_52">10. SpringBoot的缺点</a></li><li><a href="#11__Spring_Boot__55">11. 运行 Spring Boot 有哪几种方式？</a></li><li><a href="#12_Spring_Boot__60">12. Spring Boot 需要独立的容器运行吗？</a></li><li><a href="#13__Spring_Boot__63">13. 开启 Spring Boot 特性有哪几种方式？</a></li><li><a href="#14_SpringBoot__67">14. SpringBoot 实现热部署有哪几种方式？</a></li><li><a href="#15_SpringBoot_73">15. SpringBoot事物的使用</a></li><li><a href="#16_Async_77">16. Async异步调用方法</a></li><li><a href="#17__Spring_Boot__81">17. 如何在 Spring Boot 启动的时候运行一些特定的代码？</a></li><li><a href="#18_Spring_Boot__85">18. Spring Boot 有哪几种读取配置的方式？</a></li><li><a href="#19__JavaConfig_89">19. 什么是 JavaConfig？</a></li><li><a href="#20_SpringBoot_105">20. SpringBoot的自动配置原理是什么</a></li><li><a href="#21__Spring_Boot__113">21. 你如何理解 Spring Boot 配置加载顺序？</a></li><li><a href="#22__YAML_121">22. 什么是 YAML？</a></li><li><a href="#23_YAML___126">23. YAML 配置的优势在哪里 ?</a></li><li><a href="#24_Spring_Boot__XML___134">24. Spring Boot 是否可以使用 XML 配置 ?</a></li><li><a href="#25_spring_boot_bootstrapproperties_applicationproperties___138">25. spring boot 核心配置文件是什么？bootstrap.properties 和application.properties 有何区别 ?</a></li><li><a href="#26__Spring_Profiles_145">26. 什么是 Spring Profiles？</a></li><li><a href="#27_SpringBoot_154">27. SpringBoot多数据源拆分的思路</a></li><li><a href="#28_SpringBoot_158">28. SpringBoot多数据源事务如何管理</a></li><li><a href="#29__Spring_Boot__163">29. 保护 Spring Boot 应用有哪些方法？</a></li><li><a href="#30__Spring_Boot__170">30. 如何实现 Spring Boot 应用程序的安全性？</a></li><li><a href="#31__Spring_Security__Shiro___175">31. 比较一下 Spring Security 和 Shiro 各自的优缺点 ?</a></li><li><a href="#32_Spring_Boot___185">32. Spring Boot 中如何解决跨域问题 ?</a></li><li><a href="#33_Spring_Boot__204">33. Spring Boot 中的监视器是什么？</a></li><li><a href="#34__Spring_Boot__210">34. 如何使用 Spring Boot 实现全局异常处理？</a></li><li><a href="#35__Spring_Boot__214">35. 我们如何监视所有 Spring Boot 微服务？</a></li><li><a href="#36_SpringBoot_222">36. SpringBoot性能如何优化</a></li><li><a href="#37__Spring_Boot_Spring_Boot_228">37. 如何重新加载 Spring Boot 上的更改，而无需重新启动服务器？Spring Boot项目如何热部署？</a></li><li><a href="#38_SpringBoot_session___243">38. SpringBoot微服务中如何实现 session 共享 ?</a></li><li><a href="#39__starter_maven__251">39. 您使用了哪些 starter maven 依赖项？</a></li><li><a href="#40_Spring_Boot__starter___260">40. Spring Boot 中的 starter 到底是什么 ?</a></li><li><a href="#41_Spring_Boot___268">41. Spring Boot 中如何实现定时任务 ?</a></li><li><a href="#42_springbootstarterparent___273">42. spring-boot-starter-parent 有什么用 ?</a></li><li><a href="#43_SpringBoot_287">43. SpringBoot如何实现打包</a></li><li><a href="#44Spring_Boot__jar__jar___292">44.Spring Boot 打成的 jar 和普通的 jar 有什么区别 ?</a></li></ul><h2 id="_1-什么是-spring-boot" tabindex="-1"><a class="header-anchor" href="#_1-什么是-spring-boot" aria-hidden="true">#</a> 1. 什么是 Spring Boot？</h2><ul><li>Spring Boot 是 Spring 开源组织下的子项目，是 Spring 组件一站式解决方案，主要是简化了使用<br> Spring 的难度，简省了繁重的配置，提供了各种启动器，使开发者能快速上手。</li></ul><h2 id="_2-为什么要用springboot" tabindex="-1"><a class="header-anchor" href="#_2-为什么要用springboot" aria-hidden="true">#</a> 2. 为什么要用SpringBoot</h2><ul><li>快速开发，快速整合，配置简化、内嵌服务容器</li></ul><h2 id="_3-springboot与springcloud-区别" tabindex="-1"><a class="header-anchor" href="#_3-springboot与springcloud-区别" aria-hidden="true">#</a> 3. SpringBoot与SpringCloud 区别</h2><ul><li>SpringBoot是快速开发的Spring框架，SpringCloud是完整的微服务框架，SpringCloud依赖于SpringBoot。</li></ul><h2 id="_4-spring-boot-有哪些优点" tabindex="-1"><a class="header-anchor" href="#_4-spring-boot-有哪些优点" aria-hidden="true">#</a> 4. Spring Boot 有哪些优点？</h2><ul><li>Spring Boot 主要有如下优点： <ol><li>容易上手，提升开发效率，为 Spring 开发提供一个更快、更简单的开发框架。</li><li>开箱即用，远离繁琐的配置。</li><li>提供了一系列大型项目通用的非业务性功能，例如：内嵌服务器、安全管理、运行数据监<br> 控、运行状况检查和外部化配置等。</li><li>SpringBoot总结就是使编码变简单、配置变简单、部署变简单、监控变简单等等</li></ol></li></ul><h2 id="_5-spring-boot-的核心注解是哪个-它主要由哪几个注解组成的" tabindex="-1"><a class="header-anchor" href="#_5-spring-boot-的核心注解是哪个-它主要由哪几个注解组成的" aria-hidden="true">#</a> 5. Spring Boot 的核心注解是哪个？它主要由哪几个注解组成的？</h2><ul><li>启动类上面的注解是@SpringBootApplication，它也是 Spring Boot 的核心注解，主要组合包含<br> 了以下 3 个注解： <ul><li>@SpringBootConfiguration：组合了 @Configuration 注解，实现配置文件的功能。</li><li>@EnableAutoConfiguration：打开自动配置的功能，也可以关闭某个自动配置的选项， 例<br> 如： <code>java 如关闭数据源自动配置功能： @SpringBootApplication(exclude = { DataSourceAutoConfiguration.class })。</code></li><li>@ComponentScan：Spring组件扫描。</li></ul></li></ul><h2 id="_6-spring-boot-支持哪些日志框架-推荐和默认的日志框架是哪个" tabindex="-1"><a class="header-anchor" href="#_6-spring-boot-支持哪些日志框架-推荐和默认的日志框架是哪个" aria-hidden="true">#</a> 6. Spring Boot 支持哪些日志框架？推荐和默认的日志框架是哪个？</h2><ul><li>Spring Boot 支持 Java Util Logging, Log4j2, Lockback 作为日志框架，如果你使用 Starters 启动<br> 器，Spring Boot 将使用 Logback 作为默认日志框架，但是不管是那种日志框架他都支持将配置<br> 文件输出到控制台或者文件中。</li></ul><h2 id="_7-springboot-starter的工作原理" tabindex="-1"><a class="header-anchor" href="#_7-springboot-starter的工作原理" aria-hidden="true">#</a> 7. SpringBoot Starter的工作原理</h2><ul><li>我个人理解SpringBoot就是由各种Starter组合起来的，我们自己也可以开发Starter</li><li>在sprinBoot启动时由@SpringBootApplication注解会自动去maven中读取每个starter中的<br> spring.factories文件,该文件里配置了所有需要被创建spring容器中的bean，并且进行自动配置把<br> bean注入SpringContext中 //（SpringContext是Spring的配置文件）</li></ul><h2 id="_8-spring-boot-2-x-有什么新特性-与-1-x-有什么区别" tabindex="-1"><a class="header-anchor" href="#_8-spring-boot-2-x-有什么新特性-与-1-x-有什么区别" aria-hidden="true">#</a> 8. Spring Boot 2.X 有什么新特性？与 1.X 有什么区别？</h2><ul><li>配置变更</li><li>JDK 版本升级</li><li>第三方类库升级</li><li>响应式 Spring 编程支持</li><li>HTTP/2 支持</li><li>配置属性绑定</li><li>更多改进与加强</li></ul><h2 id="_9-springboot支持什么前端模板" tabindex="-1"><a class="header-anchor" href="#_9-springboot支持什么前端模板" aria-hidden="true">#</a> 9. SpringBoot支持什么前端模板，</h2><ul><li>thymeleaf，freemarker，jsp，官方不推荐JSP会有限制</li></ul><h2 id="_10-springboot的缺点" tabindex="-1"><a class="header-anchor" href="#_10-springboot的缺点" aria-hidden="true">#</a> 10. SpringBoot的缺点</h2><ul><li>我觉得是为难人，SpringBoot在目前我觉得没有什么缺点，非要找一个出来我觉得就是由于不用自己做的配置，报错时很难定位。</li></ul><h2 id="_11-运行-spring-boot-有哪几种方式" tabindex="-1"><a class="header-anchor" href="#_11-运行-spring-boot-有哪几种方式" aria-hidden="true">#</a> 11. 运行 Spring Boot 有哪几种方式？</h2><ol><li>打包用命令或者放到容器中运行</li><li>用 Maven/ Gradle 插件运行</li><li>直接执行 main 方法运行</li></ol><h2 id="_12-spring-boot-需要独立的容器运行吗" tabindex="-1"><a class="header-anchor" href="#_12-spring-boot-需要独立的容器运行吗" aria-hidden="true">#</a> 12. Spring Boot 需要独立的容器运行吗？</h2><ul><li>可以不需要，内置了 Tomcat/ Jetty 等容器。</li></ul><h2 id="_13-开启-spring-boot-特性有哪几种方式" tabindex="-1"><a class="header-anchor" href="#_13-开启-spring-boot-特性有哪几种方式" aria-hidden="true">#</a> 13. 开启 Spring Boot 特性有哪几种方式？</h2><ol><li>继承spring-boot-starter-parent项目</li><li>导入spring-boot-dependencies项目依赖</li></ol><h2 id="_14-springboot-实现热部署有哪几种方式" tabindex="-1"><a class="header-anchor" href="#_14-springboot-实现热部署有哪几种方式" aria-hidden="true">#</a> 14. SpringBoot 实现热部署有哪几种方式？</h2><ul><li>热部署就是可以不用重新运行SpringBoot项目可以实现操作后台代码自动更新到以运行的项目中</li><li>主要有两种方式： <ul><li>Spring Loaded</li><li>Spring-boot-devtools</li></ul></li></ul><h2 id="_15-springboot事物的使用" tabindex="-1"><a class="header-anchor" href="#_15-springboot事物的使用" aria-hidden="true">#</a> 15. SpringBoot事物的使用</h2><ul><li>SpringBoot的事物很简单，首先使用注解EnableTransactionManagement开启事物之后，然后在<br> Service方法上添加注解Transactional便可。</li></ul><h2 id="_16-async异步调用方法" tabindex="-1"><a class="header-anchor" href="#_16-async异步调用方法" aria-hidden="true">#</a> 16. Async异步调用方法</h2><ul><li>在SpringBoot中使用异步调用是很简单的，只需要在方法上使用@Async注解即可实现方法的异步<br> 调用。 注意：需要在启动类加入@EnableAsync使异步调用@Async注解生效。</li></ul><h2 id="_17-如何在-spring-boot-启动的时候运行一些特定的代码" tabindex="-1"><a class="header-anchor" href="#_17-如何在-spring-boot-启动的时候运行一些特定的代码" aria-hidden="true">#</a> 17. 如何在 Spring Boot 启动的时候运行一些特定的代码？</h2><ul><li>可以实现接口 ApplicationRunner 或者 CommandLineRunner，这两个接口实现方式一样，它们<br> 都只提供了一个 run 方法</li></ul><h2 id="_18-spring-boot-有哪几种读取配置的方式" tabindex="-1"><a class="header-anchor" href="#_18-spring-boot-有哪几种读取配置的方式" aria-hidden="true">#</a> 18. Spring Boot 有哪几种读取配置的方式？</h2><ul><li>Spring Boot 可以通过 @PropertySource,@Value,@Environment, @ConfigurationPropertie注<br> 解来绑定变量</li></ul><h2 id="_19-什么是-javaconfig" tabindex="-1"><a class="header-anchor" href="#_19-什么是-javaconfig" aria-hidden="true">#</a> 19. 什么是 JavaConfig？</h2><ul><li>Spring JavaConfig 是 Spring 社区的产品，Spring 3.0引入了他，它提供了配置 Spring IOC 容器的<br> 纯Java 方法。因此它有助于避免使用 XML 配置。使用 JavaConfig 的优点在于： <ul><li>面向对象的配置。由于配置被定义为 JavaConfig 中的类，因此用户可以充分利用 Java 中的面向对象功能。一个配置类可以继承另一个，重写它的@Bean 方法等。</li><li>减少或消除 XML 配置。基于依赖注入原则的外化配置的好处已被证明。但是，许多开发人员不希望在 XML 和 Java 之间来回切换。JavaConfig 为开发人员提供了一种纯 Java 方法来配置与 XML 配置概念相似的 Spring 容器。从技术角度来讲，只使用 JavaConfig 配置类来配置容器是可行的，但实际上很多人认为将JavaConfig 与 XML 混合匹配是理想的。</li><li>类型安全和重构友好。JavaConfig 提供了一种类型安全的方法来配置 Spring容器。由于 Java<br> 5.0 对泛型的支持，现在可以按类型而不是按名称检索 bean，不需要任何强制转换或基于字<br> 符串的查找。</li></ul></li><li>常用的Java config： <ul><li>@Configuration：在类上打上写下此注解，表示这个类是配置类</li><li>@ComponentScan：在配置类上添加 @ComponentScan 注解。该注解默认会扫描该类所在的包下所有的配置类，相当于之前的 &lt;context:component-scan &gt;。</li><li>@Bean：bean的注入：相当于以前的&lt; bean id=“objectMapper”<br> class=“org.codehaus.jackson.map.ObjectMapper” /&gt;</li><li>@EnableWebMvc：相当于xml的&lt;mvc:annotation-driven &gt;</li><li>@ImportResource： 相当于xml的 &lt; import resource=“applicationContextcache.xml”&gt;</li></ul></li></ul><h2 id="_20-springboot的自动配置原理是什么" tabindex="-1"><a class="header-anchor" href="#_20-springboot的自动配置原理是什么" aria-hidden="true">#</a> 20. SpringBoot的自动配置原理是什么</h2><ul><li>主要是Spring Boot的启动类上的核心注解SpringBootApplication注解主配置类，有了这个主配置<br> 类启动时就会为SpringBoot开启一个@EnableAutoConfiguration注解自动配置功能。</li><li>有了这个EnableAutoConfiguration的话就会： <ol><li>从配置文件META_INF/Spring.factories加载可能用到的自动配置类</li><li>去重，并将exclude和excludeName属性携带的类排除</li><li>过滤，将满足条件（@Conditional）的自动配置类返回</li></ol></li></ul><h2 id="_21-你如何理解-spring-boot-配置加载顺序" tabindex="-1"><a class="header-anchor" href="#_21-你如何理解-spring-boot-配置加载顺序" aria-hidden="true">#</a> 21. 你如何理解 Spring Boot 配置加载顺序？</h2><ul><li>在 Spring Boot 里面，可以使用以下几种方式来加载配置。<br> 1.properties文件；<br> 2.YAML文件；<br> 3.系统环境变量；<br> 4.命令行参数；<br> 等等……</li></ul><h2 id="_22-什么是-yaml" tabindex="-1"><a class="header-anchor" href="#_22-什么是-yaml" aria-hidden="true">#</a> 22. 什么是 YAML？</h2><ul><li>YAML 是一种人类可读的数据序列化语言。它通常用于配置文件。与属性文件相比，如果我们想要<br> 在配置文件中添加复杂的属性，YAML 文件就更加结构化，而且更少混淆。可以看出 YAML 具有分<br> 层配置数据。</li></ul><h2 id="_23-yaml-配置的优势在哪里" tabindex="-1"><a class="header-anchor" href="#_23-yaml-配置的优势在哪里" aria-hidden="true">#</a> 23. YAML 配置的优势在哪里 ?</h2><ul><li>YAML 现在可以算是非常流行的一种配置文件格式了，无论是前端还是后端，都可以见到 YAML 配<br> 置。那么 YAML 配置和传统的 properties 配置相比到底有哪些优势呢？ <ul><li>配置有序，在一些特殊的场景下，配置有序很关键</li><li>简洁明了，他还支持数组，数组中的元素可以是基本数据类型也可以是对象</li><li>相比 properties 配置文件，YAML 还有一个缺点，就是不支持 @PropertySource 注解导入<br> 自定义的 YAML 配置。</li></ul></li></ul><h2 id="_24-spring-boot-是否可以使用-xml-配置" tabindex="-1"><a class="header-anchor" href="#_24-spring-boot-是否可以使用-xml-配置" aria-hidden="true">#</a> 24. Spring Boot 是否可以使用 XML 配置 ?</h2><ul><li>Spring Boot 推荐使用 Java 配置而非 XML 配置，但是 Spring Boot 中也可以使用 XML 配置，通<br> 过 @ImportResource 注解可以引入一个 XML 配置。</li></ul><h2 id="_25-spring-boot-核心配置文件是什么-bootstrap-properties-和application-properties-有何区别" tabindex="-1"><a class="header-anchor" href="#_25-spring-boot-核心配置文件是什么-bootstrap-properties-和application-properties-有何区别" aria-hidden="true">#</a> 25. spring boot 核心配置文件是什么？bootstrap.properties 和application.properties 有何区别 ?</h2><ul><li>单纯做 Spring Boot 开发，可能不太容易遇到 bootstrap.properties 配置文件，但是在结合Spring Cloud 时，这个配置就会经常遇到了，特别是在需要加载一些远程配置文件的时侯。</li><li>spring boot 核心的两个配置文件： <ul><li>bootstrap (. yml 或者 . properties)：boostrap 由父 ApplicationContext 加载的，比applicaton 优先加载，配置在应用程序上下文的引导阶段生效。一般来说我们在 Spring Cloud 配置就会使用这个文件。且 boostrap 里面的属性不能被覆盖；</li><li>application (. yml 或者 . properties)： 由ApplicatonContext 加载，用于 spring boot 项目<br> 的自动化配置。</li></ul></li></ul><h2 id="_26-什么是-spring-profiles" tabindex="-1"><a class="header-anchor" href="#_26-什么是-spring-profiles" aria-hidden="true">#</a> 26. 什么是 Spring Profiles？</h2><ul><li>在项目的开发中，有些配置文件在开发、测试或者生产等不同环境中可能是不同的，例如数据库连<br> 接、redis的配置等等。那我们如何在不同环境中自动实现配置的切换呢？Spring给我们提供了<br> profiles机制给我们提供的就是来回切换配置文件的功能</li><li>Spring Profiles 允许用户根据配置文件（dev，test，prod 等）来注册 bean。因此，当应用程序<br> 在开发中运行时，只有某些 bean 可以加载，而在 PRODUCTION中，某些其他 bean 可以加载。<br> 假设我们的要求是 Swagger 文档仅适用于 QA 环境，并且禁用所有其他文档。这可以使用配置文<br> 件来完成。Spring Boot 使得使用配置文件非常简单。</li></ul><h2 id="_27-springboot多数据源拆分的思路" tabindex="-1"><a class="header-anchor" href="#_27-springboot多数据源拆分的思路" aria-hidden="true">#</a> 27. SpringBoot多数据源拆分的思路</h2><ul><li>先在properties配置文件中配置两个数据源，创建分包mapper，使用@ConfigurationProperties<br> 读取properties中的配置，使用@MapperScan注册到对应的mapper包中</li></ul><h2 id="_28-springboot多数据源事务如何管理" tabindex="-1"><a class="header-anchor" href="#_28-springboot多数据源事务如何管理" aria-hidden="true">#</a> 28. SpringBoot多数据源事务如何管理</h2><ul><li>第一种方式是在service层的@TransactionManager中使用transactionManager指定<br> DataSourceConfig中配置的事务</li><li>第二种是使用jta-atomikos实现分布式事务管理</li></ul><h2 id="_29-保护-spring-boot-应用有哪些方法" tabindex="-1"><a class="header-anchor" href="#_29-保护-spring-boot-应用有哪些方法" aria-hidden="true">#</a> 29. 保护 Spring Boot 应用有哪些方法？</h2><ul><li>在生产中使用HTTPS</li><li>使用Snyk检查你的依赖关系</li><li>升级到最新版本</li><li>启用CSRF保护</li><li>使用内容安全策略防止XSS攻击</li></ul><h2 id="_30-如何实现-spring-boot-应用程序的安全性" tabindex="-1"><a class="header-anchor" href="#_30-如何实现-spring-boot-应用程序的安全性" aria-hidden="true">#</a> 30. 如何实现 Spring Boot 应用程序的安全性？</h2><ul><li>为了实现 Spring Boot 的安全性，我们使用 spring-boot-starter-security 依赖项，并且必须添加<br> 安全配置。它只需要很少的代码。配置类将必须扩展WebSecurityConfigurerAdapter 并覆盖其方<br> 法。</li></ul><h2 id="_31-比较一下-spring-security-和-shiro-各自的优缺点" tabindex="-1"><a class="header-anchor" href="#_31-比较一下-spring-security-和-shiro-各自的优缺点" aria-hidden="true">#</a> 31. 比较一下 Spring Security 和 Shiro 各自的优缺点 ?</h2><ul><li>由于 Spring Boot 官方提供了大量的非常方便的开箱即用的 Starter ，包括 Spring Security 的<br> Starter ，使得在 Spring Boot 中使用 Spring Security 变得更加容易，甚至只需要添加一个依赖就<br> 可以保护所有的接口，所以，如果是 Spring Boot 项目，一般选择 Spring Security 。当然这只是<br> 一个建议的组合，单纯从技术上来说，无论怎么组合，都是没有问题的。Shiro 和 Spring Security<br> 相比，主要有如下一些特点： <ul><li>Spring Security 是一个重量级的安全管理框架；Shiro 则是一个轻量级的安全管理框架</li><li>Spring Security 概念复杂，配置繁琐；Shiro 概念简单、配置简单</li><li>Spring Security 功能强大；Shiro 功能简单</li></ul></li></ul><h2 id="_32-spring-boot-中如何解决跨域问题" tabindex="-1"><a class="header-anchor" href="#_32-spring-boot-中如何解决跨域问题" aria-hidden="true">#</a> 32. Spring Boot 中如何解决跨域问题 ?</h2><ul><li>跨域可以在前端通过 JSONP 来解决，但是 JSONP 只可以发送 GET 请求，无法发送其他类型的请<br> 求，在 RESTful 风格的应用中，就显得非常鸡肋，因此我们推荐在后端通过 （CORS，Crossorigin resource sharing） 来解决跨域问题。这种解决方案并非 Spring Boot 特有的，在传统的<br> SSM 框架中，就可以通过 CORS 来解决跨域问题，只不过之前我们是在 XML 文件中配置 CORS ，<br> 现在可以通过实现WebMvcConfigurer接口然后重写addCorsMappings方法解决跨域问题。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CorsConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>
	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span><span class="token class-name">CorsRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		registry<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">allowedOrigins</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">allowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;PUT&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;DELETE&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;OPTIONS&quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">maxAge</span><span class="token punctuation">(</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_33-spring-boot-中的监视器是什么" tabindex="-1"><a class="header-anchor" href="#_33-spring-boot-中的监视器是什么" aria-hidden="true">#</a> 33. Spring Boot 中的监视器是什么？</h2><ul><li>Spring boot actuator 是 spring 启动框架中的重要功能之一。Spring boot 监视器可帮助您访问生<br> 产环境中正在运行的应用程序的当前状态。有几个指标必须在生产环境中进行检查和监控。即使一<br> 些外部应用程序可能正在使用这些服务来向相关人员触发警报消息。监视器模块公开了一组可直接<br> 作为 HTTP URL 访问的REST 端点来检查状态。</li></ul><h2 id="_34-如何使用-spring-boot-实现全局异常处理" tabindex="-1"><a class="header-anchor" href="#_34-如何使用-spring-boot-实现全局异常处理" aria-hidden="true">#</a> 34. 如何使用 Spring Boot 实现全局异常处理？</h2><ul><li>Spring 提供了一种使用 ControllerAdvice 处理异常的非常有用的方法。 我们通过实现一个<br> ControlerAdvice 类，来处理控制器类抛出的所有异常。</li></ul><h2 id="_35-我们如何监视所有-spring-boot-微服务" tabindex="-1"><a class="header-anchor" href="#_35-我们如何监视所有-spring-boot-微服务" aria-hidden="true">#</a> 35. 我们如何监视所有 Spring Boot 微服务？</h2><ul><li>Spring Boot 提供监视器端点以监控各个微服务的度量。这些端点对于获取有关应用程序的信息<br> （如它们是否已启动）以及它们的组件（如数据库等）是否正常运行很有帮助。但是，使用监视器<br> 的一个主要缺点或困难是，我们必须单独打开应用程序的知识点以了解其状态或健康状况。想象一<br> 下涉及 50 个应用程序的微服务，管理员将不得不击中所有 50 个应用程序的执行终端。为了帮助<br> 我们处理这种情况，我们将使用位于的开源项目。 它建立在 Spring Boot Actuator 之上，它提供<br> 了一个 Web UI，使我们能够可视化多个应用程序的度量。</li></ul><h2 id="_36-springboot性能如何优化" tabindex="-1"><a class="header-anchor" href="#_36-springboot性能如何优化" aria-hidden="true">#</a> 36. SpringBoot性能如何优化</h2><ul><li>如果项目比较大，类比较多，不使用@SpringBootApplication，采用@Compoment指定扫包范<br> 围</li><li>在项目启动时设置JVM初始内存和最大内存相同</li><li>将springboot内置服务器由tomcat设置为undertow</li></ul><h2 id="_37-如何重新加载-spring-boot-上的更改-而无需重新启动服务器-spring-boot项目如何热部署" tabindex="-1"><a class="header-anchor" href="#_37-如何重新加载-spring-boot-上的更改-而无需重新启动服务器-spring-boot项目如何热部署" aria-hidden="true">#</a> 37. 如何重新加载 Spring Boot 上的更改，而无需重新启动服务器？Spring Boot项目如何热部署？</h2><ul><li>这可以使用 DEV 工具来实现。通过这种依赖关系，您可以节省任何更改，嵌入式tomcat 将重新启<br> 动。Spring Boot 有一个开发工具（DevTools）模块，它有助于提高开发人员的生产力。Java 开<br> 发人员面临的一个主要挑战是将文件更改自动部署到服务器并自动重启服务器。开发人员可以重新<br> 加载 Spring Boot 上的更改，而无需重新启动服务器。这将消除每次手动部署更改的需要。Spring<br> Boot 在发布它的第一个版本时没有这个功能。这是开发人员最需要的功能。DevTools 模块完全满<br> 足开发人员的需求。该模块将在生产环境中被禁用。它还提供 H2 数据库控制台以更好地测试应用<br> 程序。</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_38-springboot微服务中如何实现-session-共享" tabindex="-1"><a class="header-anchor" href="#_38-springboot微服务中如何实现-session-共享" aria-hidden="true">#</a> 38. SpringBoot微服务中如何实现 session 共享 ?</h2><ul><li>在微服务中，一个完整的项目被拆分成多个不相同的独立的服务，各个服务独立部署在不同的服务<br> 器上，各自的 session 被从物理空间上隔离开了，但是经常，我们需要在不同微服务之间共享<br> session ，常见的方案就是 Spring Session + Redis 来实现 session 共享。将所有微服务的<br> session 统一保存在 Redis 上，当各个微服务对 session 有相关的读写操作时，都去操作 Redis 上<br> 的 session 。这样就实现了 session 共享，Spring Session 基于 Spring 中的代理过滤器实现，使<br> 得 session 的同步操作对开发人员而言是透明的，非常简便。</li></ul><h2 id="_39-您使用了哪些-starter-maven-依赖项" tabindex="-1"><a class="header-anchor" href="#_39-您使用了哪些-starter-maven-依赖项" aria-hidden="true">#</a> 39. 您使用了哪些 starter maven 依赖项？</h2><ul><li>使用了下面的一些依赖项 <ul><li>spring-boot-starter-web 嵌入tomcat和web开发需要servlet与jsp支持</li><li>spring-boot-starter-data-jpa 数据库支持</li><li>spring-boot-starter-data-redis redis数据库支持</li><li>spring-boot-starter-data-solr solr支持</li><li>mybatis-spring-boot-starter 第三方的mybatis集成starter<br> 自定义的starter(如果自己开发过就可以说出来)</li></ul></li></ul><h2 id="_40-spring-boot-中的-starter-到底是什么" tabindex="-1"><a class="header-anchor" href="#_40-spring-boot-中的-starter-到底是什么" aria-hidden="true">#</a> 40. Spring Boot 中的 starter 到底是什么 ?</h2><ul><li>首先，这个 Starter 并非什么新的技术点，基本上还是基于 Spring 已有功能来实现的。首先它提<br> 供了一个自动化配置类，一般命名为 XXXAutoConfiguration ，在这个配置类中通过条件注解来<br> 决定一个配置是否生效（条件注解就是 Spring 中原本就有的），然后它还会提供一系列的默认配<br> 置，也允许开发者根据实际情况自定义相关配置，然后通过类型安全的属性(spring.factories)注入<br> 将这些配置属性注入进来，新注入的属性会代替掉默认属性。正因为如此，很多第三方框架，我们<br> 只需要引入依赖就可以直接使用了。当然，开发者也可以自定义 Starter</li></ul><h2 id="_41-spring-boot-中如何实现定时任务" tabindex="-1"><a class="header-anchor" href="#_41-spring-boot-中如何实现定时任务" aria-hidden="true">#</a> 41. Spring Boot 中如何实现定时任务 ?</h2><ul><li>在 Spring Boot 中使用定时任务主要有两种不同的方式，一个就是使用 Spring 中的 @Scheduled<br> 注解，另一-个则是使用第三方框架 Quartz。</li><li>使用 Spring 中的 @Scheduled 的方式主要通过 @Scheduled 注解来实现。</li></ul><h2 id="_42-spring-boot-starter-parent-有什么用" tabindex="-1"><a class="header-anchor" href="#_42-spring-boot-starter-parent-有什么用" aria-hidden="true">#</a> 42. spring-boot-starter-parent 有什么用 ?</h2><ul><li>我们都知道，新创建一个 Spring Boot 项目，默认都是有 parent 的，这个 parent 就是 springboot-starter-parent ，spring-boot-starter-parent 主要有如下作用： <ol><li>定义了 Java 编译版本为 1.8 。</li><li>使用 UTF-8 格式编码。</li><li>继承自 spring-boot-dependencies，这个里边定义了依赖的版本，也正是因为继承了这个依<br> 赖，所以我们在写依赖时才不需要写版本号。</li><li>执行打包操作的配置。</li><li>自动化的资源过滤。</li><li>自动化的插件配置。</li><li>针对 application.properties 和 application.yml 的资源过滤，包括通过 profile 定义的不同<br> 环境的配置文件，例如 application-dev.properties 和 application-dev.yml。</li></ol></li></ul><p>总结就是打包用的</p><h2 id="_43-springboot如何实现打包" tabindex="-1"><a class="header-anchor" href="#_43-springboot如何实现打包" aria-hidden="true">#</a> 43. SpringBoot如何实现打包</h2><ul><li>进入项目目录在控制台输入mvn clean package，clean是清空已存在的项目包，package进行打<br> 包</li><li>或者点击左边选项栏中的Mavne，先点击clean在点击package</li></ul><h2 id="_44-spring-boot-打成的-jar-和普通的-jar-有什么区别" tabindex="-1"><a class="header-anchor" href="#_44-spring-boot-打成的-jar-和普通的-jar-有什么区别" aria-hidden="true">#</a> 44.Spring Boot 打成的 jar 和普通的 jar 有什么区别 ?</h2><ul><li>Spring Boot 项目最终打包成的 jar 是可执行 jar ，这种 jar 可以直接通过 java -jar xxx.jar 命<br> 令来运行，这种 jar 不可以作为普通的 jar 被其他项目依赖，即使依赖了也无法使用其中的类。</li><li>Spring Boot 的 jar 无法被其他项目依赖，主要还是他和普通 jar 的结构不同。普通的 jar 包，解压<br> 后直接就是包名，包里就是我们的代码，而 Spring Boot 打包成的可执行 jar 解压后，在 \\BOOTINF\\classes 目录下才是我们的代码，因此无法被直接引用。如果非要引用，可以在 pom.xml文件中增加配置，将 Spring Boot 项目打包成两个 jar ，一个可执行，一个可引用。</li></ul><hr><p><strong>史上最全Java面试宝典，BAT大厂面试必备。整理不易，建议先关注点赞加收藏</strong></p>`,95),u=n("thead",null,[n("tr",null,[n("th",null,"序号"),n("th",null,"名称"),n("th",null,"地址")])],-1),b=n("td",null,"1",-1),S=n("td",null,"Java基础面试题（91道含答案）",-1),f={href:"https://blog.csdn.net/qq_30999361/article/details/124482581",target:"_blank",rel:"noopener noreferrer"},B=n("td",null,"2",-1),k=n("td",null,"Java并发编程面试题 （123道含答案）",-1),v={href:"https://blog.csdn.net/qq_30999361/article/details/124545403",target:"_blank",rel:"noopener noreferrer"},m=n("td",null,"3",-1),x=n("td",null,"Java异常面试题 （33道含答案）",-1),q={href:"https://blog.csdn.net/qq_30999361/article/details/124560006",target:"_blank",rel:"noopener noreferrer"},C=n("td",null,"4",-1),y=n("td",null,"Java虚拟机（JVM）面试题（51道含答案）",-1),M={href:"https://blog.csdn.net/qq_30999361/article/details/124532763",target:"_blank",rel:"noopener noreferrer"},A=n("td",null,"5",-1),j=n("td",null,"Java集合面试题（52道含答案）",-1),L={href:"https://blog.csdn.net/qq_30999361/article/details/124503952",target:"_blank",rel:"noopener noreferrer"},J=n("td",null,"6",-1),T=n("td",null,"Linux面试题（50道含答案）",-1),X={href:"https://blog.csdn.net/qq_30999361/article/details/124575798",target:"_blank",rel:"noopener noreferrer"},E=n("td",null,"7",-1),P=n("td",null,"Memcache面试题（23道含答案）",-1),O={href:"https://blog.csdn.net/qq_30999361/article/details/124596870",target:"_blank",rel:"noopener noreferrer"},R=n("td",null,"8",-1),I=n("td",null,"Mybatiss面试题 （37道含答案）",-1),Y={href:"https://blog.csdn.net/qq_30999361/article/details/124560907",target:"_blank",rel:"noopener noreferrer"},N=n("td",null,"9",-1),w=n("td",null,"MySQL面试题（40道含答案）",-1),D={href:"https://blog.csdn.net/qq_30999361/article/details/124506169",target:"_blank",rel:"noopener noreferrer"},V=n("td",null,"10",-1),U=n("td",null,"Netty面试题（49道含答案）",-1),H={href:"https://blog.csdn.net/qq_30999361/article/details/124617122",target:"_blank",rel:"noopener noreferrer"},W=n("td",null,"11",-1),F=n("td",null,"Nginx面试题（23道含答案）",-1),G={href:"https://blog.csdn.net/qq_30999361/article/details/124597174",target:"_blank",rel:"noopener noreferrer"},Q=n("td",null,"12",-1),z=n("td",null,"RabbitMQ面试题（22道含答案）",-1),Z={href:"https://blog.csdn.net/qq_30999361/article/details/124533998",target:"_blank",rel:"noopener noreferrer"},K=n("td",null,"13",-1),$=n("td",null,"Redis面试题（70道含答案）",-1),nn={href:"https://blog.csdn.net/qq_30999361/article/details/124459566",target:"_blank",rel:"noopener noreferrer"},tn=n("td",null,"14",-1),rn=n("td",null,"SpringBoot面试题（44道含答案）",-1),an={href:"https://blog.csdn.net/qq_30999361/article/details/124461725",target:"_blank",rel:"noopener noreferrer"},on=n("td",null,"15",-1),en=n("td",null,"SpringCloud面试题（49道含答案）",-1),ln={href:"https://blog.csdn.net/qq_30999361/article/details/124430712",target:"_blank",rel:"noopener noreferrer"},sn=n("td",null,"16",-1),pn=n("td",null,"SpringMVC面试题（29道含答案）",-1),dn={href:"https://blog.csdn.net/qq_30999361/article/details/124519135",target:"_blank",rel:"noopener noreferrer"},cn=n("td",null,"17",-1),_n=n("td",null,"Spring面试题（75道含答案）",-1),hn={href:"https://blog.csdn.net/qq_30999361/article/details/124519472",target:"_blank",rel:"noopener noreferrer"},gn=n("td",null,"18",-1),un=n("td",null,"TCP、UDP、Socket、Http网络编程面试题（47道含答案）",-1),bn={href:"https://blog.csdn.net/qq_30999361/article/details/124617792",target:"_blank",rel:"noopener noreferrer"},Sn=n("td",null,"19",-1),fn=n("td",null,"Tomcat面试题（15道含答案）",-1),Bn={href:"https://blog.csdn.net/qq_30999361/article/details/124576964",target:"_blank",rel:"noopener noreferrer"},kn=n("td",null,"20",-1),vn=n("td",null,"Zookeeper面试题（28道含答案）",-1),mn={href:"https://blog.csdn.net/qq_30999361/article/details/124596208",target:"_blank",rel:"noopener noreferrer"},xn=n("td",null,"21",-1),qn=n("td",null,"多线程面试题（60道含答案）",-1),Cn={href:"https://blog.csdn.net/qq_30999361/article/details/124596462",target:"_blank",rel:"noopener noreferrer"},yn=n("td",null,"22",-1),Mn=n("td",null,"设计模式面试题（14道含答案）",-1),An={href:"https://blog.csdn.net/qq_30999361/article/details/124637874",target:"_blank",rel:"noopener noreferrer"},jn=n("td",null,"23",-1),Ln=n("td",null,"BIO、NIO、AIO、Netty面试题（35道含答案）",-1),Jn={href:"https://blog.csdn.net/qq_30999361/article/details/124653616",target:"_blank",rel:"noopener noreferrer"},Tn=n("td",null,"24",-1),Xn=n("td",null,"Dubbo面试题（47道含答案）",-1),En={href:"https://blog.csdn.net/qq_30999361/article/details/124637288",target:"_blank",rel:"noopener noreferrer"},Pn=n("td",null,"25",-1),On=n("td",null,"ElasticSearch面试题（31道含答案）",-1),Rn={href:"https://blog.csdn.net/qq_30999361/article/details/124619240",target:"_blank",rel:"noopener noreferrer"},In=n("td",null,"26",-1),Yn=n("td",null,"Git常用命令（63条）",-1),Nn={href:"https://blog.csdn.net/qq_30999361/article/details/124438420",target:"_blank",rel:"noopener noreferrer"};function wn(Dn,Vn){const r=o("ExternalLinkIcon");return e(),l("div",null,[d,c,_,n("p",null,[t("版权声明：本文为博主原创文章，遵循 "),n("a",h,[t("CC 4.0 BY-SA"),i(r)]),t(" 版权协议，转载请附上原文出处链接和本声明。")]),g,n("table",null,[u,n("tbody",null,[n("tr",null,[b,S,n("td",null,[n("a",f,[t("（点击查看）"),i(r)])])]),n("tr",null,[B,k,n("td",null,[n("a",v,[t("（点击查看）"),i(r)])])]),n("tr",null,[m,x,n("td",null,[n("a",q,[t("（点击查看）"),i(r)])])]),n("tr",null,[C,y,n("td",null,[n("a",M,[t("（点击查看）"),i(r)])])]),n("tr",null,[A,j,n("td",null,[n("a",L,[t("（点击查看）"),i(r)])])]),n("tr",null,[J,T,n("td",null,[n("a",X,[t("（点击查看）"),i(r)])])]),n("tr",null,[E,P,n("td",null,[n("a",O,[t("（点击查看）"),i(r)])])]),n("tr",null,[R,I,n("td",null,[n("a",Y,[t("（点击查看）"),i(r)])])]),n("tr",null,[N,w,n("td",null,[n("a",D,[t("（点击查看）"),i(r)])])]),n("tr",null,[V,U,n("td",null,[n("a",H,[t("（点击查看）"),i(r)])])]),n("tr",null,[W,F,n("td",null,[n("a",G,[t("（点击查看）"),i(r)])])]),n("tr",null,[Q,z,n("td",null,[n("a",Z,[t("（点击查看）"),i(r)])])]),n("tr",null,[K,$,n("td",null,[n("a",nn,[t("（点击查看）"),i(r)])])]),n("tr",null,[tn,rn,n("td",null,[n("a",an,[t("（点击查看）"),i(r)])])]),n("tr",null,[on,en,n("td",null,[n("a",ln,[t("（点击查看）"),i(r)])])]),n("tr",null,[sn,pn,n("td",null,[n("a",dn,[t("（点击查看）"),i(r)])])]),n("tr",null,[cn,_n,n("td",null,[n("a",hn,[t("（点击查看）"),i(r)])])]),n("tr",null,[gn,un,n("td",null,[n("a",bn,[t("（点击查看）"),i(r)])])]),n("tr",null,[Sn,fn,n("td",null,[n("a",Bn,[t("（点击查看）"),i(r)])])]),n("tr",null,[kn,vn,n("td",null,[n("a",mn,[t("（点击查看）"),i(r)])])]),n("tr",null,[xn,qn,n("td",null,[n("a",Cn,[t("（点击查看）"),i(r)])])]),n("tr",null,[yn,Mn,n("td",null,[n("a",An,[t("（点击查看）"),i(r)])])]),n("tr",null,[jn,Ln,n("td",null,[n("a",Jn,[t("（点击查看）"),i(r)])])]),n("tr",null,[Tn,Xn,n("td",null,[n("a",En,[t("（点击查看）"),i(r)])])]),n("tr",null,[Pn,On,n("td",null,[n("a",Rn,[t("（点击查看）"),i(r)])])]),n("tr",null,[In,Yn,n("td",null,[n("a",Nn,[t("（点击查看）"),i(r)])])])])])])}const Hn=a(p,[["render",wn],["__file","SpringBoot面试题（44道含答案）.html.vue"]]);export{Hn as default};
