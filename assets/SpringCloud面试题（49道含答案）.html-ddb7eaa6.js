import{_ as t,E as n,Z as d,$ as a,a0 as l,a3 as r,a1 as e,a4 as o}from"./framework-e0d053a9.js";const u={},h=l("h2",{id:"【2022最新java面试宝典】——-springcloud面试题-49道含答案",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#【2022最新java面试宝典】——-springcloud面试题-49道含答案","aria-hidden":"true"},"#"),r(" 【2022最新Java面试宝典】—— SpringCloud面试题（49道含答案）")],-1),s=l("figure",null,[l("img",{src:"https://csdnimg.cn/release/blogv2/dist/pc/img/original.png",alt:"",tabindex:"0",loading:"lazy"}),l("figcaption")],-1),_=l("p",null,"于 2022-04-27 08:30:00 首次发布",-1),c={href:"http://creativecommons.org/licenses/by-sa/4.0/",target:"_blank",rel:"noopener noreferrer"},g=o('<h3 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h3><ul><li><a href="#Spring_Cloud_2">Spring Cloud</a></li><li><ul><li><a href="#1__3">1. 什么是微服务架构</a></li><li><a href="#2_Spring_Cloud_7">2. 为什么需要学习Spring Cloud</a></li><li><a href="#3_Spring_Cloud__17">3. Spring Cloud 是什么</a></li><li><a href="#4_SpringCloud_25">4. SpringCloud的优缺点</a></li><li><a href="#5_SpringBootSpringCloud_46">5. SpringBoot和SpringCloud的区别？</a></li><li><a href="#6_Spring_CloudSpringBoot_56">6. Spring Cloud和SpringBoot版本对应关系</a></li><li><a href="#7_SpringCloud_65">7. SpringCloud由什么组成</a></li><li><a href="#8__Spring_Boot__75">8. 使用 Spring Boot 开发分布式微服务时，我们面临什么问题</a></li><li><a href="#9_Spring_Cloud_dubbo_84">9. Spring Cloud 和dubbo区别?</a></li></ul></li><li><a href="#Eureka_91">Eureka</a></li><li><ul><li><a href="#10_Spring_Cloud__92">10. 服务注册和发现是什么意思？Spring Cloud 如何实现？</a></li><li><a href="#11_Eureka_99">11. 什么是Eureka</a></li><li><a href="#12_Eureka_104">12. Eureka怎么实现高可用</a></li><li><a href="#13_Eureka_108">13. 什么是Eureka的自我保护模式，</a></li><li><a href="#14_DiscoveryClient_113">14. DiscoveryClient的作用</a></li><li><a href="#15_EurekaZooKeeper_116">15. Eureka和ZooKeeper都可以提供服务注册与发现的功能,请说说两个的区别</a></li></ul></li><li><a href="#Zuul_128">Zuul</a></li><li><ul><li><a href="#16__129">16. 什么是网关?</a></li><li><a href="#17__132">17. 网关的作用是什么</a></li><li><a href="#18_Spring_Cloud_Zuul_135">18. 什么是Spring Cloud Zuul（服务网关）</a></li><li><a href="#19__147">19. 网关与过滤器有什么区别</a></li><li><a href="#20__150">20. 常用网关框架有那些？</a></li><li><a href="#21_ZuulNginx_153">21. Zuul与Nginx有什么区别？</a></li><li><a href="#22_NginxZuul_158">22. 既然Nginx可以实现网关？为什么还需要使用Zuul框架</a></li><li><a href="#23_API_162">23. 如何设计一套API接口</a></li><li><a href="#24_ZuulFilter_167">24. ZuulFilter常用有那些方法</a></li><li><a href="#25_Zuul_173">25. 如何实现动态Zuul网关路由转发</a></li><li><a href="#26_Zuul_177">26. Zuul网关如何搭建集群</a></li></ul></li><li><a href="#Ribbon_181">Ribbon</a></li><li><ul><li><a href="#27__182">27. 负载平衡的意义什么？</a></li><li><a href="#28_Ribbon_191">28. Ribbon是什么？</a></li><li><a href="#29_NginxRibbon_197">29. Nginx与Ribbon的区别</a></li><li><a href="#30_Ribbon_202">30. Ribbon底层实现原理</a></li></ul></li><li><a href="#Hystrix_208">Hystrix</a></li><li><ul><li><a href="#31__209">31. 什么是断路器</a></li><li><a href="#32__Hystrix_217">32. 什么是 Hystrix？</a></li><li><a href="#33__227">33. 谈谈服务雪崩效应</a></li><li><a href="#34__234">34. 在微服务中，如何保护服务?</a></li><li><a href="#35__240">35. 服务雪崩效应产生的原因</a></li><li><a href="#36__245">36. 谈谈服务降级、熔断、服务隔离</a></li><li><a href="#37__255">37. 服务降级底层是如何实现的？</a></li></ul></li><li><a href="#Feign_259">Feign</a></li><li><ul><li><a href="#38_Feign_260">38. 什么是Feign？</a></li><li><a href="#39_SpringCloud_265">39. SpringCloud有几种调用接口方式</a></li><li><a href="#40_RibbonFeign_269">40. Ribbon和Feign调用服务的区别</a></li></ul></li><li><a href="#Bus_276">Bus</a></li><li><ul><li><a href="#41__Spring_Cloud_Bus_277">41. 什么是 Spring Cloud Bus？</a></li></ul></li><li><a href="#Config_284">Config</a></li><li><ul><li><a href="#42_Spring_Cloud_Config_285">42. 什么是Spring Cloud Config?</a></li><li><a href="#43__291">43. 分布式配置中心有那些框架？</a></li><li><a href="#44__294">44. 分布式配置中心的作用？</a></li><li><a href="#45_SpringCloud_Config__297">45. SpringCloud Config 可以实现实时刷新吗？</a></li></ul></li><li><a href="#Gateway_300">Gateway</a></li><li><ul><li><a href="#46_Spring_Cloud_Gateway_301">46. 什么是Spring Cloud Gateway?</a></li><li><a href="#47_SpringCloud_307">47. SpringCloud主要项目</a></li><li><a href="#48_Spring_CloudSpringBoot_399">48. Spring Cloud和SpringBoot版本对应关系</a></li><li><a href="#49_Spring_Cloud_408">49. Spring Cloud和各子项目版本对应关系</a></li></ul></li></ul><h2 id="spring-cloud" tabindex="-1"><a class="header-anchor" href="#spring-cloud" aria-hidden="true">#</a> Spring Cloud</h2><h2 id="_1-什么是微服务架构" tabindex="-1"><a class="header-anchor" href="#_1-什么是微服务架构" aria-hidden="true">#</a> 1. 什么是微服务架构</h2><ul><li>微服务架构就是将单体的应用程序分成多个应用程序，这多个应用程序就成为微服务，每个微服务 运行在自己的进程中，并使用轻量级的机制通信。这些服务围绕业务能力来划分，并通过自动化部 署机制来独立部署。这些服务可以使用不同的编程语言，不同数据库，以保证最低限度的集中式管 理。</li></ul><h2 id="_2-为什么需要学习spring-cloud" tabindex="-1"><a class="header-anchor" href="#_2-为什么需要学习spring-cloud" aria-hidden="true">#</a> 2. 为什么需要学习Spring Cloud</h2><ul><li>首先springcloud基于spingboot的优雅简洁，可还记得我们被无数xml支配的恐惧？可还记得<br> springmvc，mybatis错综复杂的配置，有了spingboot，这些东西都不需要了，spingboot好处不<br> 再赘诉，springcloud就基于SpringBoot把市场上优秀的服务框架组合起来，通过Spring Boot风<br> 格进行再封装屏蔽掉了复杂的配置和实现原理</li><li>什么叫做开箱即用？即使是当年的黄金搭档dubbo+zookeeper下载配置起来也是颇费心神的！而<br> springcloud完成这些只需要一个jar的依赖就可以了！</li><li>springcloud大多数子模块都是直击痛点，像zuul解决的跨域，fegin解决的负载均衡，hystrix的熔<br> 断机制等等等等</li></ul><h2 id="_3-spring-cloud-是什么" tabindex="-1"><a class="header-anchor" href="#_3-spring-cloud-是什么" aria-hidden="true">#</a> 3. Spring Cloud 是什么</h2><ul><li>Spring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系<br> 统基础设施的开发，如服务发现注册、配置中心、智能路由、消息总线、负载均衡、断路器、数据<br> 监控等，都可以用Spring Boot的开发风格做到一键启动和部署。</li><li>Spring Cloud并没有重复制造轮子，它只是将各家公司开发的比较成熟、经得起实际考验的服务框<br> 架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留<br> 出了一套简单易懂、易部署和易维护的分布式系统开发工具包。</li></ul><h2 id="_4-springcloud的优缺点" tabindex="-1"><a class="header-anchor" href="#_4-springcloud的优缺点" aria-hidden="true">#</a> 4. SpringCloud的优缺点</h2><p>优点：</p><blockquote><p>1.耦合度比较低。不会影响其他模块的开发。<br> 2.减轻团队的成本，可以并行开发，不用关注其他人怎么开发，先关注自己的开发。<br> 3.配置比较简单，基本用注解就能实现，不用使用过多的配置文件。<br> 4.微服务跨平台的，可以用任何一种语言开发。<br> 5.每个微服务可以有自己的独立的数据库也有用公共的数据库。<br> 6.直接写后端的代码，不用关注前端怎么开发，直接写自己的后端代码即可，然后暴露接口，通过组件进行 服务通信。</p></blockquote><p>缺点：</p><blockquote><p>1.部署比较麻烦，给运维工程师带来一定的麻烦。<br> 2.针对数据的管理比麻烦，因为微服务可以每个微服务使用一个数据库。<br> 3.系统集成测试比较麻烦<br> 4.性能的监控比较麻烦。【最好开发一个大屏监控系统】</p></blockquote><ul><li>总的来说优点大过于缺点，目前看来Spring Cloud是一套非常完善的分布式框架，目前很多企业开<br> 始用微服务、Spring Cloud的优势是显而易见的。因此对于想研究微服务架构的同学来说，学习<br> Spring Cloud是一个不错的选择。</li></ul><h2 id="_5-springboot和springcloud的区别" tabindex="-1"><a class="header-anchor" href="#_5-springboot和springcloud的区别" aria-hidden="true">#</a> 5. SpringBoot和SpringCloud的区别？</h2><ul><li>SpringBoot专注于快速方便的开发单个个体微服务。</li><li>SpringCloud是关注全局的微服务协调整理治理框架，它将SpringBoot开发的一个个单体微服务整<br> 合并管理起来，</li><li>为各个微服务之间提供，配置管理、服务发现、断路器、路由、微代理、事件总线、全局锁、决策<br> 竞选、分布式会话等等集成服务</li><li>SpringBoot可以离开SpringCloud独立使用开发项目， 但是SpringCloud离不开SpringBoot ，属<br> 于依赖的关系</li><li>SpringBoot专注于快速、方便的开发单个微服务个体，SpringCloud关注全局的服务治理框架。</li></ul><h2 id="_6-spring-cloud和springboot版本对应关系" tabindex="-1"><a class="header-anchor" href="#_6-spring-cloud和springboot版本对应关系" aria-hidden="true">#</a> 6. Spring Cloud和SpringBoot版本对应关系</h2><table><thead><tr><th>Spring Cloud Version</th><th>SpringBoot Version</th></tr></thead><tbody><tr><td>Hoxton</td><td>2.2.x</td></tr><tr><td>Greenwich</td><td>2.1.x</td></tr><tr><td>Finchley</td><td>2.0.x</td></tr><tr><td>Edgware</td><td>1.5.x</td></tr><tr><td>Dalston</td><td>1.5.x</td></tr></tbody></table><h2 id="_7-springcloud由什么组成" tabindex="-1"><a class="header-anchor" href="#_7-springcloud由什么组成" aria-hidden="true">#</a> 7. SpringCloud由什么组成</h2><ul><li>这就有很多了，我讲几个开发中最重要的 <ul><li>Spring Cloud Eureka：服务注册与发现</li><li>Spring Cloud Zuul：服务网关</li><li>Spring Cloud Ribbon：客户端负载均衡</li><li>Spring Cloud Feign：声明性的Web服务客户端</li><li>Spring Cloud Hystrix：断路器</li><li>Spring Cloud Config：分布式统一配置管理<br> 等20几个框架，开源一直在更新</li></ul></li></ul><h2 id="_8-使用-spring-boot-开发分布式微服务时-我们面临什么问题" tabindex="-1"><a class="header-anchor" href="#_8-使用-spring-boot-开发分布式微服务时-我们面临什么问题" aria-hidden="true">#</a> 8. 使用 Spring Boot 开发分布式微服务时，我们面临什么问题</h2><ul><li>与分布式系统相关的复杂性-这种开销包括网络问题，延迟开销，带宽问题，安全问题。</li><li>服务发现-服务发现工具管理群集中的流程和服务如何查找和互相交谈。它涉及一个服务目<br> 录，在该目录中注册服务，然后能够查找并连接到该目录中的服务。</li><li>冗余-分布式系统中的冗余问题。</li><li>负载平衡 --负载平衡改善跨多个计算资源的工作负荷，诸如计算机，计算机集群，网络链<br> 路，中央处理单元，或磁盘驱动器的分布。</li><li>性能-问题 由于各种运营开销导致的性能问题。</li></ul><h2 id="_9-spring-cloud-和dubbo区别" tabindex="-1"><a class="header-anchor" href="#_9-spring-cloud-和dubbo区别" aria-hidden="true">#</a> 9. Spring Cloud 和dubbo区别?</h2><ul><li>服务调用方式：dubbo是RPC springcloud Rest Api</li><li>注册中心：dubbo 是zookeeper springcloud是eureka，也可以是zookeeper</li><li>服务网关，dubbo本身没有实现，只能通过其他第三方技术整合，springcloud有Zuul路由<br> 网关，作为路由服务器，进行消费者的请求分发,springcloud支持断路器，与git完美集成配置文件<br> 支持版本控制，事物总线实现配置文件的更新与服务自动装配等等一系列的微服务架构要素。</li></ul><h2 id="eureka" tabindex="-1"><a class="header-anchor" href="#eureka" aria-hidden="true">#</a> Eureka</h2><h2 id="_10-服务注册和发现是什么意思-spring-cloud-如何实现" tabindex="-1"><a class="header-anchor" href="#_10-服务注册和发现是什么意思-spring-cloud-如何实现" aria-hidden="true">#</a> 10. 服务注册和发现是什么意思？Spring Cloud 如何实现？</h2><ul><li>当我们开始一个项目时，我们通常在属性文件中进行所有的配置。随着越来越多的服务开发和部<br> 署，添加和修改这些属性变得更加复杂。有些服务可能会下降，而某些位置可能会发生变化。手动<br> 更改属性可能会产生问题。 Eureka 服务注册和发现可以在这种情况下提供帮助。由于所有服务都<br> 在 Eureka 服务器上注册并通过调用 Eureka 服务器完成查找，因此无需处理服务地点的任何更改<br> 和处理。</li></ul><h2 id="_11-什么是eureka" tabindex="-1"><a class="header-anchor" href="#_11-什么是eureka" aria-hidden="true">#</a> 11. 什么是Eureka</h2><ul><li>Eureka作为SpringCloud的服务注册功能服务器，他是服务注册中心，系统中的其他服务使用<br> Eureka的客户端将其连接到Eureka Service中，并且保持心跳，这样工作人员可以通过Eureka<br> Service来监控各个微服务是否运行正常。</li></ul><h2 id="_12-eureka怎么实现高可用" tabindex="-1"><a class="header-anchor" href="#_12-eureka怎么实现高可用" aria-hidden="true">#</a> 12. Eureka怎么实现高可用</h2><ul><li>集群吧，注册多台Eureka，然后把SpringCloud服务互相注册，客户端从Eureka获取信息时，按<br> 照Eureka的顺序来访问。</li></ul><h2 id="_13-什么是eureka的自我保护模式" tabindex="-1"><a class="header-anchor" href="#_13-什么是eureka的自我保护模式" aria-hidden="true">#</a> 13. 什么是Eureka的自我保护模式，</h2><ul><li>默认情况下，如果Eureka Service在一定时间内没有接收到某个微服务的心跳，Eureka Service会<br> 进入自我保护模式，在该模式下Eureka Service会保护服务注册表中的信息，不在删除注册表中的<br> 数据，当网络故障恢复后，Eureka Servic 节点会自动退出自我保护模式</li></ul><h2 id="_14-discoveryclient的作用" tabindex="-1"><a class="header-anchor" href="#_14-discoveryclient的作用" aria-hidden="true">#</a> 14. DiscoveryClient的作用</h2><ul><li>可以从注册中心中根据服务别名获取注册的服务器信息。</li></ul><h2 id="_15-eureka和zookeeper都可以提供服务注册与发现的功能-请说说两个的区别" tabindex="-1"><a class="header-anchor" href="#_15-eureka和zookeeper都可以提供服务注册与发现的功能-请说说两个的区别" aria-hidden="true">#</a> 15. Eureka和ZooKeeper都可以提供服务注册与发现的功能,请说说两个的区别</h2><ol><li>ZooKeeper中的节点服务挂了就要选举 在选举期间注册服务瘫痪,虽然服务最终会恢复,但是选举期<br> 间不可用的， 选举就是改微服务做了集群，必须有一台主其他的都是从</li><li>Eureka各个节点是平等关系,服务器挂了没关系，只要有一台Eureka就可以保证服务可用，数据都<br> 是最新的。 如果查询到的数据并不是最新的，就是因为Eureka的自我保护模式导致的</li><li>Eureka本质上是一个工程,而ZooKeeper只是一个进程</li><li>Eureka可以很好的应对因网络故障导致部分节点失去联系的情况,而不会像ZooKeeper 一样使得整<br> 个注册系统瘫痪</li><li>ZooKeeper保证的是CP，Eureka保证的是AP<br> CAP： C：一致性&gt;Consistency; 取舍：(强一致性、单调一致性、会话一致性、最终一致性、弱一<br> 致性) A：可用性&gt;Availability; P：分区容错性&gt;Partition tolerance;</li></ol><h2 id="zuul" tabindex="-1"><a class="header-anchor" href="#zuul" aria-hidden="true">#</a> Zuul</h2><h2 id="_16-什么是网关" tabindex="-1"><a class="header-anchor" href="#_16-什么是网关" aria-hidden="true">#</a> 16. 什么是网关?</h2><ul><li>网关相当于一个网络服务架构的入口，所有网络请求必须通过网关转发到具体的服务。</li></ul><h2 id="_17-网关的作用是什么" tabindex="-1"><a class="header-anchor" href="#_17-网关的作用是什么" aria-hidden="true">#</a> 17. 网关的作用是什么</h2><ul><li>统一管理微服务请求，权限控制、负载均衡、路由转发、监控、安全控制黑名单和白名单等</li></ul><h2 id="_18-什么是spring-cloud-zuul-服务网关" tabindex="-1"><a class="header-anchor" href="#_18-什么是spring-cloud-zuul-服务网关" aria-hidden="true">#</a> 18. 什么是Spring Cloud Zuul（服务网关）</h2><ul><li>Zuul是对SpringCloud提供的成熟对的路由方案，他会根据请求的路径不同，网关会定位到指定的<br> 微服务，并代理请求到不同的微服务接口，他对外隐蔽了微服务的真正接口地址。 三个重要概<br> 念：动态路由表，路由定位，反向代理： <ul><li>动态路由表：Zuul支持Eureka路由，手动配置路由，这俩种都支持自动更新</li><li>路由定位：根据请求路径，Zuul有自己的一套定位服务规则以及路由表达式匹配</li><li>反向代理：客户端请求到路由网关，网关受理之后，在对目标发送请求，拿到响应之后在 给<br> 客户端</li></ul></li><li>它可以和Eureka,Ribbon,Hystrix等组件配合使用，</li><li>Zuul的应用场景： <ul><li>对外暴露，权限校验，服务聚合，日志审计等</li></ul></li></ul><h2 id="_19-网关与过滤器有什么区别" tabindex="-1"><a class="header-anchor" href="#_19-网关与过滤器有什么区别" aria-hidden="true">#</a> 19. 网关与过滤器有什么区别</h2><ul><li>网关是对所有服务的请求进行分析过滤，过滤器是对单个服务而言。</li></ul><h2 id="_20-常用网关框架有那些" tabindex="-1"><a class="header-anchor" href="#_20-常用网关框架有那些" aria-hidden="true">#</a> 20. 常用网关框架有那些？</h2><ul><li>Nginx、Zuul、Gateway</li></ul><h2 id="_21-zuul与nginx有什么区别" tabindex="-1"><a class="header-anchor" href="#_21-zuul与nginx有什么区别" aria-hidden="true">#</a> 21. Zuul与Nginx有什么区别？</h2><ul><li>Zuul是java语言实现的，主要为java服务提供网关服务，尤其在微服务架构中可以更加灵活的对网<br> 关进行操作。Nginx是使用C语言实现，性能高于Zuul，但是实现自定义操作需要熟悉lua语言，对<br> 程序员要求较高，可以使用Nginx做Zuul集群。</li></ul><h2 id="_22-既然nginx可以实现网关-为什么还需要使用zuul框架" tabindex="-1"><a class="header-anchor" href="#_22-既然nginx可以实现网关-为什么还需要使用zuul框架" aria-hidden="true">#</a> 22. 既然Nginx可以实现网关？为什么还需要使用Zuul框架</h2><ul><li>Zuul是SpringCloud集成的网关，使用Java语言编写，可以对SpringCloud架构提供更灵活的服<br> 务。</li></ul><h2 id="_23-如何设计一套api接口" tabindex="-1"><a class="header-anchor" href="#_23-如何设计一套api接口" aria-hidden="true">#</a> 23. 如何设计一套API接口</h2><ul><li>考虑到API接口的分类可以将API接口分为开发API接口和内网API接口，内网API接口用于局域网，<br> 为内部服务器提供服务。开放API接口用于对外部合作单位提供接口调用，需要遵循Oauth2.0权限<br> 认证协议。同时还需要考虑安全性、幂等性等问题。</li></ul><h2 id="_24-zuulfilter常用有那些方法" tabindex="-1"><a class="header-anchor" href="#_24-zuulfilter常用有那些方法" aria-hidden="true">#</a> 24. ZuulFilter常用有那些方法</h2><ul><li>Run()：过滤器的具体业务逻辑</li><li>shouldFilter()：判断过滤器是否有效</li><li>filterOrder()：过滤器执行顺序</li><li>filterType()：过滤器拦截位置</li></ul><h2 id="_25-如何实现动态zuul网关路由转发" tabindex="-1"><a class="header-anchor" href="#_25-如何实现动态zuul网关路由转发" aria-hidden="true">#</a> 25. 如何实现动态Zuul网关路由转发</h2><ul><li>通过path配置拦截请求，通过ServiceId到配置中心获取转发的服务列表，Zuul内部使用Ribbon实<br> 现本地负载均衡和转发。</li></ul><h2 id="_26-zuul网关如何搭建集群" tabindex="-1"><a class="header-anchor" href="#_26-zuul网关如何搭建集群" aria-hidden="true">#</a> 26. Zuul网关如何搭建集群</h2><ul><li>使用Nginx的upstream设置Zuul服务集群，通过location拦截请求并转发到upstream，默认使用<br> 轮询机制对Zuul集群发送请求。</li></ul><h2 id="ribbon" tabindex="-1"><a class="header-anchor" href="#ribbon" aria-hidden="true">#</a> Ribbon</h2><h2 id="_27-负载平衡的意义什么" tabindex="-1"><a class="header-anchor" href="#_27-负载平衡的意义什么" aria-hidden="true">#</a> 27. 负载平衡的意义什么？</h2><ul><li>简单来说： 先将集群，集群就是把一个的事情交给多个人去做，假如要做1000个产品给一个人做<br> 要10天，我叫10个人做就是一天，这就是集群，负载均衡的话就是用来控制集群，他把做的最多<br> 的人让他慢慢做休息会，把做的最少的人让他加量让他做多点。</li><li>在计算中，负载平衡可以改善跨计算机，计算机集群，网络链接，中央处理单元或磁盘驱动器等多<br> 种计算资源的工作负载分布。负载平衡旨在优化资源使用，最大化吞吐量，最小化响应时间并避免<br> 任何单一资源的过载。使用多个组件进行负载平衡而不是单个组件可能会通过冗余来提高可靠性和<br> 可用性。负载平衡通常涉及专用软件或硬件，例如多层交换机或域名系统服务器进程。</li></ul><h2 id="_28-ribbon是什么" tabindex="-1"><a class="header-anchor" href="#_28-ribbon是什么" aria-hidden="true">#</a> 28. Ribbon是什么？</h2><ul><li>Ribbon是Netflix发布的开源项目，主要功能是提供客户端的软件负载均衡算法</li><li>Ribbon客户端组件提供一系列完善的配置项，如连接超时，重试等。简单的说，就是在配置文件<br> 中列出后面所有的机器，Ribbon会自动的帮助你基于某种规则（如简单轮询，随即连接等）去连<br> 接这些机器。我们也很容易使用Ribbon实现自定义的负载均衡算法。（有点类似Nginx）</li></ul><h2 id="_29-nginx与ribbon的区别" tabindex="-1"><a class="header-anchor" href="#_29-nginx与ribbon的区别" aria-hidden="true">#</a> 29. Nginx与Ribbon的区别</h2><ul><li>Nginx是反向代理同时可以实现负载均衡，nginx拦截客户端请求采用负载均衡策略根据upstream<br> 配置进行转发，相当于请求通过nginx服务器进行转发。Ribbon是客户端负载均衡，从注册中心读<br> 取目标服务器信息，然后客户端采用轮询策略对服务直接访问，全程在客户端操作。</li></ul><h2 id="_30-ribbon底层实现原理" tabindex="-1"><a class="header-anchor" href="#_30-ribbon底层实现原理" aria-hidden="true">#</a> 30. Ribbon底层实现原理</h2><ul><li>Ribbon使用discoveryClient从注册中心读取目标服务信息，对同一接口请求进行计数，使用%取<br> 余算法获取目标服务集群索引，返回获取到的目标服务信息。<br> @LoadBalanced注解的作用<br> 开启客户端负载均衡。</li></ul><h2 id="hystrix" tabindex="-1"><a class="header-anchor" href="#hystrix" aria-hidden="true">#</a> Hystrix</h2><h2 id="_31-什么是断路器" tabindex="-1"><a class="header-anchor" href="#_31-什么是断路器" aria-hidden="true">#</a> 31. 什么是断路器</h2><ul><li>当一个服务调用另一个服务由于网络原因或自身原因出现问题，调用者就会等待被调用者的响应<br> 当更多的服务请求到这些资源导致更多的请求等待，发生连锁效应（雪崩效应）</li><li>断路器有三种状态 <ul><li>打开状态：一段时间内 达到一定的次数无法调用 并且多次监测没有恢复的迹象 断路器完全打开 那么下次请求就不会请求到该服务</li><li>半开状态：短时间内 有恢复迹象 断路器会将部分请求发给该服务，正常调用时 断路器关闭</li><li>关闭状态：当服务一直处于正常状态 能正常调用</li></ul></li></ul><h2 id="_32-什么是-hystrix" tabindex="-1"><a class="header-anchor" href="#_32-什么是-hystrix" aria-hidden="true">#</a> 32. 什么是 Hystrix？</h2><ul><li>在分布式系统，我们一定会依赖各种服务，那么这些个服务一定会出现失败的情况，就会导致雪<br> 崩，Hystrix就是这样的一个工具，防雪崩利器，它具有服务降级，服务熔断，服务隔离，监控等<br> 一些防止雪崩的技术。</li><li>Hystrix有四种防雪崩方式: <ul><li>服务降级：接口调用失败就调用本地的方法返回一个空</li><li>服务熔断：接口调用失败就会进入调用接口提前定义好的一个熔断的方法，返回错误信息</li><li>服务隔离：隔离服务之间相互影响</li><li>服务监控：在服务发生调用时,会将每秒请求数、成功请求数等运行指标记录下来。</li></ul></li></ul><h2 id="_33-谈谈服务雪崩效应" tabindex="-1"><a class="header-anchor" href="#_33-谈谈服务雪崩效应" aria-hidden="true">#</a> 33. 谈谈服务雪崩效应</h2><ul><li>雪崩效应是在大型互联网项目中，当某个服务发生宕机时，调用这个服务的其他服务也会发生宕<br> 机，大型项目的微服务之间的调用是互通的，这样就会将服务的不可用逐步扩大到各个其他服务<br> 中，从而使整个项目的服务宕机崩溃.发生雪崩效应的原因有以下几点</li><li>单个服务的代码存在bug. 2请求访问量激增导致服务发生崩溃(如大型商城的枪红包，秒杀功能). 3.<br> 服务器的硬件故障也会导致部分服务不可用.</li></ul><h2 id="_34-在微服务中-如何保护服务" tabindex="-1"><a class="header-anchor" href="#_34-在微服务中-如何保护服务" aria-hidden="true">#</a> 34. 在微服务中，如何保护服务?</h2><ul><li>一般使用使用Hystrix框架，实现服务隔离来避免出现服务的雪崩效应，从而达到保护服务的效<br> 果。当微服务中，高并发的数据库访问量导致服务线程阻塞，使单个服务宕机，服务的不可用会蔓<br> 延到其他服务，引起整体服务灾难性后果，使用服务降级能有效为不同的服务分配资源,一旦服务<br> 不可用则返回友好提示，不占用其他服务资源，从而避免单个服务崩溃引发整体服务的不可用.</li></ul><h2 id="_35-服务雪崩效应产生的原因" tabindex="-1"><a class="header-anchor" href="#_35-服务雪崩效应产生的原因" aria-hidden="true">#</a> 35. 服务雪崩效应产生的原因</h2><ul><li>因为Tomcat默认情况下只有一个线程池来维护客户端发送的所有的请求，这时候某一接口在某一<br> 时刻被大量访问就会占据tomcat线程池中的所有线程，其他请求处于等待状态，无法连接到服务<br> 接口。</li></ul><h2 id="_36-谈谈服务降级、熔断、服务隔离" tabindex="-1"><a class="header-anchor" href="#_36-谈谈服务降级、熔断、服务隔离" aria-hidden="true">#</a> 36. 谈谈服务降级、熔断、服务隔离</h2><ul><li>服务降级：当客户端请求服务器端的时候，防止客户端一直等待，不会处理业务逻辑代码，直接返<br> 回一个友好的提示给客户端。</li><li>服务熔断是在服务降级的基础上更直接的一种保护方式，当在一个统计时间范围内的请求失败数量<br> 达到设定值（requestVolumeThreshold）或当前的请求错误率达到设定的错误率阈值<br> （errorThresholdPercentage）时开启断路，之后的请求直接走fallback方法，在设定时间<br> （sleepWindowInMilliseconds）后尝试恢复。</li><li>服务隔离就是Hystrix为隔离的服务开启一个独立的线程池，这样在高并发的情况下不会影响其他<br> 服务。服务隔离有线程池和信号量两种实现方式，一般使用线程池方式。</li></ul><h2 id="_37-服务降级底层是如何实现的" tabindex="-1"><a class="header-anchor" href="#_37-服务降级底层是如何实现的" aria-hidden="true">#</a> 37. 服务降级底层是如何实现的？</h2><ul><li>Hystrix实现服务降级的功能是通过重写HystrixCommand中的getFallback()方法，当Hystrix的<br> run方法或construct执行发生错误时转而执行getFallback()方法。</li></ul><h2 id="feign" tabindex="-1"><a class="header-anchor" href="#feign" aria-hidden="true">#</a> Feign</h2><h2 id="_38-什么是feign" tabindex="-1"><a class="header-anchor" href="#_38-什么是feign" aria-hidden="true">#</a> 38. 什么是Feign？</h2><ul><li>Feign 是一个声明web服务客户端，这使得编写web服务客户端更容易</li><li>他将我们需要调用的服务方法定义成抽象方法保存在本地就可以了，不需要自己构建Http请求<br> 了，直接调用接口就行了，不过要注意，调用方法要和本地抽象方法的签名完全一致。</li></ul><h2 id="_39-springcloud有几种调用接口方式" tabindex="-1"><a class="header-anchor" href="#_39-springcloud有几种调用接口方式" aria-hidden="true">#</a> 39. SpringCloud有几种调用接口方式</h2><ul><li>Feign</li><li>RestTemplate</li></ul><h2 id="_40-ribbon和feign调用服务的区别" tabindex="-1"><a class="header-anchor" href="#_40-ribbon和feign调用服务的区别" aria-hidden="true">#</a> 40. Ribbon和Feign调用服务的区别</h2><ul><li>调用方式同：Ribbon需要我们自己构建Http请求，模拟Http请求然后通过RestTemplate发给其他<br> 服务，步骤相当繁琐</li><li>而Feign则是在Ribbon的基础上进行了一次改进，采用接口的形式，将我们需要调用的服务方法定<br> 义成抽象方法保存在本地就可以了，不需要自己构建Http请求了，直接调用接口就行了，不过要<br> 注意，调用方法要和本地抽象方法的签名完全一致。</li></ul><h2 id="bus" tabindex="-1"><a class="header-anchor" href="#bus" aria-hidden="true">#</a> Bus</h2><h2 id="_41-什么是-spring-cloud-bus" tabindex="-1"><a class="header-anchor" href="#_41-什么是-spring-cloud-bus" aria-hidden="true">#</a> 41. 什么是 Spring Cloud Bus？</h2><ul><li>Spring Cloud Bus就像一个分布式执行器，用于扩展的Spring Boot应用程序的配置文件，但也可<br> 以用作应用程序之间的通信通道。</li><li>Spring Cloud Bus 不能单独完成通信，需要配合MQ支持</li><li>Spring Cloud Bus一般是配合Spring Cloud Config做配置中心的</li><li>Springcloud config实时刷新也必须采用SpringCloud Bus消息总线</li></ul><h2 id="config" tabindex="-1"><a class="header-anchor" href="#config" aria-hidden="true">#</a> Config</h2><h2 id="_42-什么是spring-cloud-config" tabindex="-1"><a class="header-anchor" href="#_42-什么是spring-cloud-config" aria-hidden="true">#</a> 42. 什么是Spring Cloud Config?</h2><ul><li>Spring Cloud Config为分布式系统中的外部配置提供服务器和客户端支持，可以方便的对微服务<br> 各个环境下的配置进行集中式管理。Spring Cloud Config分为Config Server和Config Client两部<br> 分。Config Server负责读取配置文件，并且暴露Http API接口，Config Client通过调用Config<br> Server的接口来读取配置文件。</li></ul><h2 id="_43-分布式配置中心有那些框架" tabindex="-1"><a class="header-anchor" href="#_43-分布式配置中心有那些框架" aria-hidden="true">#</a> 43. 分布式配置中心有那些框架？</h2><ul><li>Apollo、zookeeper、springcloud config。</li></ul><h2 id="_44-分布式配置中心的作用" tabindex="-1"><a class="header-anchor" href="#_44-分布式配置中心的作用" aria-hidden="true">#</a> 44. 分布式配置中心的作用？</h2><ul><li>动态变更项目配置信息而不必重新部署项目。</li></ul><h2 id="_45-springcloud-config-可以实现实时刷新吗" tabindex="-1"><a class="header-anchor" href="#_45-springcloud-config-可以实现实时刷新吗" aria-hidden="true">#</a> 45. SpringCloud Config 可以实现实时刷新吗？</h2><ul><li>springcloud config实时刷新采用SpringCloud Bus消息总线。</li></ul><h2 id="gateway" tabindex="-1"><a class="header-anchor" href="#gateway" aria-hidden="true">#</a> Gateway</h2><h2 id="_46-什么是spring-cloud-gateway" tabindex="-1"><a class="header-anchor" href="#_46-什么是spring-cloud-gateway" aria-hidden="true">#</a> 46. 什么是Spring Cloud Gateway?</h2><ul><li>Spring Cloud Gateway是Spring Cloud官方推出的第二代网关框架，取代Zuul网关。网关作为流<br> 量的，在微服务系统中有着非常作用，网关常见的功能有路由转发、权限校验、限流控制等作用。</li><li>使用了一个RouteLocatorBuilder的bean去创建路由，除了创建路由RouteLocatorBuilder可以让<br> 你添加各种predicates和filters，predicates断言的意思，顾名思义就是根据具体的请求的规则，<br> 由具体的route去处理，filters是各种过滤器，用来对请求做各种判断和修改。</li></ul><h2 id="_47-springcloud主要项目" tabindex="-1"><a class="header-anchor" href="#_47-springcloud主要项目" aria-hidden="true">#</a> 47. SpringCloud主要项目</h2><ul><li>Spring Cloud的子项目，大致可分成两类，一类是对现有成熟框架&quot;Spring Boot化&quot;的封装和抽<br> 象，也是数量最多的项目；第二类是开发了一部分分布式系统的基础设施的实现，如Spring Cloud<br> Stream扮演的就是kafka, ActiveMQ这样的角色。</li></ul><p><strong>Spring Cloud Config</strong></p><ul><li>Config能够管理所有微服务的配置文件</li><li>集中配置管理工具，分布式系统中统一的外部配置管理，默认使用Git来存储配置，可以支持客户<br> 端配置的刷新及加密、解密操作。</li></ul><p><strong>Spring Cloud Netflix(重点，这些组件用的最多)</strong></p><ul><li>Netflix OSS 开源组件集成，包括Eureka、Hystrix、Ribbon、Feign、Zuul等核心组件。 <ul><li>Eureka：服务治理组件，包括服务端的注册中心和客户端的服务发现机制；</li><li>Ribbon：负载均衡的服务调用组件，具有多种负载均衡调用策略；</li><li>Hystrix：服务容错组件，实现了断路器模式，为依赖服务的出错和延迟提供了容错能力；</li><li>Feign：基于Ribbon和Hystrix的声明式服务调用组件；</li><li>Zuul：API网关组件，对请求提供路由及过滤功能。</li></ul></li></ul><p>我觉得SpringCloud的福音是Netflix，他把人家的组件都搬来进行封装了，使开发者能快速简单安全的使用</p><p><strong>Spring Cloud Bus</strong></p><ul><li>用于传播集群状态变化的消息总线，使用轻量级消息代理链接分布式系统中的节点，可以用来动态<br> 刷新集群中的服务配置信息。</li><li>简单来说就是修改了配置文件，发送一次请求，所有客户端便会重新读取配置文件。<br> 需要利用中间插件MQ</li></ul><p><strong>Spring Cloud Consul</strong></p><ul><li>Consul 是 HashiCorp 公司推出的开源工具，用于实现分布式系统的服务发现与配置。与其它分布<br> 式服务注册与发现的方案，Consul 的方案更“一站式”，内置了服务注册与发现框架、分布一致性<br> 协议实现、健康检查、Key/Value 存储、多数据中心方案，不再需要依赖其它工具（比如<br> ZooKeeper 等）。使用起来也较为简单。Consul 使用 Go 语言编写，因此具有天然可移植性(支持<br> Linux、windows和Mac OS X)；安装包仅包含一个可执行文件，方便部署，与 Docker 等轻量级<br> 容器可无缝配合。</li></ul><p><strong>Spring Cloud Security</strong></p><ul><li>安全工具包，他可以对 <ul><li>对Zuul代理中的负载均衡从前端到后端服务中获取SSO令牌</li><li>资源服务器之间的中继令牌</li><li>使Feign客户端表现得像 OAuth2RestTemplate （获取令牌等）的拦截器</li><li>在Zuul代理中配置下游身份验证</li></ul></li><li>Spring Cloud Security提供了一组原语，用于构建安全的应用程序和服务，而且操作简便。可以在<br> 外部（或集中）进行大量配置的声明性模型有助于实现大型协作的远程组件系统，通常具有中央身<br> 份管理服务。它也非常易于在Cloud Foundry等服务平台中使用。在Spring Boot和Spring<br> Security OAuth2的基础上，可以快速创建实现常见模式的系统，如单点登录，令牌中继和令牌交<br> 换。</li></ul><p><strong>Spring Cloud Sleuth</strong></p><ul><li>在微服务中，通常根据业务模块分服务，项目中前端发起一个请求，后端可能跨几个服务调用才能<br> 完成这个请求（如下图）。如果系统越来越庞大，服务之间的调用与被调用关系就会变得很复杂，<br> 假如一个请求中需要跨几个服务调用，其中一个服务由于网络延迟等原因挂掉了，那么这时候我们<br> 需要分析具体哪一个服务出问题了就会显得很困难。Spring Cloud Sleuth服务链路跟踪功能就可<br> 以帮助我们快速的发现错误根源以及监控分析每条请求链路上的性能等等。<br><img src="https://img-blog.csdnimg.cn/9609121e28d247838964eea0ed4441f8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bC85Y-k5ouJ5pav54uX6JuL5YS_,size_16,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" loading="lazy"></li></ul><p><strong>Spring Cloud Stream</strong></p><ul><li>轻量级事件驱动微服务框架，可以使用简单的声明式模型来发送及接收消息，主要实现为Apache<br> Kafka及RabbitMQ。</li></ul><p><strong>Spring Cloud Task</strong></p><ul><li>Spring Cloud Task的目标是为Spring Boot应用程序提供创建短运行期微服务的功能。在Spring<br> Cloud Task中，我们可以灵活地动态运行任何任务，按需分配资源并在任务完成后检索结果。<br> Tasks是Spring Cloud Data Flow中的一个基础项目，允许用户将几乎任何Spring Boot应用程序作<br> 为一个短期任务执行。</li></ul><p><strong>Spring Cloud Zookeeper</strong></p><ul><li>SpringCloud支持三种注册方式Eureka， Consul(go语言编写)，zookeeper</li><li>Spring Cloud Zookeeper是基于Apache Zookeeper的服务治理组件。</li></ul><p><strong>Spring Cloud Gateway</strong></p><ul><li>Spring cloud gateway是spring官方基于Spring 5.0、Spring Boot2.0和Project Reactor等技术开<br> 发的网关，Spring Cloud Gateway旨在为微服务架构提供简单、有效和统一的API路由管理方式，<br> Spring Cloud Gateway作为Spring Cloud生态系统中的网关，目标是替代Netflix Zuul，其不仅提<br> 供统一的路由方式，并且还基于Filer链的方式提供了网关基本的功能，例如：安全、监控/埋点、<br> 限流等。</li></ul><p><strong>Spring Cloud OpenFeign</strong></p><ul><li>Feign是一个声明性的Web服务客户端。它使编写Web服务客户端变得更容易。要使用Feign，我<br> 们可以将调用的服务方法定义成抽象方法保存在本地添加一点点注解就可以了，不需要自己构建<br> Http请求了，直接调用接口就行了，不过要注意，调用方法要和本地抽象方法的签名完全一致。</li></ul><p><strong>Spring Cloud的版本关系</strong></p><ul><li>Spring Cloud是一个由许多子项目组成的综合项目，各子项目有不同的发布节奏。 为了管理<br> Spring Cloud与各子项目的版本依赖关系，发布了一个清单，其中包括了某个Spring Cloud版本对<br> 应的子项目版本。 为了避免Spring Cloud版本号与子项目版本号混淆，Spring Cloud版本采用了<br> 名称而非版本号的命名，这些版本的名字采用了伦敦地铁站的名字，根据字母表的顺序来对应版本<br> 时间顺序，例如Angel是第一个版本，Brixton是第二个版本。 当Spring Cloud的发布内容积累到<br> 临界点或者一个重大BUG被解决后，会发布一个&quot;service releases&quot;版本，简称SRX版本，比如<br> Greenwich.SR2就是Spring Cloud发布的Greenwich版本的第2个SRX版本。目前Spring Cloud的<br> 最新版本是Hoxton。</li></ul><h2 id="_48-spring-cloud和springboot版本对应关系" tabindex="-1"><a class="header-anchor" href="#_48-spring-cloud和springboot版本对应关系" aria-hidden="true">#</a> 48. Spring Cloud和SpringBoot版本对应关系</h2><table><thead><tr><th>Spring Cloud Version</th><th>SpringBoot Version</th></tr></thead><tbody><tr><td>Hoxton</td><td>2.2.x</td></tr><tr><td>Greenwich</td><td>2.1.x</td></tr><tr><td>Finchley</td><td>2.0.x</td></tr><tr><td>Edgware</td><td>1.5.x</td></tr><tr><td>Dalston</td><td>1.5.x</td></tr></tbody></table><h2 id="_49-spring-cloud和各子项目版本对应关系" tabindex="-1"><a class="header-anchor" href="#_49-spring-cloud和各子项目版本对应关系" aria-hidden="true">#</a> 49. Spring Cloud和各子项目版本对应关系</h2><ul><li>Edgware.SR6：我理解为最低版本号</li><li>Greenwich.SR2 :我理解为最高版本号</li><li>Greenwich.BUILD-SNAPSHOT（快照）：是一种特殊的版本，指定了某个当前的开发进度的副<br> 本。不同于常规的版本，几乎每天都要提交更新的版本，如果每次提交都申明一个版本号那不是版<br> 本号都不够用？</li></ul><table><thead><tr><th>Component</th><th>Edgware.SR6</th><th>Greenwich.SR2</th><th>Greenwich.BUILD-SNAPSHOT</th></tr></thead><tbody><tr><td>spring-cloud-aws</td><td>1.2.4.RELEASE</td><td>2.1.2.RELEASE</td><td>2.1.3.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-bus</td><td>1.3.4.RELEASE</td><td>2.1.2.RELEASE</td><td>2.1.3.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-cli</td><td>1.4.1.RELEASE</td><td>2.0.0.RELEASE</td><td>2.0.1.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-commons</td><td>1.3.6.RELEASE</td><td>2.1.2.RELEASE</td><td>2.1.3.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-contract</td><td>1.2.7.RELEASE</td><td>2.1.2.RELEASE</td><td>2.1.3.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-config</td><td>1.4.7.RELEASE</td><td>2.1.3.RELEASE</td><td>2.1.4.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-netflix</td><td>1.4.7.RELEASE</td><td>2.1.2.RELEASE</td><td>2.1.3.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-security</td><td>1.2.4.RELEASE</td><td>2.1.3.RELEASE</td><td>2.1.4.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-cloudfoundry</td><td>1.1.3.RELEASE</td><td>2.1.2.RELEASE</td><td>2.1.3.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-consul</td><td>1.3.6.RELEASE</td><td>2.1.2.RELEASE</td><td>2.1.3.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-sleuth</td><td>1.3.6.RELEASE</td><td>2.1.1.RELEASE</td><td>2.1.2.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-stream</td><td>Ditmars.SR5</td><td>Fishtown.SR3</td><td>Fishtown.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-zookeeper</td><td>1.2.3.RELEASE</td><td>2.1.2.RELEASE</td><td>2.1.3.BUILD-SNAPSHOT</td></tr><tr><td>spring-boot</td><td>1.5.21.RELEASE</td><td>2.1.5.RELEASE</td><td>2.1.8.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-task</td><td>1.2.4.RELEASE</td><td>2.1.2.RELEASE</td><td>2.1.3.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-vault</td><td>1.1.3.RELEASE</td><td>2.1.2.RELEASE</td><td>2.1.3.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-gateway</td><td>1.0.3.RELEASE</td><td>2.1.2.RELEASE</td><td>2.1.3.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-openfeign</td><td>2.1.2.RELEASE</td><td>2.1.3.BUILD-SNAPSHOT</td><td></td></tr><tr><td>Component</td><td>Edgware.SR6</td><td>Greenwich.SR2</td><td>Greenwich.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-function</td><td>1.0.2.RELEASE</td><td>2.0.2.RELEASE</td><td>2.0.3.BUILD-SNAPSHOT</td></tr></tbody></table><hr><p><strong>史上最全Java面试宝典，BAT大厂面试必备。整理不易，建议先关注点赞加收藏</strong></p>',141),b=l("thead",null,[l("tr",null,[l("th",null,"序号"),l("th",null,"名称"),l("th",null,"地址")])],-1),p=l("td",null,"1",-1),S=l("td",null,"Java基础面试题（91道含答案）",-1),f={href:"https://blog.csdn.net/qq_30999361/article/details/124482581",target:"_blank",rel:"noopener noreferrer"},C=l("td",null,"2",-1),E=l("td",null,"Java并发编程面试题 （123道含答案）",-1),x={href:"https://blog.csdn.net/qq_30999361/article/details/124545403",target:"_blank",rel:"noopener noreferrer"},k=l("td",null,"3",-1),R=l("td",null,"Java异常面试题 （33道含答案）",-1),A={href:"https://blog.csdn.net/qq_30999361/article/details/124560006",target:"_blank",rel:"noopener noreferrer"},B=l("td",null,"4",-1),y=l("td",null,"Java虚拟机（JVM）面试题（51道含答案）",-1),L={href:"https://blog.csdn.net/qq_30999361/article/details/124532763",target:"_blank",rel:"noopener noreferrer"},q=l("td",null,"5",-1),Z=l("td",null,"Java集合面试题（52道含答案）",-1),H={href:"https://blog.csdn.net/qq_30999361/article/details/124503952",target:"_blank",rel:"noopener noreferrer"},N=l("td",null,"6",-1),P=l("td",null,"Linux面试题（50道含答案）",-1),m={href:"https://blog.csdn.net/qq_30999361/article/details/124575798",target:"_blank",rel:"noopener noreferrer"},w=l("td",null,"7",-1),I=l("td",null,"Memcache面试题（23道含答案）",-1),v={href:"https://blog.csdn.net/qq_30999361/article/details/124596870",target:"_blank",rel:"noopener noreferrer"},F=l("td",null,"8",-1),T=l("td",null,"Mybatiss面试题 （37道含答案）",-1),O={href:"https://blog.csdn.net/qq_30999361/article/details/124560907",target:"_blank",rel:"noopener noreferrer"},D=l("td",null,"9",-1),z=l("td",null,"MySQL面试题（40道含答案）",-1),G={href:"https://blog.csdn.net/qq_30999361/article/details/124506169",target:"_blank",rel:"noopener noreferrer"},U=l("td",null,"10",-1),M=l("td",null,"Netty面试题（49道含答案）",-1),V={href:"https://blog.csdn.net/qq_30999361/article/details/124617122",target:"_blank",rel:"noopener noreferrer"},J=l("td",null,"11",-1),K=l("td",null,"Nginx面试题（23道含答案）",-1),Q={href:"https://blog.csdn.net/qq_30999361/article/details/124597174",target:"_blank",rel:"noopener noreferrer"},j=l("td",null,"12",-1),X=l("td",null,"RabbitMQ面试题（22道含答案）",-1),W={href:"https://blog.csdn.net/qq_30999361/article/details/124533998",target:"_blank",rel:"noopener noreferrer"},Y=l("td",null,"13",-1),$=l("td",null,"Redis面试题（70道含答案）",-1),ll={href:"https://blog.csdn.net/qq_30999361/article/details/124459566",target:"_blank",rel:"noopener noreferrer"},rl=l("td",null,"14",-1),il=l("td",null,"SpringBoot面试题（44道含答案）",-1),el={href:"https://blog.csdn.net/qq_30999361/article/details/124461725",target:"_blank",rel:"noopener noreferrer"},tl=l("td",null,"15",-1),nl=l("td",null,"SpringCloud面试题（49道含答案）",-1),dl={href:"https://blog.csdn.net/qq_30999361/article/details/124430712",target:"_blank",rel:"noopener noreferrer"},al=l("td",null,"16",-1),ol=l("td",null,"SpringMVC面试题（29道含答案）",-1),ul={href:"https://blog.csdn.net/qq_30999361/article/details/124519135",target:"_blank",rel:"noopener noreferrer"},hl=l("td",null,"17",-1),sl=l("td",null,"Spring面试题（75道含答案）",-1),_l={href:"https://blog.csdn.net/qq_30999361/article/details/124519472",target:"_blank",rel:"noopener noreferrer"},cl=l("td",null,"18",-1),gl=l("td",null,"TCP、UDP、Socket、Http网络编程面试题（47道含答案）",-1),bl={href:"https://blog.csdn.net/qq_30999361/article/details/124617792",target:"_blank",rel:"noopener noreferrer"},pl=l("td",null,"19",-1),Sl=l("td",null,"Tomcat面试题（15道含答案）",-1),fl={href:"https://blog.csdn.net/qq_30999361/article/details/124576964",target:"_blank",rel:"noopener noreferrer"},Cl=l("td",null,"20",-1),El=l("td",null,"Zookeeper面试题（28道含答案）",-1),xl={href:"https://blog.csdn.net/qq_30999361/article/details/124596208",target:"_blank",rel:"noopener noreferrer"},kl=l("td",null,"21",-1),Rl=l("td",null,"多线程面试题（60道含答案）",-1),Al={href:"https://blog.csdn.net/qq_30999361/article/details/124596462",target:"_blank",rel:"noopener noreferrer"},Bl=l("td",null,"22",-1),yl=l("td",null,"设计模式面试题（14道含答案）",-1),Ll={href:"https://blog.csdn.net/qq_30999361/article/details/124637874",target:"_blank",rel:"noopener noreferrer"},ql=l("td",null,"23",-1),Zl=l("td",null,"BIO、NIO、AIO、Netty面试题（35道含答案）",-1),Hl={href:"https://blog.csdn.net/qq_30999361/article/details/124653616",target:"_blank",rel:"noopener noreferrer"},Nl=l("td",null,"24",-1),Pl=l("td",null,"Dubbo面试题（47道含答案）",-1),ml={href:"https://blog.csdn.net/qq_30999361/article/details/124637288",target:"_blank",rel:"noopener noreferrer"},wl=l("td",null,"25",-1),Il=l("td",null,"ElasticSearch面试题（31道含答案）",-1),vl={href:"https://blog.csdn.net/qq_30999361/article/details/124619240",target:"_blank",rel:"noopener noreferrer"},Fl=l("td",null,"26",-1),Tl=l("td",null,"Git常用命令（63条）",-1),Ol={href:"https://blog.csdn.net/qq_30999361/article/details/124438420",target:"_blank",rel:"noopener noreferrer"};function Dl(zl,Gl){const i=n("ExternalLinkIcon");return d(),a("div",null,[h,s,_,l("p",null,[r("版权声明：本文为博主原创文章，遵循 "),l("a",c,[r("CC 4.0 BY-SA"),e(i)]),r(" 版权协议，转载请附上原文出处链接和本声明。")]),g,l("table",null,[b,l("tbody",null,[l("tr",null,[p,S,l("td",null,[l("a",f,[r("（点击查看）"),e(i)])])]),l("tr",null,[C,E,l("td",null,[l("a",x,[r("（点击查看）"),e(i)])])]),l("tr",null,[k,R,l("td",null,[l("a",A,[r("（点击查看）"),e(i)])])]),l("tr",null,[B,y,l("td",null,[l("a",L,[r("（点击查看）"),e(i)])])]),l("tr",null,[q,Z,l("td",null,[l("a",H,[r("（点击查看）"),e(i)])])]),l("tr",null,[N,P,l("td",null,[l("a",m,[r("（点击查看）"),e(i)])])]),l("tr",null,[w,I,l("td",null,[l("a",v,[r("（点击查看）"),e(i)])])]),l("tr",null,[F,T,l("td",null,[l("a",O,[r("（点击查看）"),e(i)])])]),l("tr",null,[D,z,l("td",null,[l("a",G,[r("（点击查看）"),e(i)])])]),l("tr",null,[U,M,l("td",null,[l("a",V,[r("（点击查看）"),e(i)])])]),l("tr",null,[J,K,l("td",null,[l("a",Q,[r("（点击查看）"),e(i)])])]),l("tr",null,[j,X,l("td",null,[l("a",W,[r("（点击查看）"),e(i)])])]),l("tr",null,[Y,$,l("td",null,[l("a",ll,[r("（点击查看）"),e(i)])])]),l("tr",null,[rl,il,l("td",null,[l("a",el,[r("（点击查看）"),e(i)])])]),l("tr",null,[tl,nl,l("td",null,[l("a",dl,[r("（点击查看）"),e(i)])])]),l("tr",null,[al,ol,l("td",null,[l("a",ul,[r("（点击查看）"),e(i)])])]),l("tr",null,[hl,sl,l("td",null,[l("a",_l,[r("（点击查看）"),e(i)])])]),l("tr",null,[cl,gl,l("td",null,[l("a",bl,[r("（点击查看）"),e(i)])])]),l("tr",null,[pl,Sl,l("td",null,[l("a",fl,[r("（点击查看）"),e(i)])])]),l("tr",null,[Cl,El,l("td",null,[l("a",xl,[r("（点击查看）"),e(i)])])]),l("tr",null,[kl,Rl,l("td",null,[l("a",Al,[r("（点击查看）"),e(i)])])]),l("tr",null,[Bl,yl,l("td",null,[l("a",Ll,[r("（点击查看）"),e(i)])])]),l("tr",null,[ql,Zl,l("td",null,[l("a",Hl,[r("（点击查看）"),e(i)])])]),l("tr",null,[Nl,Pl,l("td",null,[l("a",ml,[r("（点击查看）"),e(i)])])]),l("tr",null,[wl,Il,l("td",null,[l("a",vl,[r("（点击查看）"),e(i)])])]),l("tr",null,[Fl,Tl,l("td",null,[l("a",Ol,[r("（点击查看）"),e(i)])])])])])])}const Ml=t(u,[["render",Dl],["__file","SpringCloud面试题（49道含答案）.html.vue"]]);export{Ml as default};
