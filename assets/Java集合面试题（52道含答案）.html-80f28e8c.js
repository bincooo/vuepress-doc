import{_ as e,E as l,Z as p,$ as o,a0 as a,a3 as s,a1 as t,a4 as i}from"./framework-e0d053a9.js";const c={},r=i(`<h3 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h3><ul><li><a href="#_2">一、集合容器概述</a></li><li><ul><li><a href="#1__3">1. 什么是集合</a></li><li><a href="#2__8">2. 集合的特点</a></li><li><a href="#3__13">3. 集合和数组的区别</a></li><li><a href="#4__18">4. 使用集合框架的好处</a></li><li><a href="#5__24">5. 常用的集合类有哪些？</a></li><li><a href="#6_ListSetMap_31">6. List，Set，Map三者的区别？</a></li><li><a href="#7__45">7. 集合框架底层数据结构</a></li><li><a href="#8__67">8. 哪些集合类是线程安全的？</a></li><li><a href="#9_Java_failfast_73">9. Java集合的快速失败机制 “fail-fast”？</a></li><li><a href="#10__87">10. 怎么确保一个集合不能被修改？</a></li></ul></li><li><a href="#Collection_101">二、Collection接口</a></li><li><ul><li><a href="#List_102">List接口</a></li><li><ul><li><a href="#11__Iterator__103">11. 迭代器 Iterator 是什么？</a></li><li><a href="#12_Iterator__114">12. Iterator 怎么使用？有什么特点？</a></li><li><a href="#13__Collection__127">13. 如何边遍历边移除 Collection 中的元素？</a></li><li><a href="#14_Iterator__ListIterator__146">14. Iterator 和 ListIterator 有什么区别？</a></li><li><a href="#15__List_Java__List_152">15. 遍历一个 List 有哪些不同的方式？每种方法的实现原理是什么？Java 中 List遍历的最佳实践是什么？</a></li><li><a href="#16__ArrayList__164">16. 说一下 ArrayList 的优缺点</a></li><li><a href="#17__List__174">17. 如何实现数组和 List 之间的转换？</a></li><li><a href="#18_ArrayList__LinkedList__190">18. ArrayList 和 LinkedList 的区别是什么？</a></li><li><a href="#19_ArrayList__Vector__199">19. ArrayList 和 Vector 的区别是什么？</a></li><li><a href="#20_ArrayListLinkedListVector_207">20. 插入数据时，ArrayList、LinkedList、Vector谁速度较快？阐述</a></li><li><a href="#21__ArrayList_213">21. 多线程场景下如何使用 ArrayList？</a></li><li><a href="#22__ArrayList__elementData__transient__224">22. 为什么 ArrayList 的 elementData 加上 transient 修饰？</a></li><li><a href="#23_List__Set__250">23. List 和 Set 的区别</a></li></ul></li><li><a href="#Set_259">Set接口</a></li><li><ul><li><a href="#24__HashSet__260">24. 说一下 HashSet 的实现原理？</a></li><li><a href="#25_HashSetHashSet_263">25. HashSet如何检查重复？HashSet是如何保证数据不可重复的？</a></li><li><a href="#26_HashSetHashMap_292">26. HashSet与HashMap的区别</a></li></ul></li></ul></li><li><a href="#Map_303">三、Map接口</a></li><li><ul><li><a href="#27_Hash_304">27. 什么是Hash算法</a></li><li><a href="#28__307">28. 什么是链表</a></li><li><a href="#29_HashMap_322">29. 说一下HashMap的实现原理？</a></li><li><a href="#30_HashMapJDK17JDK18HashMap_335">30. HashMap在JDK1.7和JDK1.8中有哪些不同？HashMap的底层实现</a></li><li><a href="#31__362">31. 什么是红黑树</a></li><li><a href="#32_HashMapput_382">32. HashMap的put方法的具体流程？</a></li><li><a href="#33_HashMap_510">33. HashMap的扩容操作是怎么实现的？</a></li><li><a href="#34_HashMap_522">34. HashMap是怎么解决哈希冲突的？</a></li><li><a href="#35__Map__key_568">35. 能否使用任何类作为 Map 的 key？</a></li><li><a href="#36_HashMapStringIntegerK_575">36. 为什么HashMap中String、Integer这样的包装类适合作为K？</a></li><li><a href="#37_ObjectHashMapKey_581">37. 如果使用Object作为HashMap的Key，应该怎么办呢？</a></li><li><a href="#38_HashMaphashCodetable_586">38. HashMap为什么不直接使用hashCode()处理后的哈希值直接作为table的下标？</a></li><li><a href="#39_HashMap_2_595">39. HashMap 的长度为什么是2的幂次方</a></li><li><a href="#40_HashMap__HashTable__607">40. HashMap 与 HashTable 有什么区别？</a></li><li><a href="#41_TreeMap__626">41. 什么是TreeMap 简介</a></li><li><a href="#42__HashMap__TreeMap_632">42. 如何决定使用 HashMap 还是 TreeMap？</a></li><li><a href="#43_HashMap__ConcurrentHashMap__637">43. HashMap 和 ConcurrentHashMap 的区别</a></li><li><a href="#44_ConcurrentHashMap__Hashtable__644">44. ConcurrentHashMap 和 Hashtable 的区别？</a></li><li><a href="#45_ConcurrentHashMap__664">45. ConcurrentHashMap 底层具体实现知道吗？实现原理是什么？</a></li></ul></li><li><a href="#_722">四、辅助工具类</a></li><li><ul><li><a href="#46_Array__ArrayList__723">46. Array 和 ArrayList 有何区别？</a></li><li><a href="#47__Array__List__729">47. 如何实现 Array 和 List 之间的转换？</a></li><li><a href="#48_comparable__comparator_733">48. comparable 和 comparator的区别？</a></li><li><a href="#49_Collection__Collections__738">49. Collection 和 Collections 有什么区别？</a></li><li><a href="#50_TreeMap__TreeSet_Collections__sort_745">50. TreeMap 和 TreeSet 在排序时如何比较元素？Collections 工具类中的 sort()方法如何比较元素？</a></li><li><a href="#51_Collection__Collections__755">51. Collection 和 Collections 有什么区别？</a></li><li><a href="#52_TreeMap__TreeSet_Collections__sort_762">52. TreeMap 和 TreeSet 在排序时如何比较元素？Collections 工具类中的 sort()方法如何比较元素？</a></li></ul></li></ul><h2 id="一、集合容器概述" tabindex="-1"><a class="header-anchor" href="#一、集合容器概述" aria-hidden="true">#</a> 一、集合容器概述</h2><h2 id="_1-什么是集合" tabindex="-1"><a class="header-anchor" href="#_1-什么是集合" aria-hidden="true">#</a> 1. 什么是集合</h2><ul><li>集合就是一个放数据的容器，准确的说是放数据对象引用的容器</li><li>集合类存放的都是对象的引用，而不是对象的本身</li><li>集合类型主要有3种：set(集）、list(列表）和map(映射)。</li></ul><h2 id="_2-集合的特点" tabindex="-1"><a class="header-anchor" href="#_2-集合的特点" aria-hidden="true">#</a> 2. 集合的特点</h2><ul><li>集合的特点主要有如下两点： <ul><li>集合用于存储对象的容器，对象是用来封装数据，对象多了也需要存储集中式管理。</li><li>和数组对比对象的大小不确定。因为集合是可变长度的。数组需要提前定义大小</li></ul></li></ul><h2 id="_3-集合和数组的区别" tabindex="-1"><a class="header-anchor" href="#_3-集合和数组的区别" aria-hidden="true">#</a> 3. 集合和数组的区别</h2><ul><li>数组是固定长度的；集合可变长度的。</li><li>数组可以存储基本数据类型，也可以存储引用数据类型；集合只能存储引用数据类型。</li><li>数组存储的元素必须是同一个数据类型；集合存储的对象可以是不同数据类型。</li></ul><h2 id="_4-使用集合框架的好处" tabindex="-1"><a class="header-anchor" href="#_4-使用集合框架的好处" aria-hidden="true">#</a> 4. 使用集合框架的好处</h2><ol><li>容量自增长；</li><li>提供了高性能的数据结构和算法，使编码更轻松，提高了程序速度和质量；</li><li>可以方便地扩展或改写集合，提高代码复用性和可操作性。</li><li>通过使用JDK自带的集合类，可以降低代码维护和学习新API成本。</li></ol><h2 id="_5-常用的集合类有哪些" tabindex="-1"><a class="header-anchor" href="#_5-常用的集合类有哪些" aria-hidden="true">#</a> 5. 常用的集合类有哪些？</h2><ul><li>Map接口和Collection接口是所有集合框架的父接口： <ol><li>Collection接口的子接口包括：Set接口和List接口</li><li>Map接口的实现类主要有：HashMap、TreeMap、Hashtable、ConcurrentHashMap以及Properties等</li><li>Set接口的实现类主要有：HashSet、TreeSet、LinkedHashSet等</li><li>List接口的实现类主要有：ArrayList、LinkedList、Stack以及Vector等</li></ol></li></ul><h2 id="_6-list-set-map三者的区别" tabindex="-1"><a class="header-anchor" href="#_6-list-set-map三者的区别" aria-hidden="true">#</a> 6. List，Set，Map三者的区别？</h2><figure><img src="https://img-blog.csdnimg.cn/e067f0ce6f4f4180abe7e2616012c260.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><ul><li>Java 容器分为 Collection 和 Map 两大类，Collection集合的子接口有Set、List、Queue三种子接<br> 口。我们比较常用的是Set、List，Map接口不是collection的子接口。</li><li>Collection集合主要有List和Set两大接口 <ul><li>List：一个有序（元素存入集合的顺序和取出的顺序一致）容器，元素可以重复，可以插入多<br> 个null元素，元素都有索引。常用的实现类有 ArrayList、LinkedList 和 Vector。</li><li>Set：一个无序（存入和取出顺序有可能不一致）容器，不可以存储重复元素，只允许存入一<br> 个null元素，必须保证元素唯一性。Set 接口常用实现类是 HashSet、LinkedHashSet 以及TreeSet。</li></ul></li><li>Map是一个键值对集合，存储键、值和之间的映射。 Key无序，唯一；value 不要求有序，允许重<br> 复。Map没有继承于Collection接口，从Map集合中检索元素时，只要给出键对象，就会返回对应<br> 的值对象。 <ul><li>Map 的常用实现类：HashMap、TreeMap、HashTable、LinkedHashMap、ConcurrentHashMap</li></ul></li></ul><h2 id="_7-集合框架底层数据结构" tabindex="-1"><a class="header-anchor" href="#_7-集合框架底层数据结构" aria-hidden="true">#</a> 7. 集合框架底层数据结构</h2><ul><li>Collection <ol><li>List<br> * Arraylist： Object数组<br> * Vector： Object数组<br> * LinkedList： 双向循环链表</li><li>Set<br> * HashSet（无序，唯一）：基于 HashMap 实现的，底层采用 HashMap 来保存元素<br> * LinkedHashSet： LinkedHashSet 继承与 HashSet，并且其内部是通过 LinkedHashMap 来实现的。有点类似于我们之前说的LinkedHashMap 其内部是基于 Hashmap 实现一样，不过还是有一点点区别的。<br> * TreeSet（有序，唯一）： 红黑树(自平衡的排序二叉树。)</li></ol></li><li>Map <ul><li>HashMap： JDK1.8之前HashMap由数组+链表组成的，数组是HashMap的主体，链表则是<br> 主要为了解决哈希冲突而存在的（“拉链法”解决冲突）.JDK1.8以后在解决哈希冲突时有了较<br> 大的变化，当链表长度大于阈值（默认为8）时，将链表转化为红黑树，以减少搜索时间</li><li>LinkedHashMap：LinkedHashMap 继承自 HashMap，所以它的底层仍然是基于拉链式散<br> 列结构即由数组和链表或红黑树组成。另外，LinkedHashMap 在上面结构的基础上，增加<br> 了一条双向链表，使得上面的结构可以保持键值对的插入顺序。同时通过对链表进行相应的<br> 操作，实现了访问顺序相关逻辑。</li><li>HashTable： 数组+链表组成的，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突<br> 而存在的</li><li>TreeMap： 红黑树（自平衡的排序二叉树）</li></ul></li></ul><h2 id="_8-哪些集合类是线程安全的" tabindex="-1"><a class="header-anchor" href="#_8-哪些集合类是线程安全的" aria-hidden="true">#</a> 8. 哪些集合类是线程安全的？</h2><ul><li>Vector：就比Arraylist多了个 synchronized （线程安全），因为效率较低，现在已经不太建议使<br> 用。</li><li>hashTable：就比hashMap多了个synchronized (线程安全)，不建议使用。</li><li>ConcurrentHashMap：是Java5中支持高并发、高吞吐量的线程安全HashMap实现。它由Segment数组结构和HashEntry数组结构组成。Segment数组在ConcurrentHashMap里扮演锁的角色，HashEntry则用于存储键-值对数据。一个ConcurrentHashMap里包含一个Segment数组，Segment的结构和HashMap类似，是一种数组和链表结构；一个Segment里包含一个HashEntry数组，每个HashEntry是一个链表结构的元素；每个Segment守护着一个HashEntry数组里的元素，当对HashEntry数组的数据进行修改时，必须首先获得它对应的Segment锁。（推荐使用）</li></ul><h2 id="_9-java集合的快速失败机制-fail-fast" tabindex="-1"><a class="header-anchor" href="#_9-java集合的快速失败机制-fail-fast" aria-hidden="true">#</a> 9. Java集合的快速失败机制 “fail-fast”？</h2><ul><li>是java集合的一种错误检测机制，当多个线程对集合进行结构上的改变的操作时，有可能会产生<br> fail-fast 机制。</li><li>例如：假设存在两个线程（线程1、线程2），线程1通过Iterator在遍历集合A中的元素，在某个时<br> 候线程2修改了集合A的结构（是结构上面的修改，而不是简单的修改集合元素的内容），那么这<br> 个时候程序就会抛出 ConcurrentModificationException 异常，从而产生fail-fast机制。</li><li>原因：迭代器在遍历时直接访问集合中的内容，并且在遍历过程中使用一个 modCount 变量。集<br> 合在被遍历期间如果内容发生变化，就会改变modCount的值。每当迭代器使用hashNext()/next()<br> 遍历下一个元素之前，都会检测modCount变量是否为expectedmodCount值，是的话就返回遍<br> 历；否则抛出异常，终止遍历。</li><li>解决办法：</li></ul><ol><li>在遍历过程中，所有涉及到改变modCount值得地方全部加上synchronized。</li><li>使用CopyOnWriteArrayList来替换ArrayList</li></ol><h2 id="_10-怎么确保一个集合不能被修改" tabindex="-1"><a class="header-anchor" href="#_10-怎么确保一个集合不能被修改" aria-hidden="true">#</a> 10. 怎么确保一个集合不能被修改？</h2><ul><li>可以使用 Collections. unmodifiableCollection(Collection c) 方法来创建一个只读集合，这样改变<br> 集合的任何操作都会抛出 Java. lang. UnsupportedOperationException 异常。</li><li>示例代码如下：</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> clist <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span> <span class="token function">unmodifiableCollection</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
clist<span class="token punctuation">.</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;y&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 运行时此行报错</span>
<span class="token class-name">System</span><span class="token punctuation">.</span> out<span class="token punctuation">.</span> <span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="二、collection接口" tabindex="-1"><a class="header-anchor" href="#二、collection接口" aria-hidden="true">#</a> 二、Collection接口</h2><h2 id="list接口" tabindex="-1"><a class="header-anchor" href="#list接口" aria-hidden="true">#</a> List接口</h2><h3 id="_11-迭代器-iterator-是什么" tabindex="-1"><a class="header-anchor" href="#_11-迭代器-iterator-是什么" aria-hidden="true">#</a> 11. 迭代器 Iterator 是什么？</h3><ul><li>Iterator 接口提供遍历任何 Collection 的接口。我们可以从一个 Collection 中使用迭代器方法来<br> 获取迭代器实例。迭代器取代了 Java 集合框架中的 Enumeration，迭代器允许调用者在迭代过程<br> 中移除元素。</li><li>因为所有Collection接继承了Iterator迭代器</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>
	<span class="token comment">// Query Operations</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-iterator-怎么使用-有什么特点" tabindex="-1"><a class="header-anchor" href="#_12-iterator-怎么使用-有什么特点" aria-hidden="true">#</a> 12. Iterator 怎么使用？有什么特点？</h3><ul><li>Iterator 使用代码如下：</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> list<span class="token punctuation">.</span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token class-name">String</span> obj <span class="token operator">=</span> it<span class="token punctuation">.</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span> out<span class="token punctuation">.</span> <span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Iterator 的特点是只能单向遍历，但是更加安全，因为它可以确保，在当前遍历的集合元素被更改<br> 的时候，就会抛出 ConcurrentModificationException 异常。</li></ul><h3 id="_13-如何边遍历边移除-collection-中的元素" tabindex="-1"><a class="header-anchor" href="#_13-如何边遍历边移除-collection-中的元素" aria-hidden="true">#</a> 13. 如何边遍历边移除 Collection 中的元素？</h3><p>边遍历边修改 Collection 的唯一正确方式是使用 Iterator.remove() 方法，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token operator">*</span><span class="token comment">// do something*</span>
		it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一种最常见的错误代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> i <span class="token operator">:</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>
		list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>运行以上错误代码会报 ConcurrentModificationException 异常。这是因为当使用<br> foreach(for(Integer i : list)) 语句时，会自动生成一个iterator 来遍历该 list，但同时该 list 正在被<br> Iterator.remove() 修改。Java 一般不允许一个线程在遍历 Collection 时另一个线程修改它。</li></ul><h3 id="_14-iterator-和-listiterator-有什么区别" tabindex="-1"><a class="header-anchor" href="#_14-iterator-和-listiterator-有什么区别" aria-hidden="true">#</a> 14. Iterator 和 ListIterator 有什么区别？</h3><ul><li>Iterator 可以遍历 Set 和 List 集合，而 ListIterator 只能遍历 List。</li><li>Iterator 只能单向遍历，而 ListIterator 可以双向遍历（向前/后遍历）。</li><li>ListIterator 实现 Iterator 接口，然后添加了一些额外的功能，比如添加一个元素、替换一个元<br> 素、获取前面或后面元素的索引位置。</li></ul><h3 id="_15-遍历一个-list-有哪些不同的方式-每种方法的实现原理是什么-java-中-list遍历的最佳实践是什么" tabindex="-1"><a class="header-anchor" href="#_15-遍历一个-list-有哪些不同的方式-每种方法的实现原理是什么-java-中-list遍历的最佳实践是什么" aria-hidden="true">#</a> 15. 遍历一个 List 有哪些不同的方式？每种方法的实现原理是什么？Java 中 List遍历的最佳实践是什么？</h3><ul><li>遍历方式有以下几种： <ol><li>for 循环遍历，基于计数器。在集合外部维护一个计数器，然后依次读取每一个位置的元素，当读取到最后一个元素后停止。</li><li>迭代器遍历，Iterator。Iterator 是面向对象的一个设计模式，目的是屏蔽不同数据集合的特点，统一遍历集合的接口。Java 在 Collections 中支持了 Iterator 模式。</li><li>foreach 循环遍历。foreach 内部也是采用了 Iterator 的方式实现，使用时不需要显式声明Iterator 或计数器。优点是代码简洁，不易出错；缺点是只能做简单的遍历，不能在遍历过程中操作数据集合，例如删除、替换。</li></ol></li><li>最佳实践：Java Collections 框架中提供了一个 RandomAccess 接口，用来标记 List 实现是否支<br> 持 Random Access。 <ul><li>如果一个数据集合实现了该接口，就意味着它支持 Random Access，按位置读取元素的平均<br> 时间复杂度为 O(1)，如ArrayList。</li><li>如果没有实现该接口，表示不支持 Random Access，如LinkedList。</li><li>推荐的做法就是，支持 Random Access 的列表可用 for 循环遍历，否则建议用 Iterator 或foreach 遍历。</li></ul></li></ul><h3 id="_16-说一下-arraylist-的优缺点" tabindex="-1"><a class="header-anchor" href="#_16-说一下-arraylist-的优缺点" aria-hidden="true">#</a> 16. 说一下 ArrayList 的优缺点</h3><ul><li>ArrayList的优点如下： <ul><li>ArrayList 底层以数组实现，是一种随机访问模式。ArrayList 实现了 RandomAccess 接口，因此查找的时候非常快。</li><li>ArrayList 在顺序添加一个元素的时候非常方便。</li></ul></li><li>ArrayList 的缺点如下： <ul><li>删除元素的时候，需要做一次元素复制操作。如果要复制的元素很多，那么就会比较耗费性能。</li><li>插入元素的时候，也需要做一次元素复制操作，缺点同上。</li></ul></li><li>ArrayList 比较适合顺序添加、随机访问的场景。</li></ul><h3 id="_17-如何实现数组和-list-之间的转换" tabindex="-1"><a class="header-anchor" href="#_17-如何实现数组和-list-之间的转换" aria-hidden="true">#</a> 17. 如何实现数组和 List 之间的转换？</h3><ul><li>数组转 List：使用 Arrays. asList(array) 进行转换。</li><li>List 转数组：使用 List 自带的 toArray() 方法。</li><li>代码示例：</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token comment">// list to array</span>
	<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	list<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// array to list</span>
	<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;456&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_18-arraylist-和-linkedlist-的区别是什么" tabindex="-1"><a class="header-anchor" href="#_18-arraylist-和-linkedlist-的区别是什么" aria-hidden="true">#</a> 18. ArrayList 和 LinkedList 的区别是什么？</h3><ul><li>数据结构实现：ArrayList 是动态数组的数据结构实现，而 LinkedList 是双向链表的数据结构实现。</li><li>随机访问效率：ArrayList 比 LinkedList 在随机访问的时候效率要高，因为 LinkedList 是线性的数据存储方式，所以需要移动指针从前往后依次查找。</li><li>增加和删除效率：在非首尾的增加和删除操作，LinkedList 要比 ArrayList 效率要高，因为ArrayList 增删操作要影响数组内的其他数据的下标。</li><li>内存空间占用：LinkedList 比 ArrayList 更占内存，因为 LinkedList 的节点除了存储数据，还存储了两个引用，一个指向前一个元素，一个指向后一个元素。</li><li>线程安全：ArrayList 和 LinkedList 都是不同步的，也就是不保证线程安全；</li><li>综合来说，在需要频繁读取集合中的元素时，更推荐使用 ArrayList，而在插入和删除操作较多时，更推荐使用 LinkedList。</li><li>LinkedList 的双向链表也叫双链表，是链表的一种，它的每个数据结点中都有两个指针，分别指向直接后继和直接前驱。所以，从双向链表中的任意一个结点开始，都可以很方便地访问它的前驱结点和后继结点。</li></ul><h3 id="_19-arraylist-和-vector-的区别是什么" tabindex="-1"><a class="header-anchor" href="#_19-arraylist-和-vector-的区别是什么" aria-hidden="true">#</a> 19. ArrayList 和 Vector 的区别是什么？</h3><ul><li>这两个类都实现了 List 接口（List 接口继承了 Collection 接口），他们都是有序集合 <ul><li>线程安全：Vector 使用了 Synchronized 来实现线程同步，是线程安全的，而 ArrayList 是非线程安全的。</li><li>性能：ArrayList 在性能方面要优于 Vector。</li><li>扩容：ArrayList 和 Vector 都会根据实际的需要动态的调整容量，只不过在 Vector 扩容每次会增加 1 倍，而 ArrayList 只会增加 50%。</li></ul></li><li>Vector类的所有方法都是同步的。可以由两个线程安全地访问一个Vector对象、但是一个线程访问Vector的话代码要在同步操作上耗费大量的时间。</li><li>Arraylist不是同步的，所以在不需要保证线程安全时时建议使用Arraylist。</li></ul><h3 id="_20-插入数据时-arraylist、linkedlist、vector谁速度较快-阐述" tabindex="-1"><a class="header-anchor" href="#_20-插入数据时-arraylist、linkedlist、vector谁速度较快-阐述" aria-hidden="true">#</a> 20. 插入数据时，ArrayList、LinkedList、Vector谁速度较快？阐述</h3><ul><li>ArrayList、Vector、LinkedList 的存储性能和特性？<br> ArrayList和Vector 底层的实现都是使用数组方式存储数据。数组元素数大于实际存储的数据以便增加和插入元素，它们都允许直接按序号索引元素，但是插入元素要涉及数组元素移动等内存操作，所以索引数据快而插入数据慢。</li><li>Vector 中的方法由于加了 synchronized 修饰，因此 Vector 是线程安全容器，但性能上较ArrayList差。</li><li>LinkedList 使用双向链表实现存储，按序号索引数据需要进行前向或后向遍历，但插入数据时只需要记录当前项的前后项即可，所以 LinkedList 插入速度较快。</li></ul><h3 id="_21-多线程场景下如何使用-arraylist" tabindex="-1"><a class="header-anchor" href="#_21-多线程场景下如何使用-arraylist" aria-hidden="true">#</a> 21. 多线程场景下如何使用 ArrayList？</h3><p>ArrayList 不是线程安全的，如果遇到多线程场景，可以通过 Collections 的 synchronizedList 方法将其转换成线程安全的容器后再使用。例如像下面这样：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> synchronizedList <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
	synchronizedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	synchronizedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;bbb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> synchronizedList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>synchronizedList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_22-为什么-arraylist-的-elementdata-加上-transient-修饰" tabindex="-1"><a class="header-anchor" href="#_22-为什么-arraylist-的-elementdata-加上-transient-修饰" aria-hidden="true">#</a> 22. 为什么 ArrayList 的 elementData 加上 transient 修饰？</h3><ul><li>ArrayList 中的数组定义如下：<br> private transient Object[] elementData;</li><li>再看一下 ArrayList 的定义：</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> 
	<span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">RandomAccess</span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可以看到 ArrayList 实现了 Serializable 接口，这意味着 ArrayList 支持序列化。transient 的作用是说不希望 elementData 数组被序列化，重写了 writeObject 实现：</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>ObjectOutputStream</span> s<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>IOException</span><span class="token punctuation">{</span>
	<span class="token comment">// Write out element count, and any hidden stuff</span>
	<span class="token keyword">int</span> expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>
	s<span class="token punctuation">.</span><span class="token function">defaultWriteObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// Write out array length</span>
	s<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// Write out all elements in the proper order.</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		s<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>每次序列化时，先调用 defaultWriteObject() 方法序列化 ArrayList 中的非 transient 元素，然后遍历 elementData，只序列化已存入的元素，这样既加快了序列化的速度，又减小了序列化之后的文件大小。</li></ul><h3 id="_23-list-和-set-的区别" tabindex="-1"><a class="header-anchor" href="#_23-list-和-set-的区别" aria-hidden="true">#</a> 23. List 和 Set 的区别</h3><ul><li>List , Set 都是继承自Collection 接口</li><li>List 特点：一个有序（元素存入集合的顺序和取出的顺序一致）容器，元素可以重复，可以插入多个null元素，元素都有索引。常用的实现类有 ArrayList、LinkedList 和 Vector。</li><li>Set 特点：一个无序（存入和取出顺序有可能不一致）容器，不可以存储重复元素，只允许存入一个null元素，必须保证元素唯一性。Set 接口常用实现类是 HashSet、LinkedHashSet 以及TreeSet。</li><li>另外 List 支持for循环，也就是通过下标来遍历，也可以用迭代器，但是set只能用迭代，因为他无序，无法用下标来取得想要的值。</li><li>Set和List对比 <ul><li>Set：检索元素效率低下，删除和插入效率高，插入和删除不会引起元素位置改变。</li><li>List：和数组类似，List可以动态增长，查找元素效率高，插入删除元素效率低，因为会引起其他元素位置改变</li></ul></li></ul><h2 id="set接口" tabindex="-1"><a class="header-anchor" href="#set接口" aria-hidden="true">#</a> Set接口</h2><h3 id="_24-说一下-hashset-的实现原理" tabindex="-1"><a class="header-anchor" href="#_24-说一下-hashset-的实现原理" aria-hidden="true">#</a> 24. 说一下 HashSet 的实现原理？</h3><ul><li>HashSet 是基于 HashMap 实现的，HashSet的值存放于HashMap的key上，HashMap的value统一为present，因此 HashSet 的实现比较简单，相关 HashSet 的操作，基本上都是直接调用底层HashMap 的相关方法来完成，HashSet 不允许重复的值。</li></ul><h3 id="_25-hashset如何检查重复-hashset是如何保证数据不可重复的" tabindex="-1"><a class="header-anchor" href="#_25-hashset如何检查重复-hashset是如何保证数据不可重复的" aria-hidden="true">#</a> 25. HashSet如何检查重复？HashSet是如何保证数据不可重复的？</h3><ul><li>向HashSet 中add ()元素时，判断元素是否存在的依据，不仅要比较hash值，同时还要结合equles 方法比较。</li><li>HashSet 中的add ()方法会使用HashMap 的put()方法。</li><li>HashMap 的 key 是唯一的，由源码可以看出 HashSet 添加进去的值就是作为HashMap 的key，并且在HashMap中如果K/V相同时，会用新的V覆盖掉旧的V，然后返回旧的V。所以不会重复（HashMap 比较key是否相等是先比较hashcode 再比较equals ）。</li><li>以下是HashSet 部分源码：</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> <span class="token constant">PRESENT</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 调用HashMap的put方法,PRESENT是一个至始至终都相同的虚值</span>
		<span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token constant">PRESENT</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>hashCode（）与equals（）的相关规定：</strong></p><ol><li>如果两个对象相等，则hashcode一定也是相同的<br> * hashCode是jdk根据对象的地址或者字符串或者数字算出来的int类型的数值</li><li>两个对象相等,对两个equals方法返回true</li><li>两个对象有相同的hashcode值，它们也不一定是相等的</li><li>综上，equals方法被覆盖过，则hashCode方法也必须被覆盖</li><li>hashCode()的默认行为是对堆上的对象产生独特值。如果没有重写hashCode()，则该class的两个<br> 对象无论如何都不会相等（即使这两个对象指向相同的数据）。</li></ol><p><strong>==与equals的区别</strong></p><ol><li>==是判断两个变量或实例是不是指向同一个内存空间 equals是判断两个变量或实例所指向的内存空间的值是不是相同</li><li>==是指对内存地址进行比较 equals()是对字符串的内容进行比较</li></ol><h3 id="_26-hashset与hashmap的区别" tabindex="-1"><a class="header-anchor" href="#_26-hashset与hashmap的区别" aria-hidden="true">#</a> 26. HashSet与HashMap的区别</h3><table><thead><tr><th>HashMap</th><th>HashSet</th></tr></thead><tbody><tr><td>实现了Map接口</td><td>实现Set接口</td></tr><tr><td>存储键值对</td><td>仅存储对象</td></tr><tr><td>调用put（）向map中添加元素</td><td>调用add（）方法向Set中添加元素</td></tr><tr><td>HashMap使用键（Key）计算Hashcode</td><td>HashSet使用成员对象来计算hashcode值，对于两个对象来说hashcode可能相同，所以equals()方法用来判断对象的相等性，如果两个对象不同的话，那么返回false</td></tr><tr><td>HashMap相对于HashSet较快，因为它是使用唯一的键获取对象</td><td>HashSet较HashMap来说比较慢</td></tr></tbody></table><hr><h2 id="三、map接口" tabindex="-1"><a class="header-anchor" href="#三、map接口" aria-hidden="true">#</a> 三、Map接口</h2><h2 id="_27-什么是hash算法" tabindex="-1"><a class="header-anchor" href="#_27-什么是hash算法" aria-hidden="true">#</a> 27. 什么是Hash算法</h2><ul><li>哈希算法是指把任意长度的二进制映射为固定长度的较小的二进制值，这个较小的二进制值叫做哈希值。</li></ul><h2 id="_28-什么是链表" tabindex="-1"><a class="header-anchor" href="#_28-什么是链表" aria-hidden="true">#</a> 28. 什么是链表</h2><h2 id="_29-说一下hashmap的实现原理" tabindex="-1"><a class="header-anchor" href="#_29-说一下hashmap的实现原理" aria-hidden="true">#</a> 29. 说一下HashMap的实现原理？</h2><ul><li><p>HashMap概述： HashMap是基于哈希表的Map接口的非同步实现。此实现提供所有可选的映射操作，并允许使用null值和null键。此类不保证映射的顺序，特别是它不保证该顺序恒久不变。</p></li><li><p>HashMap的数据结构： 在Java编程语言中，最基本的结构就是两种，一个是数组，另外一个是模拟指针（引用），所有的数据结构都可以用这两个基本结构来构造的，HashMap也不例外。HashMap实际上是一个“链表散列”的数据结构，即数组和链表的结合体。</p></li><li><p>HashMap 基于 Hash 算法实现的</p><ol><li>当我们往HashMap中put元素时，利用key的hashCode重新hash计算出当前对象的元素在数组中的下标</li><li>存储时，如果出现hash值相同的key，此时有两种情况。<br> (1)如果key相同，则覆盖原始值；<br> (2)如果key不同（出现冲突），则将当前的key-value放入链表中</li><li>获取时，直接找到hash值对应的下标，在进一步判断key是否相同，从而找到对应值。</li><li>理解了以上过程就不难明白HashMap是如何解决hash冲突的问题，核心就是使用了数组的存储方式，然后将冲突的key的对象放入链表中，一旦发现冲突就在链表中做进一步的对比。</li></ol></li><li><p>需要注意Jdk 1.8中对HashMap的实现做了优化，当链表中的节点数据超过八个之后，该链表会转为红黑树来提高查询效率，从原来的O(n)到O(logn)</p></li></ul><h2 id="_30-hashmap在jdk1-7和jdk1-8中有哪些不同-hashmap的底层实现" tabindex="-1"><a class="header-anchor" href="#_30-hashmap在jdk1-7和jdk1-8中有哪些不同-hashmap的底层实现" aria-hidden="true">#</a> 30. HashMap在JDK1.7和JDK1.8中有哪些不同？HashMap的底层实现</h2><ul><li>在Java中，保存数据有两种比较简单的数据结构：数组和链表。数组的特点是：寻址容易，插入和删除困难；链表的特点是：寻址困难，但插入和删除容易；所以我们将数组和链表结合在一起，发挥两者各自的优势，使用一种叫做拉链法的方式可以解决哈希冲突。</li></ul><p><strong>HashMap JDK1.8之前</strong></p><p><strong>JDK1.7 VS JDK1.8 比较</strong></p><ul><li>JDK1.8主要解决或优化了一下问题： <ol><li>resize 扩容优化</li><li>引入了红黑树，目的是避免单条链表过长而影响查询效率，红黑树算法请参考</li><li>解决了多线程死循环问题，但仍是非线程安全的，多线程时可能会造成数据丢失问题。</li></ol></li></ul><table><thead><tr><th>不同</th><th>JDK 1.7</th><th>JDK 1.8</th></tr></thead><tbody><tr><td>存储结构</td><td>数组 + 链表</td><td>数组 + 链表 + 红黑树</td></tr><tr><td>初始化方式</td><td>单独函数： inflateTable()</td><td>直接集成到了扩容函数 resize() 中</td></tr><tr><td>hash值计算方式</td><td>扰动处理 = 9次扰动 = 4次位运算 + 5次异或运算</td><td>扰动处理 = 2次扰动 = 1次位运算 + 1次异或运算</td></tr><tr><td>存放数据的规则</td><td>无冲突时，存放数组；冲突时，存放链表</td><td>无冲突时，存放数组；冲突 &amp; 链表长度 &lt;8：存放单链表；冲突 &amp; 链表长度 &gt; 8：树化并存放红黑树</td></tr><tr><td>插入数据方式</td><td>头插法（先讲原位置的数据移到后1位，再插入数据到该位置）</td><td>尾插法（直接插入到链表尾部/红黑树）</td></tr><tr><td>扩容后存储位置的计算方式</td><td>全部按照原来方法进行计算（即hashCode -&gt;&gt; 扰动函数 -&gt;&gt; (h&amp;length-1)）</td><td>按照扩容后的规律计算（即扩容后的位置=原位置 or 原位置 + 旧容量）</td></tr></tbody></table><h2 id="_31-什么是红黑树" tabindex="-1"><a class="header-anchor" href="#_31-什么是红黑树" aria-hidden="true">#</a> 31. 什么是红黑树</h2><p><strong>说道红黑树先讲什么是二叉树</strong></p><ul><li>二叉树简单来说就是 每一个节上可以关联俩个子节点</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>大概就是这样子：
		     a
		<span class="token operator">/</span>         \\
	   b           c
	 <span class="token operator">/</span>   \\       <span class="token operator">/</span>   \\
	d     e     f     g
   <span class="token operator">/</span> \\   <span class="token operator">/</span> \\   <span class="token operator">/</span> \\   <span class="token operator">/</span> \\
  h   i j   k l   m n   o
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>红黑树</strong></p><ul><li>红黑树是一种特殊的二叉查找树。红黑树的每个结点上都有存储位表示结点的颜色，可以是红(Red)或黑(Black)。</li><li>红黑树的每个结点是黑色或者红色。当是不管怎么样他的根结点是黑色。每个叶子结点（叶子结点代表终结、结尾的节点）也是黑色 [注意：这里叶子结点，是指为空(NIL或NULL)的叶子结点！]。</li><li>如果一个结点是红色的，则它的子结点必须是黑色的。</li><li>每个结点到叶子结点NIL所经过的黑色结点的个数一样的。[确保没有一条路径会比其他路径长出俩倍，所以红黑树是相对接近平衡的二叉树的！]</li><li>红黑树的基本操作是添加、删除。在对红黑树进行添加或删除之后，都会用到旋转方法。为什么呢？道理很简单，添加或删除红黑树中的结点之后，红黑树的结构就发生了变化，可能不满足上面三条性质，也就不再是一颗红黑树了，而是一颗普通的树。而通过旋转和变色，可以使这颗树重新成为红黑树。简单点说，旋转和变色的目的是让树保持红黑树的特性。</li></ul><h2 id="_32-hashmap的put方法的具体流程" tabindex="-1"><a class="header-anchor" href="#_32-hashmap的put方法的具体流程" aria-hidden="true">#</a> 32. HashMap的put方法的具体流程？</h2><ul><li>当我们put的时候，首先计算 key 的 hash 值，这里调用了 hash 方法， hash 方法实际是让key.hashCode() 与 key.hashCode()&gt;&gt;&gt;16 进行异或操作，高16bit补0，一个数和0异或不变，所以 hash 函数大概的作用就是：高16bit不变，低16bit和高16bit做了一个异或，目的是减少碰撞。按照函数注释，因为bucket数组大小是2的幂，计算下标 index = (table.length - 1) &amp; hash ，如果不做 hash 处理，相当于散列生效的只有几个低 bit 位，为了减少散列的碰撞，设计者综合考虑了速度、作用、质量之后，使用高16bit和低16bit异或来简单处理减少碰撞，而且JDK8中用了复杂度 O（logn）的树结构来提升碰撞下的性能。</li><li>putVal方法执行流程图<br><img src="https://img-blog.csdnimg.cn/29907b8e6ff5478c8c595c20bca43e00.png" alt="在这里插入图片描述" loading="lazy"></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">return</span><span class="token punctuation">(</span><span class="token function">putVal</span><span class="token punctuation">(</span> <span class="token function">hash</span><span class="token punctuation">(</span> key <span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span> <span class="token class-name">Object</span> key <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> h<span class="token punctuation">;</span>
	<span class="token keyword">return</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">/* 实现Map.put和相关方法 */</span>
<span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">putVal</span><span class="token punctuation">(</span> <span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">,</span>
		<span class="token keyword">boolean</span> evict <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">;</span>
	<span class="token comment">/*
	 * 步骤①：tab为空则创建
	 * table未初始化或者长度为0，进行扩容
	 */</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span>
		n <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token comment">/*
	 * 步骤②：计算index，并对null做处理
	 * (n - 1) &amp; hash 确定元素存放在哪个桶中，桶为空，新生成结点放入桶中(此时，这个结点是放在数组中)
	 */</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token punctuation">)</span>
		tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span> hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">/* 桶中已经存在元素 */</span>
	<span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">;</span> <span class="token class-name">K</span> k<span class="token punctuation">;</span>
		<span class="token comment">/*
		 * 步骤③：节点key存在，直接覆盖value
		 * 比较桶中第一个元素(数组中的结点)的hash值相等，key相等
		 */</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span> p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>
		     <span class="token punctuation">(</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span> k <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span>
			<span class="token comment">/* 将第一个元素赋值给e，用e来记录 */</span>
			e <span class="token operator">=</span> p<span class="token punctuation">;</span>
		<span class="token comment">/*
		 * 步骤④：判断该链为红黑树
		 * hash值不相等，即key不相等；为红黑树结点
		 * 如果当前元素类型为TreeNode，表示为红黑树，putTreeVal返回待存放的node, e可能为null
		 */</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">)</span>
			<span class="token comment">/* 放入树中 */</span>
			e <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">/*
		 * 步骤⑤：该链为链表
		 * 为链表结点
		 */</span>
		<span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token comment">/* 在链表最末插入结点 */</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token operator">++</span>binCount <span class="token punctuation">)</span>
			<span class="token punctuation">{</span>
				<span class="token comment">/*
				 * 到达链表的尾部
				 * 判断该链表尾部指针是不是空的
				 */</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token punctuation">)</span>
				<span class="token punctuation">{</span>
					<span class="token comment">/* 在尾部插入新结点 */</span>
					p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span> hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token comment">/* 判断链表的长度是否达到转化红黑树的临界值，临界值为8 */</span>
					i <span class="token function">f</span><span class="token punctuation">(</span> binCount <span class="token operator">&gt;=</span> <span class="token constant">TREEIFY_THRESHOLD</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token comment">/* -1 for 1st */</span>
					<span class="token comment">/* 链表结构转树形结构 */</span>
					<span class="token function">treeifyBin</span><span class="token punctuation">(</span> tab<span class="token punctuation">,</span> hash <span class="token punctuation">)</span><span class="token punctuation">;</span>


					<span class="token comment">/* 跳出循环 */</span>
					<span class="token keyword">break</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
				<span class="token comment">/* 判断链表中结点的key值与插入的元素的key值是否相等 */</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span> e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>
				     <span class="token punctuation">(</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span> k <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span>
					<span class="token comment">/* 相等，跳出循环 */</span>
					<span class="token keyword">break</span><span class="token punctuation">;</span>
				<span class="token comment">/* 用于遍历桶中的链表，与前面的e = p.next组合，可以遍历链表 */</span>
				p <span class="token operator">=</span> e<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token comment">/* 判断当前的key已经存在的情况下，再来一个相同的hash值、key值时，返回新来的value这个值 */</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span> e <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token comment">/* 记录e的value */</span>
			<span class="token class-name">V</span> oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
			<span class="token comment">/* onlyIfAbsent为false或者旧值为null */</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>onlyIfAbsent <span class="token operator">||</span> oldValue <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token punctuation">)</span>
				<span class="token comment">/* 用新值替换旧值 */</span>
				e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
			<span class="token comment">/* 访问后回调 */</span>
			<span class="token function">afterNodeAccess</span><span class="token punctuation">(</span> e <span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">/* 返回旧值 */</span>
			<span class="token keyword">return</span><span class="token punctuation">(</span>oldValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token comment">/* 结构性修改 */</span>
	<span class="token operator">++</span>modCount<span class="token punctuation">;</span>
	<span class="token comment">/*
	 * 步骤⑥：超过最大容量就扩容
	 * 实际大小大于阈值则扩容
	 */</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">++</span>size <span class="token operator">&gt;</span> threshold <span class="token punctuation">)</span>
		<span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">/* 插入后回调 */</span>
	<span class="token function">afterNodeInsertion</span><span class="token punctuation">(</span> evict <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>判断键值对数组table[i]是否为空或为null，否则执行resize()进行扩容；</li><li>根据键值key计算hash值得到插入的数组索引i，如果table[i]==null，直接新建节点添加，转向<br> ⑥，如果table[i]不为空，转向③；</li><li>判断table[i]的首个元素是否和key一样，如果相同直接覆盖value，否则转向④，这里的相同指的<br> 是hashCode以及equals；</li><li>判断table[i] 是否为treeNode，即table[i] 是否是红黑树，如果是红黑树，则直接在树中插入键值<br> 对，否则转向5；</li><li>遍历table[i]，判断链表长度是否大于8，大于8的话把链表转换为红黑树，在红黑树中执行插入操<br> 作，否则进行链表的插入操作；遍历过程中若发现key已经存在直接覆盖value即可；</li><li>插入成功后，判断实际存在的键值对数量size是否超多了最大容量threshold，如果超过，进行扩<br> 容。</li></ol><h2 id="_33-hashmap的扩容操作是怎么实现的" tabindex="-1"><a class="header-anchor" href="#_33-hashmap的扩容操作是怎么实现的" aria-hidden="true">#</a> 33. HashMap的扩容操作是怎么实现的？</h2><ol><li>在jdk1.8中，resize方法是在hashmap中的键值对大于阀值时或者初始化时，就调用resize方法进<br> 行扩容；</li><li>每次扩展的时候，都是扩展2倍；</li><li>扩展后Node对象的位置要么在原位置，要么移动到原偏移量两倍的位置。<br> 在putVal()中，我们看到在这个函数里面使用到了2次resize()方法，resize()方法表示的在进行第一<br> 次初始化时会对其进行扩容，或者当该数组的实际大小大于其临界值值(第一次为12),这个时候在扩<br> 容的同时也会伴随的桶上面的元素进行重新分发，这也是JDK1.8版本的一个优化的地方，在1.7<br> 中，扩容之后需要重新去计算其Hash值，根据Hash值对其进行分发，但在1.8版本中，则是根据<br> 在同一个桶的位置中进行判断(e.hash &amp; oldCap)是否为0，重新进行hash分配后，该元素的位置<br> 要么停留在原始位置，要么移动到原始位置+增加的数组大小这个位置上</li></ol><h2 id="_34-hashmap是怎么解决哈希冲突的" tabindex="-1"><a class="header-anchor" href="#_34-hashmap是怎么解决哈希冲突的" aria-hidden="true">#</a> 34. HashMap是怎么解决哈希冲突的？</h2><ul><li>答：在解决这个问题之前，我们首先需要知道什么是哈希冲突，而在了解哈希冲突之前我们还要知<br> 道什么是哈希才行；</li></ul><p><strong>什么是哈希？</strong></p><ul><li>Hash，一般翻译为“散列”，也有直接音译为“哈希”的， Hash就是指使用哈希算法是指把任意长度<br> 的二进制映射为固定长度的较小的二进制值，这个较小的二进制值叫做哈希值。</li></ul><p><strong>什么是哈希冲突？</strong></p><ul><li>当两个不同的输入值，根据同一散列函数计算出相同的散列值的现象，我们就把它叫做碰撞（哈希<br> 碰撞）。</li></ul><p><strong>HashMap的数据结构</strong></p><ul><li>在Java中，保存数据有两种比较简单的数据结构：数组和链表。 <ul><li>数组的特点是：寻址容易，插入和删除困难；</li><li>链表的特点是：寻址困难，但插入和删除容易；</li></ul></li><li>所以我们将数组和链表结合在一起，发挥两者各自的优势，就可以使用俩种方式：链地址法和开放<br> 地址法可以解决哈希冲突：<br><img src="https://img-blog.csdnimg.cn/8581f09298bb42dea0bebcff0163fafc.png" alt="在这里插入图片描述" loading="lazy"></li><li>链表法就是将相同hash值的对象组织成一个链表放在hash值对应的槽位；</li><li>开放地址法是通过一个探测算法，当某个槽位已经被占据的情况下继续查找下一个可以使用的槽位。</li><li><strong>但相比于hashCode返回的int类型，我们HashMap初始的容量大小</strong><br> DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4 <strong>（即2的四次方16）要远小于int类型的范围，所以我们<br> 如果只是单纯的用hashCode取余来获取对应的bucket这将会大大增加哈希碰撞的概率，并且最<br> 坏情况下还会将HashMap变成一个单链表</strong>，所以我们还需要对hashCode作一定的优化</li></ul><p><strong>hash()函数</strong></p><ul><li>上面提到的问题，主要是因为如果使用hashCode取余，那么相当于参与运算的只有hashCode的<br> 低位，高位是没有起到任何作用的，所以我们的思路就是让hashCode取值出的高位也参与运算，<br> 进一步降低hash碰撞的概率，使得数据分布更平均，我们把这样的操作称为扰动，在JDK 1.8中的<br> hash()函数如下：</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">int</span> h<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 与自己右移16位进行异或运算（高低位异或）</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这比在JDK 1.7中，更为简洁，相比在1.7中的4次位运算，5次异或运算（9次扰动），在1.8中，只<br> 进行了1次位运算和1次异或运算（2次扰动）；</li></ul><p><strong>总结</strong></p><ul><li>简单总结一下HashMap是使用了哪些方法来有效解决哈希冲突的： <ul><li>链表法就是将相同hash值的对象组织成一个链表放在hash值对应的槽位；</li><li>开放地址法是通过一个探测算法，当某个槽位已经被占据的情况下继续查找下一个可以使用<br> 的槽位。</li></ul></li></ul><h2 id="_35-能否使用任何类作为-map-的-key" tabindex="-1"><a class="header-anchor" href="#_35-能否使用任何类作为-map-的-key" aria-hidden="true">#</a> 35. 能否使用任何类作为 Map 的 key？</h2><p>可以使用任何类作为 Map 的 key，然而在使用之前，需要考虑以下几点：<br> * 如果类重写了 equals() 方法，也应该重写 hashCode() 方法。<br> * 类的所有实例需要遵循与 equals() 和 hashCode() 相关的规则。<br> * 如果一个类没有使用 equals()，不应该在 hashCode() 中使用它。<br> * 用户自定义 Key 类最佳实践是使之为不可变的，这样 hashCode() 值可以被缓存起来，拥有更好的性能。不可变的类也可以确保 hashCode() 和 equals() 在未来不会改变，这样就会解决与可变相关的问题了。</p><h2 id="_36-为什么hashmap中string、integer这样的包装类适合作为k" tabindex="-1"><a class="header-anchor" href="#_36-为什么hashmap中string、integer这样的包装类适合作为k" aria-hidden="true">#</a> 36. 为什么HashMap中String、Integer这样的包装类适合作为K？</h2><ul><li>答：String、Integer等包装类的特性能够保证Hash值的不可更改性和计算准确性，能够有效的减<br> 少Hash碰撞的几率 <ul><li>都是final类型，即不可变性，保证key的不可更改性，不会存在获取hash值不同的情况</li><li>内部已重写了 equals() 、 hashCode() 等方法，遵守了HashMap内部的规范（不清楚可以去上面看看putValue的过程），不容易出现Hash值计算错误的情况；</li></ul></li></ul><h2 id="_37-如果使用object作为hashmap的key-应该怎么办呢" tabindex="-1"><a class="header-anchor" href="#_37-如果使用object作为hashmap的key-应该怎么办呢" aria-hidden="true">#</a> 37. 如果使用Object作为HashMap的Key，应该怎么办呢？</h2><ul><li>答：重写 hashCode() 和 equals() 方法 <ol><li>重写 hashCode() 是因为需要计算存储数据的存储位置，需要注意不要试图从散列码计算中排除掉一个对象的关键部分来提高性能，这样虽然能更快但可能会导致更多的Hash碰撞；</li><li>重写 equals() 方法，需要遵守自反性、对称性、传递性、一致性以及对于任何非null的引用值x，x.equals(null)必须返回false的这几个特性，目的是为了保证key在哈希表中的唯一性；</li></ol></li></ul><h2 id="_38-hashmap为什么不直接使用hashcode-处理后的哈希值直接作为table的下标" tabindex="-1"><a class="header-anchor" href="#_38-hashmap为什么不直接使用hashcode-处理后的哈希值直接作为table的下标" aria-hidden="true">#</a> 38. HashMap为什么不直接使用hashCode()处理后的哈希值直接作为table的下标？</h2><ul><li>答： hashCode() 方法返回的是int整数类型，其范围为-(2 ^ 31)~(2 ^ 31 - 1)，约有40亿个映射空<br> 间，而HashMap的容量范围是在16（初始化默认值）~2 ^ 30，HashMap通常情况下是取不到最<br> 大值的，并且设备上也难以提供这么多的存储空间，从而导致通过 hashCode() 计算出的哈希值可<br> 能不在数组大小范围内，进而无法匹配存储位置；</li><li>那怎么解决呢？ <ol><li>HashMap自己实现了自己的 hash() 方法，通过两次扰动使得它自己的哈希值高低位自行进行异或运算，降低哈希碰撞概率也使得数据分布更平均；</li><li>在保证数组长度为2的幂次方的时候，使用 hash() 运算之后的值与运算（&amp;）（数组长度 - 1）来获取数组下标的方式进行存储，这样一来是比取余操作更加有效率，二来也是因为只有当数组长度为2的幂次方时，h&amp;(length-1)才等价于h%length，三来解决了“哈希值与数组大小范围不匹配”的问题；</li></ol></li></ul><h2 id="_39-hashmap-的长度为什么是2的幂次方" tabindex="-1"><a class="header-anchor" href="#_39-hashmap-的长度为什么是2的幂次方" aria-hidden="true">#</a> 39. HashMap 的长度为什么是2的幂次方</h2><ul><li>为了能让 HashMap 存取高效，尽量较少碰撞，也就是要尽量把数据分配均匀，每个链表/红黑树<br> 长度大致相同。这个实现就是把数据存到哪个链表/红黑树中的算法。</li><li>这个算法应该如何设计呢？ <ul><li>我们首先可能会想到采用%取余的操作来实现。但是，重点来了：“取余(%)操作中如果除数是<br> 2的幂次则等价于与其除数减一的与(&amp;)操作（也就是说 hash%length==hash&amp;(length-1)的<br> 前提是 length 是2的 n 次方；）。” 并且 采用二进制位操作 &amp;，相对于%能够提高运算效<br> 率，这就解释了 HashMap 的长度为什么是2的幂次方。</li></ul></li><li>那为什么是两次扰动呢？<br> 答：这样就是加大哈希值低位的随机性，使得分布更均匀，从而提高对应数组存储下标位置<br> 的随机性&amp;均匀性，最终减少Hash冲突，两次就够了，已经达到了高位低位同时参与运算的目的；</li></ul><h2 id="_40-hashmap-与-hashtable-有什么区别" tabindex="-1"><a class="header-anchor" href="#_40-hashmap-与-hashtable-有什么区别" aria-hidden="true">#</a> 40. HashMap 与 HashTable 有什么区别？</h2><ol><li>线程安全： HashMap 是非线程安全的，HashTable 是线程安全的；HashTable 内部的方法基本<br> 都经过 synchronized 修饰。（如果你要保证线程安全的话就使用 ConcurrentHashMap ）；</li><li>效率： 因为线程安全的问题，HashMap 要比 HashTable 效率高一点。另外，HashTable 基本被<br> 淘汰，不要在代码中使用它；（如果你要保证线程安全的话就使用 ConcurrentHashMap ）；</li><li>对Null key 和Null value的支持： HashMap 中，null 可以作为键，这样的键只有一个，可以有<br> 一个或多个键所对应的值为 null。但是在 HashTable 中 put 进的键值只要有一个 null，直接抛<br> NullPointerException。</li><li>初始容量大小和每次扩充容量大小的不同 ：</li><li>创建时如果不指定容量初始值，Hashtable 默认的初始大小为11，之后每次扩充，容量变为原来<br> 的2n+1。HashMap 默认的初始化大小为16。之后每次扩充，容量变为原来的2倍。</li><li>创建时如果给定了容量初始值，那么 Hashtable 会直接使用你给定的大小，而 HashMap 会将其<br> 扩充为2的幂次方大小。也就是说 HashMap 总是使用2的幂作为哈希表的大小，后面会介绍到为<br> 什么是2的幂次方。</li><li>底层数据结构： JDK1.8 以后的 HashMap 在解决哈希冲突时有了较大的变化，当链表长度大于阈<br> 值（默认为8）时，将链表转化为红黑树，以减少搜索时间。Hashtable 没有这样的机制。</li><li>推荐使用：在 Hashtable 的类注释可以看到，Hashtable 是保留类不建议使用，推荐在单线程环<br> 境下使用 HashMap 替代，如果需要多线程使用则用 ConcurrentHashMap 替代。</li></ol><h2 id="_41-什么是treemap-简介" tabindex="-1"><a class="header-anchor" href="#_41-什么是treemap-简介" aria-hidden="true">#</a> 41. 什么是TreeMap 简介</h2><ul><li>TreeMap 是一个有序的key-value集合，它是通过红黑树实现的。</li><li>TreeMap基于红黑树（Red-Black tree）实现。该映射根据其键的自然顺序进行排序，或者根据<br> 创建映射时提供的 Comparator 进行排序，具体取决于使用的构造方法。</li><li>TreeMap是线程非同步的。</li></ul><h2 id="_42-如何决定使用-hashmap-还是-treemap" tabindex="-1"><a class="header-anchor" href="#_42-如何决定使用-hashmap-还是-treemap" aria-hidden="true">#</a> 42. 如何决定使用 HashMap 还是 TreeMap？</h2><ul><li>对于在Map中插入、删除和定位元素这类操作，HashMap是最好的选择。然而，假如你需要对一<br> 个有序的key集合进行遍历，TreeMap是更好的选择。基于你的collection的大小，也许向<br> HashMap中添加元素会更快，将map换为TreeMap进行有序key的遍历。</li></ul><h2 id="_43-hashmap-和-concurrenthashmap-的区别" tabindex="-1"><a class="header-anchor" href="#_43-hashmap-和-concurrenthashmap-的区别" aria-hidden="true">#</a> 43. HashMap 和 ConcurrentHashMap 的区别</h2><ol><li>ConcurrentHashMap对整个桶数组进行了分割分段(Segment)，然后在每一个分段上都用lock锁<br> 进行保护，相对于HashTable的synchronized锁的粒度更精细了一些，并发性能更好，而<br> HashMap没有锁机制，不是线程安全的。（JDK1.8之后ConcurrentHashMap启用了一种全新的<br> 方式实现,利用CAS算法。）</li><li>HashMap的键值对允许有null，但是ConCurrentHashMap都不允许。</li></ol><h2 id="_44-concurrenthashmap-和-hashtable-的区别" tabindex="-1"><a class="header-anchor" href="#_44-concurrenthashmap-和-hashtable-的区别" aria-hidden="true">#</a> 44. ConcurrentHashMap 和 Hashtable 的区别？</h2><h2 id="_45-concurrenthashmap-底层具体实现知道吗-实现原理是什么" tabindex="-1"><a class="header-anchor" href="#_45-concurrenthashmap-底层具体实现知道吗-实现原理是什么" aria-hidden="true">#</a> 45. ConcurrentHashMap 底层具体实现知道吗？实现原理是什么？</h2><p>JDK1.7</p><ul><li>首先将数据分为一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段<br> 数据时，其他段的数据也能被其他线程访问。</li><li>在JDK1.7中，ConcurrentHashMap采用Segment + HashEntry的方式进行实现，结构如下：</li><li>一个 ConcurrentHashMap 里包含一个 Segment 数组。Segment 的结构和HashMap类似，是一<br> 种数组和链表结构，一个 Segment 包含一个 HashEntry 数组，每个 HashEntry 是一个链表结构<br> 的元素，每个 Segment 守护着一个HashEntry数组里的元素，当对 HashEntry 数组的数据进行修<br> 改时，必须首先获得对应的 Segment的锁。<br><img src="https://img-blog.csdnimg.cn/0132d0ef63ef4cddae86a2bce2d96700.png" alt="在这里插入图片描述" loading="lazy"></li></ul><ol><li>该类包含两个静态内部类 HashEntry 和 Segment ；前者用来封装映射表的键值对，后者用来充当<br> 锁的角色；</li><li>Segment 是一种可重入的锁 ReentrantLock，每个 Segment 守护一个HashEntry 数组里得元<br> 素，当对 HashEntry 数组的数据进行修改时，必须首先获得对应的 Segment 锁。</li></ol><p><strong>JDK1.8</strong></p><ul><li>在JDK1.8中，放弃了Segment臃肿的设计，取而代之的是采用Node + CAS + Synchronized来保<br> 证并发安全进行实现，synchronized只锁定当前链表或红黑二叉树的首节点，这样只要hash不冲<br> 突，就不会产生并发，效率又提升N倍。</li><li>结构如下：<br><img src="https://img-blog.csdnimg.cn/fb520015f5764c079212743b2e30338d.png" alt="在这里插入图片描述" loading="lazy"></li><li>附加源码，有需要的可以看看</li><li>插入元素过程（建议去看看源码）：</li><li>如果相应位置的Node还没有初始化，则调用CAS插入相应的数据；</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">casTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// no lock when adding to empty bin</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果相应位置的Node不为空，且当前该节点不处于移动状态，则对该节点加synchronized锁，如<br> 果该节点的hash不小于0，则遍历链表更新节点或插入新节点；</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>fh <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	binCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e <span class="token operator">=</span> f<span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">K</span> ek<span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>ek <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			oldVal <span class="token operator">=</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent<span class="token punctuation">)</span>
			e<span class="token punctuation">.</span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> pred <span class="token operator">=</span> e<span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			pred<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>如果该节点是TreeBin类型的节点，说明是红黑树结构，则通过putTreeVal方法往红黑树中插入节<br> 点；如果binCount不为0，说明put操作对数据产生了影响，如果当前链表的个数达到8个，则通<br> 过treeifyBin方法转化为红黑树，如果oldVal不为空，说明是一次更新操作，没有对元素个数产生<br> 影响，则直接返回旧值；</li><li>如果插入的是一个新节点，则执行addCount()方法尝试更新元素个数baseCount；</li></ol><h2 id="四、辅助工具类" tabindex="-1"><a class="header-anchor" href="#四、辅助工具类" aria-hidden="true">#</a> 四、辅助工具类</h2><h2 id="_46-array-和-arraylist-有何区别" tabindex="-1"><a class="header-anchor" href="#_46-array-和-arraylist-有何区别" aria-hidden="true">#</a> 46. Array 和 ArrayList 有何区别？</h2><ul><li>Array 可以存储基本数据类型和对象，ArrayList 只能存储对象。</li><li>Array 是指定固定大小的，而 ArrayList 大小是自动扩展的。</li><li>Array 内置方法没有 ArrayList 多，比如 addAll、removeAll、iteration 等方法只有 ArrayList有。<br><code>对于基本类型数据，集合使用自动装箱来减少编码工作量。但是，当处理固定大小的基本数据类型的时候，这种方式相对比较慢。</code></li></ul><h2 id="_47-如何实现-array-和-list-之间的转换" tabindex="-1"><a class="header-anchor" href="#_47-如何实现-array-和-list-之间的转换" aria-hidden="true">#</a> 47. 如何实现 Array 和 List 之间的转换？</h2><ul><li>Array 转 List： Arrays. asList(array) ；</li><li>List 转 Array：List 的 toArray() 方法。</li></ul><h2 id="_48-comparable-和-comparator的区别" tabindex="-1"><a class="header-anchor" href="#_48-comparable-和-comparator的区别" aria-hidden="true">#</a> 48. comparable 和 comparator的区别？</h2><ul><li>comparable接口实际上是出自java.lang包，它有一个 compareTo(Object obj)方法用来排序</li><li>comparator接口实际上是出自 java.util 包，它有一个compare(Object obj1, Object obj2)方法用来排序</li><li>一般我们需要对一个集合使用自定义排序时，我们就要重写compareTo方法或compare方法，当我们需要对某一个集合实现两种排序方式，比如一个song对象中的歌名和歌手名分别采用一种排序方法的话，我们可以重写compareTo方法和使用自制的Comparator方法或者以两个Comparator来实现歌名排序和歌星名排序，第二种代表我们只能使用两个参数版的Collections.sort().</li></ul><h2 id="_49-collection-和-collections-有什么区别" tabindex="-1"><a class="header-anchor" href="#_49-collection-和-collections-有什么区别" aria-hidden="true">#</a> 49. Collection 和 Collections 有什么区别？</h2><ul><li>java.util.Collection 是一个集合接口（集合类的一个顶级接口）。它提供了对集合对象进行基本操<br> 作的通用接口方法。Collection接口在Java 类库中有很多具体的实现。Collection接口的意义是为<br> 各种具体的集合提供了最大化的统一操作方式，其直接继承接口有List与Set。</li><li>Collections则是集合类的一个工具类/帮助类，其中提供了一系列静态方法，用于对集合中元素进<br> 行排序、搜索以及线程安全等各种操作。</li></ul><h2 id="_50-treemap-和-treeset-在排序时如何比较元素-collections-工具类中的-sort-方法如何比较元素" tabindex="-1"><a class="header-anchor" href="#_50-treemap-和-treeset-在排序时如何比较元素-collections-工具类中的-sort-方法如何比较元素" aria-hidden="true">#</a> 50. TreeMap 和 TreeSet 在排序时如何比较元素？Collections 工具类中的 sort()方法如何比较元素？</h2><ul><li>TreeSet 要求存放的对象所属的类必须实现 Comparable 接口，该接口提供了比较元素的<br> compareTo()方法，当插入元素时会回调该方法比较元素的大小。TreeMap 要求存放的键值对映<br> 射的键必须实现 Comparable 接口从而根据键对元素进 行排 序。</li><li>Collections 工具类的 sort 方法有两种重载的形式，</li><li>第一种要求传入的待排序容器中存放的对象比较实现 Comparable 接口以实现元素的比较；</li><li>comparable接口实际上是出自java.lang包，它有一个 compareTo(Object obj)方法用来排序</li><li>comparator接口实际上是出自 java.util 包，它有一个compare(Object obj1, Object obj2)方法用来排序</li><li>一般我们需要对一个集合使用自定义排序时，我们就要重写compareTo方法或compare方法，当我们需要对某一个集合实现两种排序方式，比如一个song对象中的歌名和歌手名分别采用一种排序方法的话，我们可以重写compareTo方法和使用自制的Comparator方法或者以两个Comparator来实现歌名排序和歌星名排序，第二种代表我们只能使用两个参数版的Collections.sort().</li></ul><h2 id="_51-collection-和-collections-有什么区别" tabindex="-1"><a class="header-anchor" href="#_51-collection-和-collections-有什么区别" aria-hidden="true">#</a> 51. Collection 和 Collections 有什么区别？</h2><ul><li>java.util.Collection 是一个集合接口（集合类的一个顶级接口）。它提供了对集合对象进行基本操<br> 作的通用接口方法。Collection接口在Java 类库中有很多具体的实现。Collection接口的意义是为<br> 各种具体的集合提供了最大化的统一操作方式，其直接继承接口有List与Set。</li><li>Collections则是集合类的一个工具类/帮助类，其中提供了一系列静态方法，用于对集合中元素进<br> 行排序、搜索以及线程安全等各种操作。</li></ul><h2 id="_52-treemap-和-treeset-在排序时如何比较元素-collections-工具类中的-sort-方法如何比较元素" tabindex="-1"><a class="header-anchor" href="#_52-treemap-和-treeset-在排序时如何比较元素-collections-工具类中的-sort-方法如何比较元素" aria-hidden="true">#</a> 52. TreeMap 和 TreeSet 在排序时如何比较元素？Collections 工具类中的 sort()方法如何比较元素？</h2><ul><li>TreeSet 要求存放的对象所属的类必须实现 Comparable 接口，该接口提供了比较元素的compareTo()方法，当插入元素时会回调该方法比较元素的大小。TreeMap 要求存放的键值对映射的键必须实现 Comparable 接口从而根据键对元素进 行排 序。</li><li>Collections 工具类的 sort 方法有两种重载的形式，</li><li>第一种要求传入的待排序容器中存放的对象比较实现 Comparable 接口以实现元素的比较；</li><li>第二种不强制性的要求容器中的元素必须可比较，但是要求传入第二个参数，参数是Comparator接口的子类型（需要重写 compare 方法实现元素的比较），相当于一个临时定义的排序规则，其实就是通过接口注入比较元素大小的算法，也是对回调模式的应用（Java 中对函数式编程的支持）。</li></ul><hr><p><strong>史上最全Java面试宝典，BAT大厂面试必备。整理不易，建议先关注点赞加收藏</strong></p>`,165),u=a("thead",null,[a("tr",null,[a("th",null,"序号"),a("th",null,"名称"),a("th",null,"地址")])],-1),d=a("td",null,"1",-1),k=a("td",null,"Java基础面试题（91道含答案）",-1),h={href:"https://blog.csdn.net/qq_30999361/article/details/124482581",target:"_blank",rel:"noopener noreferrer"},b=a("td",null,"2",-1),m=a("td",null,"Java并发编程面试题 （123道含答案）",-1),v={href:"https://blog.csdn.net/qq_30999361/article/details/124545403",target:"_blank",rel:"noopener noreferrer"},_=a("td",null,"3",-1),y=a("td",null,"Java异常面试题 （33道含答案）",-1),f={href:"https://blog.csdn.net/qq_30999361/article/details/124560006",target:"_blank",rel:"noopener noreferrer"},g=a("td",null,"4",-1),H=a("td",null,"Java虚拟机（JVM）面试题（51道含答案）",-1),L={href:"https://blog.csdn.net/qq_30999361/article/details/124532763",target:"_blank",rel:"noopener noreferrer"},M=a("td",null,"5",-1),C=a("td",null,"Java集合面试题（52道含答案）",-1),S={href:"https://blog.csdn.net/qq_30999361/article/details/124503952",target:"_blank",rel:"noopener noreferrer"},w=a("td",null,"6",-1),A=a("td",null,"Linux面试题（50道含答案）",-1),x={href:"https://blog.csdn.net/qq_30999361/article/details/124575798",target:"_blank",rel:"noopener noreferrer"},j=a("td",null,"7",-1),q=a("td",null,"Memcache面试题（23道含答案）",-1),T={href:"https://blog.csdn.net/qq_30999361/article/details/124596870",target:"_blank",rel:"noopener noreferrer"},I=a("td",null,"8",-1),V=a("td",null,"Mybatiss面试题 （37道含答案）",-1),J={href:"https://blog.csdn.net/qq_30999361/article/details/124560907",target:"_blank",rel:"noopener noreferrer"},K=a("td",null,"9",-1),E=a("td",null,"MySQL面试题（40道含答案）",-1),N={href:"https://blog.csdn.net/qq_30999361/article/details/124506169",target:"_blank",rel:"noopener noreferrer"},z=a("td",null,"10",-1),D=a("td",null,"Netty面试题（49道含答案）",-1),O={href:"https://blog.csdn.net/qq_30999361/article/details/124617122",target:"_blank",rel:"noopener noreferrer"},R=a("td",null,"11",-1),B=a("td",null,"Nginx面试题（23道含答案）",-1),P={href:"https://blog.csdn.net/qq_30999361/article/details/124597174",target:"_blank",rel:"noopener noreferrer"},W=a("td",null,"12",-1),Q=a("td",null,"RabbitMQ面试题（22道含答案）",-1),U={href:"https://blog.csdn.net/qq_30999361/article/details/124533998",target:"_blank",rel:"noopener noreferrer"},F=a("td",null,"13",-1),Y=a("td",null,"Redis面试题（70道含答案）",-1),Z={href:"https://blog.csdn.net/qq_30999361/article/details/124459566",target:"_blank",rel:"noopener noreferrer"},G=a("td",null,"14",-1),$=a("td",null,"SpringBoot面试题（44道含答案）",-1),X={href:"https://blog.csdn.net/qq_30999361/article/details/124461725",target:"_blank",rel:"noopener noreferrer"},aa=a("td",null,"15",-1),na=a("td",null,"SpringCloud面试题（49道含答案）",-1),sa={href:"https://blog.csdn.net/qq_30999361/article/details/124430712",target:"_blank",rel:"noopener noreferrer"},ta=a("td",null,"16",-1),ea=a("td",null,"SpringMVC面试题（29道含答案）",-1),la={href:"https://blog.csdn.net/qq_30999361/article/details/124519135",target:"_blank",rel:"noopener noreferrer"},pa=a("td",null,"17",-1),oa=a("td",null,"Spring面试题（75道含答案）",-1),ia={href:"https://blog.csdn.net/qq_30999361/article/details/124519472",target:"_blank",rel:"noopener noreferrer"},ca=a("td",null,"18",-1),ra=a("td",null,"TCP、UDP、Socket、Http网络编程面试题（47道含答案）",-1),ua={href:"https://blog.csdn.net/qq_30999361/article/details/124617792",target:"_blank",rel:"noopener noreferrer"},da=a("td",null,"19",-1),ka=a("td",null,"Tomcat面试题（15道含答案）",-1),ha={href:"https://blog.csdn.net/qq_30999361/article/details/124576964",target:"_blank",rel:"noopener noreferrer"},ba=a("td",null,"20",-1),ma=a("td",null,"Zookeeper面试题（28道含答案）",-1),va={href:"https://blog.csdn.net/qq_30999361/article/details/124596208",target:"_blank",rel:"noopener noreferrer"},_a=a("td",null,"21",-1),ya=a("td",null,"多线程面试题（60道含答案）",-1),fa={href:"https://blog.csdn.net/qq_30999361/article/details/124596462",target:"_blank",rel:"noopener noreferrer"},ga=a("td",null,"22",-1),Ha=a("td",null,"设计模式面试题（14道含答案）",-1),La={href:"https://blog.csdn.net/qq_30999361/article/details/124637874",target:"_blank",rel:"noopener noreferrer"},Ma=a("td",null,"23",-1),Ca=a("td",null,"BIO、NIO、AIO、Netty面试题（35道含答案）",-1),Sa={href:"https://blog.csdn.net/qq_30999361/article/details/124653616",target:"_blank",rel:"noopener noreferrer"},wa=a("td",null,"24",-1),Aa=a("td",null,"Dubbo面试题（47道含答案）",-1),xa={href:"https://blog.csdn.net/qq_30999361/article/details/124637288",target:"_blank",rel:"noopener noreferrer"},ja=a("td",null,"25",-1),qa=a("td",null,"ElasticSearch面试题（31道含答案）",-1),Ta={href:"https://blog.csdn.net/qq_30999361/article/details/124619240",target:"_blank",rel:"noopener noreferrer"},Ia=a("td",null,"26",-1),Va=a("td",null,"Git常用命令（63条）",-1),Ja={href:"https://blog.csdn.net/qq_30999361/article/details/124438420",target:"_blank",rel:"noopener noreferrer"};function Ka(Ea,Na){const n=l("ExternalLinkIcon");return p(),o("div",null,[r,a("table",null,[u,a("tbody",null,[a("tr",null,[d,k,a("td",null,[a("a",h,[s("（点击查看）"),t(n)])])]),a("tr",null,[b,m,a("td",null,[a("a",v,[s("（点击查看）"),t(n)])])]),a("tr",null,[_,y,a("td",null,[a("a",f,[s("（点击查看）"),t(n)])])]),a("tr",null,[g,H,a("td",null,[a("a",L,[s("（点击查看）"),t(n)])])]),a("tr",null,[M,C,a("td",null,[a("a",S,[s("（点击查看）"),t(n)])])]),a("tr",null,[w,A,a("td",null,[a("a",x,[s("（点击查看）"),t(n)])])]),a("tr",null,[j,q,a("td",null,[a("a",T,[s("（点击查看）"),t(n)])])]),a("tr",null,[I,V,a("td",null,[a("a",J,[s("（点击查看）"),t(n)])])]),a("tr",null,[K,E,a("td",null,[a("a",N,[s("（点击查看）"),t(n)])])]),a("tr",null,[z,D,a("td",null,[a("a",O,[s("（点击查看）"),t(n)])])]),a("tr",null,[R,B,a("td",null,[a("a",P,[s("（点击查看）"),t(n)])])]),a("tr",null,[W,Q,a("td",null,[a("a",U,[s("（点击查看）"),t(n)])])]),a("tr",null,[F,Y,a("td",null,[a("a",Z,[s("（点击查看）"),t(n)])])]),a("tr",null,[G,$,a("td",null,[a("a",X,[s("（点击查看）"),t(n)])])]),a("tr",null,[aa,na,a("td",null,[a("a",sa,[s("（点击查看）"),t(n)])])]),a("tr",null,[ta,ea,a("td",null,[a("a",la,[s("（点击查看）"),t(n)])])]),a("tr",null,[pa,oa,a("td",null,[a("a",ia,[s("（点击查看）"),t(n)])])]),a("tr",null,[ca,ra,a("td",null,[a("a",ua,[s("（点击查看）"),t(n)])])]),a("tr",null,[da,ka,a("td",null,[a("a",ha,[s("（点击查看）"),t(n)])])]),a("tr",null,[ba,ma,a("td",null,[a("a",va,[s("（点击查看）"),t(n)])])]),a("tr",null,[_a,ya,a("td",null,[a("a",fa,[s("（点击查看）"),t(n)])])]),a("tr",null,[ga,Ha,a("td",null,[a("a",La,[s("（点击查看）"),t(n)])])]),a("tr",null,[Ma,Ca,a("td",null,[a("a",Sa,[s("（点击查看）"),t(n)])])]),a("tr",null,[wa,Aa,a("td",null,[a("a",xa,[s("（点击查看）"),t(n)])])]),a("tr",null,[ja,qa,a("td",null,[a("a",Ta,[s("（点击查看）"),t(n)])])]),a("tr",null,[Ia,Va,a("td",null,[a("a",Ja,[s("（点击查看）"),t(n)])])])])])])}const Da=e(c,[["render",Ka],["__file","Java集合面试题（52道含答案）.html.vue"]]);export{Da as default};
