import{_ as e,E as l,Z as o,$ as i,a0 as n,a3 as s,a1 as t,a4 as p}from"./framework-e0d053a9.js";const c={},r=p(`<h3 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h3><ul><li><a href="#1__2">1. 什么是网络编程</a></li><li><a href="#2__13">2. 网络编程中两个主要的问题</a></li><li><a href="#3__25">3. 网络协议是什么</a></li><li><a href="#4__29">4. 为什么要对网络协议分层</a></li><li><a href="#5__35">5. 计算机网络体系结构</a></li><li><ul><li><a href="#1_TCP__UDP_59">1 TCP / UDP</a></li><li><ul><li><a href="#11_TCPIPUDP_60">1.1 什么是TCP/IP和UDP</a></li><li><a href="#12_TCPUDP_67">1.2 TCP与UDP区别：</a></li><li><a href="#13_TCPUDP_79">1.3 TCP和UDP的应用场景：</a></li><li><a href="#14_TCPUDP_84">1.4 形容一下TCP和UDP</a></li><li><a href="#15_TCP_UDP_92">1.5 运行在TCP 或UDP的应用层协议分析。</a></li><li><a href="#16_ARP_Address_Resolution_Protocol_112">1.6 什么是ARP协议 (Address Resolution Protocol)？</a></li><li><a href="#17_NAT_Network_Address_Translation__125">1.7 什么是NAT (Network Address Translation, 网络地址转换)？</a></li><li><a href="#18__129">1.8 从输入址到获得页面的过程?</a></li><li><a href="#19_TCP_144">1.9 TCP的三次握手</a></li><li><ul><li><a href="#191_TCP_145">1.9.1 什么是TCP的三次握手</a></li><li><a href="#192__149">1.9.2 三次握手的具体细节</a></li><li><a href="#193__165">1.9.3 用现实理解三次握手的具体细节</a></li><li><a href="#194__174">1.9.4 建立连接可以两次握手吗？为什么?</a></li><li><a href="#195__188">1.9.5 可以采用四次握手吗？为什么？</a></li><li><a href="#196_ACK_191">1.9.6 第三次握手中，如果客户端的ACK未送达服务器，会怎样？</a></li><li><a href="#197__199">1.9.7 如果已经建立了连接，但客户端出现了故障怎么办？</a></li><li><a href="#198__204">1.9.8 初始序列号是什么？</a></li></ul></li><li><a href="#110_TCP_212">1.10 TCP的四次挥手</a></li><li><ul><li><a href="#1101_TCP_213">1.10.1 什么是TCP的四次挥手</a></li><li><a href="#1102__216">1.10.2 四次挥手的具体细节</a></li><li><a href="#1103_TCP_227">1.10.3 用现实理解三次握手的具体细节TCP的四次挥手</a></li><li><a href="#1104_ACKFINCLOSE_WAIT_235">1.10.4 为什么不能把服务器发送的ACK和FIN合并起来，变成三次挥手（CLOSE_WAIT状态意义是什么）？</a></li><li><a href="#1105_ACK_239">1.10.5 如果第二次挥手时服务器的ACK没有送达客户端，会怎样？</a></li><li><a href="#1106_TIME_WAIT_242">1.10.6 客户端TIME_WAIT状态的意义是什么？</a></li></ul></li></ul></li><li><a href="#2_Socket_250">2 Socket</a></li><li><ul><li><a href="#1_Socket_251">1 什么是Socket</a></li><li><a href="#2_socket_261">2 socket属于网络的那个层面</a></li><li><a href="#3_Socket_267">3 Socket通讯的过程</a></li><li><a href="#4_TCPSocket_277">4 TCP协议Socket代码示例：</a></li><li><a href="#5_UDPSocket_350">5 UDP协议Socket代码示例：</a></li><li><a href="#6_Socket_405">6 Socket的常用类</a></li></ul></li><li><a href="#3_HTTP_415">3. HTTP</a></li><li><ul><li><a href="#1_Http_416">1. 什么是Http协议？</a></li><li><a href="#2_Sockethttp_421">2. Socket和http的区别和应用场景</a></li><li><a href="#3_http_428">3. 什么是http的请求体？</a></li><li><a href="#4_http_436">4. http的响应报文有哪些？</a></li><li><a href="#5_httphttps_440">5. http和https的区别？</a></li><li><a href="#6_HTTPS_449">6. HTTPS工作原理</a></li><li><a href="#7_HTTP_458">7. 一次完整的HTTP请求所经历几个步骤?</a></li><li><a href="#8_HTTP_479">8. 常用HTTP状态码是怎么分类的，有哪些常见的状态码？</a></li><li><a href="#9_Http_509">9. Http协议中有那些请求方式</a></li><li><a href="#10_GETPOST_521">10. GET方法与POST方法的区别</a></li><li><a href="#11_http_528">11. http版本的对比</a></li><li><a href="#12__548">12. 什么是对称加密与非对称加密</a></li><li><a href="#13_cookiesessionHTTP_556">13. cookie和session对于HTTP有什么用？</a></li><li><a href="#14_cookie_559">14. 什么是cookie</a></li><li><a href="#15_session_563">15. 什么是session</a></li></ul></li></ul></li></ul><h2 id="_1-什么是网络编程" tabindex="-1"><a class="header-anchor" href="#_1-什么是网络编程" aria-hidden="true">#</a> 1. 什么是网络编程</h2><ul><li>网络编程的本质是多台计算机之间的数据交换。数据传递本身没有多大的难度，不就是把一个设备<br> 中的数据发送给其他设备，然后接受另外一个设备反馈的数据。现在的网络编程基本上都是基于请<br> 求/响应方式的，也就是一个设备发送请求数据给另外一个，然后接收另一个设备的反馈。在网络<br> 编程中，发起连接程序，也就是发送第一次请求的程序，被称作客户端(Client)，等待其他程序连<br> 接的程序被称作服务器(Server)。客户端程序可以在需要的时候启动，而服务器为了能够时刻相应<br> 连接，则需要一直启动。</li><li>例如以打电话为例，首先拨号的人类似于客户端，接听电话的人必须保持电话畅通类似于服务器。<br> 连接一旦建立以后，就客户端和服务器端就可以进行数据传递了，而且两者的身份是等价的。在一<br> 些程序中，程序既有客户端功能也有服务器端功能，最常见的软件就是QQ、微信这类软件了。</li></ul><h2 id="_2-网络编程中两个主要的问题" tabindex="-1"><a class="header-anchor" href="#_2-网络编程中两个主要的问题" aria-hidden="true">#</a> 2. 网络编程中两个主要的问题</h2><ol><li>一个是如何准确的定位网络上一台或多台主机，</li><li>另一个就是找到主机后如何可靠高效的进行数据传输。</li></ol><ul><li>在TCP/IP协议中IP层主要负责网络主机的定位，数据传输的路由，由IP地址可以唯一地确定<br> Internet上的一台主机。</li><li>而TCP层则提供面向应用的可靠（TCP）的或非可靠（UDP）的数据传输机制，这是网络编程的主<br> 要对象，一般不需要关心IP层是如何处理数据的。</li><li>目前较为流行的网络编程模型是客户机/服务器（C/S）结构。即通信双方一方作为服务器等待客户<br> 提出请求并予以响应。客户则在需要服务时向服务器提 出申请。服务器一般作为守护进程始终运<br> 行，监听网络端口，一旦有客户请求，就会启动一个服务进程来响应该客户，同时自己继续监听服<br> 务端口，使后来的客户也 能及时得到服务。</li></ul><h2 id="_3-网络协议是什么" tabindex="-1"><a class="header-anchor" href="#_3-网络协议是什么" aria-hidden="true">#</a> 3. 网络协议是什么</h2><ul><li>在计算机网络要做到井井有条的交换数据，就必须遵守一些事先约定好的规则，比如交换数据的格<br> 式、是否需要发送一个应答信息。这些规则被称为网络协议。</li></ul><h2 id="_4-为什么要对网络协议分层" tabindex="-1"><a class="header-anchor" href="#_4-为什么要对网络协议分层" aria-hidden="true">#</a> 4. 为什么要对网络协议分层</h2><ul><li>简化问题难度和复杂度。由于各层之间独立，我们可以分割大问题为小问题。</li><li>灵活性好。当其中一层的技术变化时，只要层间接口关系保持不变，其他层不受影响。</li><li>易于实现和维护。</li><li>促进标准化工作。分开后，每层功能可以相对简单地被描述</li></ul><h2 id="_5-计算机网络体系结构" tabindex="-1"><a class="header-anchor" href="#_5-计算机网络体系结构" aria-hidden="true">#</a> 5. 计算机网络体系结构</h2><figure><img src="https://img-blog.csdnimg.cn/fcfe1c9f2581472daefd062dcf8f802b.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><ul><li>OSI参考模型 <ul><li>OSI（Open System Interconnect），即开放式系统互联。一般都叫OSI参考模型，是<br> ISO（国际标准化组织）组织在1985年研究的网络互连模型。ISO为了更好的使网络应用更为<br> 普及，推出了OSI参考模型，这样所有的公司都按照统一的标准来指定自己的网络，就可以互<br> 通互联了。</li><li>OSI定义了网络互连的七层框架（物理层、数据链路层、网络层、传输层、会话层、表示层、<br> 应用层）。<br><img src="https://img-blog.csdnimg.cn/40946504405b4d0e9beafdf420dc4444.png" alt="在这里插入图片描述" loading="lazy"></li></ul></li><li><strong>TCP/IP参考模型</strong></li><li>TCP/IP四层协议（数据链路层、网络层、传输层、应用层）</li></ul><ol><li>应用层 应用层最靠近用户的一层，是为计算机用户提供应用接口，也为用户直接提供各种网<br> 络服务。我们常见应用层的网络服务协议有：HTTP，HTTPS，FTP，TELNET等。</li><li>传输层 建立了主机端到端的链接，传输层的作用是为上层协议提供端到端的可靠和透明的数<br> 据传输服务，包括处理差错控制和流量控制等问题。该层向高层屏蔽了下层数据通信的细<br> 节，使高层用户看到的只是在两个传输实体间的一条主机到主机的、可由用户控制和设定<br> 的、可靠的数据通路。我们通常说的，TCP UDP就是在这一层。端口号既是这里的“端”。</li><li>网络层 本层通过IP寻址来建立两个节点之间的连接，为源端的运输层送来的分组，选择合适<br> 的路由和交换节点，正确无误地按照地址传送给目的端的运输层。就是通常说的IP层。这一<br> 层就是我们经常说的IP协议层。IP协议是Internet的基础。</li><li>数据链路层 通过一些规程或协议来控制这些数据的传输，以保证被传输数据的正确性。实现<br> 这些规程或协议的 硬件 和软件加到物理线路，这样就构成了数据链路。</li></ol><h2 id="_1-tcp-udp" tabindex="-1"><a class="header-anchor" href="#_1-tcp-udp" aria-hidden="true">#</a> 1 TCP / UDP</h2><h3 id="_1-1-什么是tcp-ip和udp" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是tcp-ip和udp" aria-hidden="true">#</a> 1.1 什么是TCP/IP和UDP</h3><ul><li>TCP/IP即传输控制/网络协议，是面向连接的协议，发送数据前要先建立连接(发送方和接收方的成<br> 对的两个之间必须建 立连接)，TCP提供可靠的服务，也就是说，通过TCP连接传输的数据不会丢<br> 失，没有重复，并且按顺序到达</li><li>UDP它是属于TCP/IP协议族中的一种。是无连接的协议，发送数据前不需要建立连接，是没有可<br> 靠性的协议。因为不需要建立连接所以可以在在网络上以任何可能的路径传输，因此能否到达目的<br> 地，到达目的地的时间以及内容的正确性都是不能被保证的。</li></ul><h3 id="_1-2-tcp与udp区别" tabindex="-1"><a class="header-anchor" href="#_1-2-tcp与udp区别" aria-hidden="true">#</a> 1.2 TCP与UDP区别：</h3><ul><li>TCP是面向连接的协议，发送数据前要先建立连接，TCP提供可靠的服务，也就是说，通过TCP连<br> 接传输的数据不会丢失，没有重复，并且按顺序到达；</li><li>UDP是无连接的协议，发送数据前不需要建立连接，是没有可靠性；</li><li>TCP通信类似于于要打个电话，接通了，确认身份后，才开始进行通行；</li><li>UDP通信类似于学校广播，靠着广播播报直接进行通信。</li><li>TCP只支持点对点通信，UDP支持一对一、一对多、多对一、多对多；</li><li>TCP是面向字节流的，UDP是面向报文的； 面向字节流是指发送数据时以字节为单位，一个数据<br> 包可以拆分成若干组进行发送，而UDP一个报文只能一次发完。</li><li>TCP首部开销（20字节）比UDP首部开销（8字节）要大</li><li>UDP 的主机不需要维持复杂的连接状态表</li></ul><h3 id="_1-3-tcp和udp的应用场景" tabindex="-1"><a class="header-anchor" href="#_1-3-tcp和udp的应用场景" aria-hidden="true">#</a> 1.3 TCP和UDP的应用场景：</h3><ul><li>对某些实时性要求比较高的情况使用UDP，比如游戏，媒体通信，实时直播，即使出现传输错误<br> 也可以容忍；其它大部分情况下，HTTP都是用TCP，因为要求传输的内容可靠，不出现丢失的情<br> 况</li></ul><h3 id="_1-4-形容一下tcp和udp" tabindex="-1"><a class="header-anchor" href="#_1-4-形容一下tcp和udp" aria-hidden="true">#</a> 1.4 形容一下TCP和UDP</h3><ul><li><strong>TCP通信可看作打电话：</strong><br> 李三(拨了个号码)：喂，是王五吗？ 王五：哎，您谁啊？ 李三：我是李三，我想给你说点事儿，<br> 你现在方便吗？ 王五：哦，我现在方便，你说吧。 甲：那我说了啊？ 乙：你说吧。 (连接建立<br> 了，接下来就是说正事了…)</li><li><strong>UDP通信可看为学校里的广播：</strong><br> 播音室：喂喂喂！全体操场集合</li></ul><h3 id="_1-5-运行在tcp-或udp的应用层协议分析。" tabindex="-1"><a class="header-anchor" href="#_1-5-运行在tcp-或udp的应用层协议分析。" aria-hidden="true">#</a> 1.5 运行在TCP 或UDP的应用层协议分析。</h3><ul><li><strong>运行在TCP协议上的协议：</strong><ul><li>HTTP（Hypertext Transfer Protocol，超文本传输协议），主要用于普通浏览。</li><li>HTTPS（HTTP over SSL，安全超文本传输协议）,HTTP协议的安全版本。</li><li>FTP（File Transfer Protocol，文件传输协议），用于文件传输。</li><li>POP3（Post Office Protocol, version 3，邮局协议），收邮件用。</li><li>SMTP（Simple Mail Transfer Protocol，简单邮件传输协议），用来发送电子邮件。</li><li>TELNET（Teletype over the Network，网络电传），通过一个终端（terminal）登陆到网络。</li><li>SSH（Secure Shell，用于替代安全性差的TELNET），用于加密安全登陆用。</li></ul></li><li><strong>运行在UDP协议上的协议：</strong><ul><li>BOOTP（Boot Protocol，启动协议），应用于无盘设备。</li><li>NTP（Network Time Protocol，网络时间协议），用于网络同步。</li><li>DHCP（Dynamic Host Configuration Protocol，动态主机配置协议），动态配置IP地址。</li></ul></li><li><strong>运行在TCP和UDP协议上：</strong><ul><li>DNS（Domain Name Service，域名服务），用于完成地址查找，邮件转发等工作。</li><li>ECHO（Echo Protocol，回绕协议），用于查错及测量应答时间（运行在TCP和UDP协议上）。</li><li>SNMP（Simple Network Management Protocol，简单网络管理协议），用于网络信息的收集和网络管理。</li><li>DHCP（Dynamic Host Configuration Protocol，动态主机配置协议），动态配置IP地址。</li><li>ARP（Address Resolution Protocol，地址解析协议），用于动态解析以太网硬件的地址。</li></ul></li></ul><h3 id="_1-6-什么是arp协议-address-resolution-protocol" tabindex="-1"><a class="header-anchor" href="#_1-6-什么是arp协议-address-resolution-protocol" aria-hidden="true">#</a> 1.6 什么是ARP协议 (Address Resolution Protocol)？</h3><ul><li><strong>ARP协议完成了IP地址与物理地址的映射</strong>。每一个主机都设有一个 ARP 高速缓存，里面有所在的<br><strong>局域网</strong>上的各主机和路由器的 IP 地址到硬件地址的映射表。当源主机要发送数据包到目的主机<br> 时，会先检查自己的ARP高速缓存中有没有目的主机的MAC地址，如果有，就直接将数据包发到这<br> 个MAC地址，如果没有，就向<strong>所在的局域网</strong>发起一个ARP请求的广播包（在发送自己的 ARP 请求<br> 时，同时会带上自己的 IP 地址到硬件地址的映射），收到请求的主机检查自己的IP地址和目的主<br> 机的IP地址是否一致，如果一致，则先保存源主机的映射到自己的ARP缓存，然后给源主机发送一<br> 个ARP响应数据包。源主机收到响应数据包之后，先添加目的主机的IP地址与MAC地址的映射，再<br> 进行数据传送。如果源主机一直没有收到响应，表示ARP查询失败。</li><li>如果所要找的主机和源主机不在同一个局域网上，那么就要通过 ARP 找到一个位于本局域网上的<br> 某个路由器的硬件地址，然后把分组发送给这个路由器，让这个路由器把分组转发给下一个网络。<br> 剩下的工作就由下一个网络来做。</li></ul><h3 id="_1-7-什么是nat-network-address-translation-网络地址转换" tabindex="-1"><a class="header-anchor" href="#_1-7-什么是nat-network-address-translation-网络地址转换" aria-hidden="true">#</a> 1.7 什么是NAT (Network Address Translation, 网络地址转换)？</h3><ul><li>用于解决内网中的主机要和因特网上的主机通信。由NAT路由器将主机的本地IP地址转换为全球IP<br> 地址，分为静态转换（转换得到的全球IP地址固定不变）和动态NAT转换。</li></ul><h3 id="_1-8-从输入址到获得页面的过程" tabindex="-1"><a class="header-anchor" href="#_1-8-从输入址到获得页面的过程" aria-hidden="true">#</a> 1.8 从输入址到获得页面的过程?</h3><ol><li>浏览器查询 DNS，获取域名对应的IP地址:具体过程包括浏览器搜索自身的DNS缓存、搜索操作系<br> 统的DNS缓存、读取本地的Host文件和向本地DNS服务器进行查询等。对于向本地DNS服务器进<br> 行查询，如果要查询的域名包含在本地配置区域资源中，则返回解析结果给客户机，完成域名解析<br> (此解析具有权威性)；如果要查询的域名不由本地DNS服务器区域解析，但该服务器已缓存了此网<br> 址映射关系，则调用这个IP地址映射，完成域名解析（此解析不具有权威性）。如果本地域名服务<br> 器并未缓存该网址映射关系，那么将根据其设置发起递归查询或者迭代查询；</li><li>浏览器获得域名对应的IP地址以后，浏览器向服务器请求建立链接，发起三次握手；</li><li>TCP/IP链接建立起来后，浏览器向服务器发送HTTP请求；</li><li>服务器接收到这个请求，并根据路径参数映射到特定的请求处理器进行处理，并将处理结果及相应<br> 的视图返回给浏览器；</li><li>浏览器解析并渲染视图，若遇到对js文件、css文件及图片等静态资源的引用，则重复上述步骤并<br> 向服务器请求这些资源；</li><li>浏览器根据其请求到的资源、数据渲染页面，最终向用户呈现一个完整的页面。</li></ol><h3 id="_1-9-tcp的三次握手" tabindex="-1"><a class="header-anchor" href="#_1-9-tcp的三次握手" aria-hidden="true">#</a> 1.9 TCP的三次握手</h3><h4 id="_1-9-1-什么是tcp的三次握手" tabindex="-1"><a class="header-anchor" href="#_1-9-1-什么是tcp的三次握手" aria-hidden="true">#</a> 1.9.1 什么是TCP的三次握手</h4><ul><li>在网络数据传输中，传输层协议TCP是要建立连接的可靠传输，TCP建立连接的过程，我们称为三<br> 次握手。</li></ul><h4 id="_1-9-2-三次握手的具体细节" tabindex="-1"><a class="header-anchor" href="#_1-9-2-三次握手的具体细节" aria-hidden="true">#</a> 1.9.2 三次握手的具体细节</h4><figure><img src="https://img-blog.csdnimg.cn/3b81a7c9d77645ed9834350fcc1dae94.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><ol><li>第一次握手：Client将SYN置1，随机产生一个初始序列号seq发送给Server，进入SYN_SENT状<br> 态；</li><li>第二次握手：Server收到Client的SYN=1之后，知道客户端请求建立连接，将自己的SYN置1，ACK<br> 置1，产生一个acknowledge number=sequence number+1，并随机产生一个自己的初始序列<br> 号，发送给客户端；进入SYN_RCVD状态；</li><li>第三次握手：客户端检查acknowledge number是否为序列号+1，ACK是否为1，检查正确之后将<br> 自己的ACK置为1，产生一个acknowledge number=服务器发的序列号+1，发送给服务器；进入<br> ESTABLISHED状态；服务器检查ACK为1和acknowledge number为序列号+1之后，也进入<br> ESTABLISHED状态；完成三次握手，连接建立。</li></ol><ul><li>简单来说就是 ：</li></ul><ol><li>客户端向服务端发送SYN</li><li>服务端返回SYN,ACK</li><li>客户端发送ACK</li></ol><h4 id="_1-9-3-用现实理解三次握手的具体细节" tabindex="-1"><a class="header-anchor" href="#_1-9-3-用现实理解三次握手的具体细节" aria-hidden="true">#</a> 1.9.3 用现实理解三次握手的具体细节</h4><ul><li>三次握手的目的是建立可靠的通信信道，主要的目的就是双方确认自己与对方的发送与接收机能正<br> 常。</li></ul><ol><li>第一次握手：客户什么都不能确认；服务器确认了对方发送正常</li><li>第二次握手：客户确认了：自己发送、接收正常，对方发送、接收正常；服务器确认 了：自己接<br> 收正常，对方发送正常</li><li>第三次握手：客户确认了：自己发送、接收正常，对方发送、接收正常；服务器确认 了：自己发<br> 送、接收正常，对方发送接收正常 所以三次握手就能确认双发收发功能都正常，缺一不可。</li></ol><h4 id="_1-9-4-建立连接可以两次握手吗-为什么" tabindex="-1"><a class="header-anchor" href="#_1-9-4-建立连接可以两次握手吗-为什么" aria-hidden="true">#</a> 1.9.4 建立连接可以两次握手吗？为什么?</h4><ul><li>不可以。</li><li>因为可能会出现已失效的连接请求报文段又传到了服务器端。 &gt; client 发出的第一个连接请求报文<br> 段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达<br> server。本来这是一个早已失效的报文段。但 server 收到此失效的连接请求报文段后，就误认为<br> 是 client 再次发出的一个新的连接请求。于是就向 client 发出确认报文段，同意建立连接。假设<br> 不采用 “三次握手”，那么只要 server 发出确认，新的连接就建立了。由于现在 client 并没有发出<br> 建立连接的请求，因此不会理睬 server 的确认，也不会向 server 发送数据。但 server 却以为新<br> 的运输连接已经建立，并一直等待 client 发来数据。这样，server 的很多资源就白白浪费掉了。<br> 采用 “三次握手” 的办法可以防止上述现象发生。例如刚才那种情况，client 不会向 server 的确认<br> 发出确认。server 由于收不到确认，就知道 client 并没有要求建立连接。</li><li>而且，两次握手无法保证Client正确接收第二次握手的报文（Server无法确认Client是否收到），<br> 也无法保证Client和Server之间成功互换初始序列号。</li></ul><h4 id="_1-9-5-可以采用四次握手吗-为什么" tabindex="-1"><a class="header-anchor" href="#_1-9-5-可以采用四次握手吗-为什么" aria-hidden="true">#</a> 1.9.5 可以采用四次握手吗？为什么？</h4><p>这个肯定可以。三次握手都可以保证连接成功了，何况是四次，但是会降低传输的效率。</p><h4 id="_1-9-6-第三次握手中-如果客户端的ack未送达服务器-会怎样" tabindex="-1"><a class="header-anchor" href="#_1-9-6-第三次握手中-如果客户端的ack未送达服务器-会怎样" aria-hidden="true">#</a> 1.9.6 第三次握手中，如果客户端的ACK未送达服务器，会怎样？</h4><ul><li>Server端：由于Server没有收到ACK确认，因此会每隔 3秒 重发之前的SYN+ACK（默认重发五<br> 次，之后自动关闭连接进入CLOSED状态），Client收到后会重新传ACK给Server。</li><li>Client端，会出现两种情况：</li></ul><ol><li>在Server进行超时重发的过程中，如果Client向服务器发送数据，数据头部的ACK是为1的，<br> 所以服务器收到数据之后会读取 ACK number，进入 establish 状态</li><li>在Server进入CLOSED状态之后，如果Client向服务器发送数据，服务器会以RST包应答。</li></ol><h4 id="_1-9-7-如果已经建立了连接-但客户端出现了故障怎么办" tabindex="-1"><a class="header-anchor" href="#_1-9-7-如果已经建立了连接-但客户端出现了故障怎么办" aria-hidden="true">#</a> 1.9.7 如果已经建立了连接，但客户端出现了故障怎么办？</h4><ul><li>服务器每收到一次客户端的请求后都会重新复位一个计时器，时间通常是设置为2小时，若两小时<br> 还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75秒钟发送一次。若<br> 一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。</li></ul><h4 id="_1-9-8-初始序列号是什么" tabindex="-1"><a class="header-anchor" href="#_1-9-8-初始序列号是什么" aria-hidden="true">#</a> 1.9.8 初始序列号是什么？</h4><ul><li>TCP连接的一方A，随机选择一个32位的序列号（Sequence Number）作为发送数据的初始序列<br> 号（Initial Sequence Number，ISN），比如为1000，以该序列号为原点，对要传送的数据进行<br> 编号：1001、1002…三次握手时，把这个初始序列号传送给另一方B，以便在传输数据时，B可以<br> 确认什么样的数据编号是合法的；同时在进行数据传输时，A还可以确认B收到的每一个字节，如<br> 果A收到了B的确认编号（acknowledge number）是2001，就说明编号为1001-2000的数据已经<br> 被B成功接受。</li></ul><h3 id="_1-10-tcp的四次挥手" tabindex="-1"><a class="header-anchor" href="#_1-10-tcp的四次挥手" aria-hidden="true">#</a> 1.10 TCP的四次挥手</h3><h4 id="_1-10-1-什么是tcp的四次挥手" tabindex="-1"><a class="header-anchor" href="#_1-10-1-什么是tcp的四次挥手" aria-hidden="true">#</a> 1.10.1 什么是TCP的四次挥手</h4><ul><li>在网络数据传输中，传输层协议断开连接的过程我们称为四次挥手</li></ul><h4 id="_1-10-2-四次挥手的具体细节" tabindex="-1"><a class="header-anchor" href="#_1-10-2-四次挥手的具体细节" aria-hidden="true">#</a> 1.10.2 四次挥手的具体细节</h4><figure><img src="https://img-blog.csdnimg.cn/d30a9787ef7445d8a98e3fe33ad6e96d.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><ol><li>第一次挥手：Client将FIN置为1，发送一个序列号seq给Server；进入FIN_WAIT_1状态；</li><li>第二次挥手：Server收到FIN之后，发送一个ACK=1，acknowledge number=收到的序列号+1；<br> 进入CLOSE_WAIT状态。此时客户端已经没有要发送的数据了，但仍可以接受服务器发来的数据。</li><li>第三次挥手：Server将FIN置1，发送一个序列号给Client；进入LAST_ACK状态；</li><li>第四次挥手：Client收到服务器的FIN后，进入TIME_WAIT状态；接着将ACK置1，发送一个<br> acknowledge number=序列号+1给服务器；服务器收到后，确认acknowledge number后，变为<br> CLOSED状态，不再向客户端发送数据。客户端等待2*MSL（报文段最长寿命）时间后，也进入<br> CLOSED状态。完成四次挥手。</li></ol><h4 id="_1-10-3-用现实理解三次握手的具体细节tcp的四次挥手" tabindex="-1"><a class="header-anchor" href="#_1-10-3-用现实理解三次握手的具体细节tcp的四次挥手" aria-hidden="true">#</a> 1.10.3 用现实理解三次握手的具体细节TCP的四次挥手</h4><ul><li>四次挥手断开连接是因为要确定数据全部传书完了</li></ul><ol><li>客户与服务器交谈结束之后，客户要结束此次会话，就会对服务器说：我要关闭连接了（第一 次<br> 挥手）</li><li>服务器收到客户的消息后说：好的，你要关闭连接了。（第二次挥手）</li><li>然后服务器确定了没有话要和客户说了，服务器就会对客户说，我要关闭连接了。(第三次挥 手)</li><li>客户收到服务器要结束连接的消息后说：已收到你要关闭连接的消息。(第四次挥手)，才关闭</li></ol><h4 id="_1-10-4-为什么不能把服务器发送的ack和fin合并起来-变成三次挥手-close-wait状态意义是什么" tabindex="-1"><a class="header-anchor" href="#_1-10-4-为什么不能把服务器发送的ack和fin合并起来-变成三次挥手-close-wait状态意义是什么" aria-hidden="true">#</a> 1.10.4 为什么不能把服务器发送的ACK和FIN合并起来，变成三次挥手（CLOSE_WAIT状态意义是什么）？</h4><ul><li>因为服务器收到客户端断开连接的请求时，可能还有一些数据没有发完，这时先回复ACK，表示接<br> 收到了断开连接的请求。等到数据发完之后再发FIN，断开服务器到客户端的数据传送。</li></ul><h4 id="_1-10-5-如果第二次挥手时服务器的ack没有送达客户端-会怎样" tabindex="-1"><a class="header-anchor" href="#_1-10-5-如果第二次挥手时服务器的ack没有送达客户端-会怎样" aria-hidden="true">#</a> 1.10.5 如果第二次挥手时服务器的ACK没有送达客户端，会怎样？</h4><ul><li>客户端没有收到ACK确认，会重新发送FIN请求。</li></ul><h4 id="_1-10-6-客户端time-wait状态的意义是什么" tabindex="-1"><a class="header-anchor" href="#_1-10-6-客户端time-wait状态的意义是什么" aria-hidden="true">#</a> 1.10.6 客户端TIME_WAIT状态的意义是什么？</h4><ul><li>第四次挥手时，客户端发送给服务器的ACK有可能丢失，TIME_WAIT状态就是用来重发可能丢失的<br> ACK报文。如果Server没有收到ACK，就会重发FIN，如果Client在2*MSL的时间内收到了FIN，就<br> 会重新发送ACK并再次等待2MSL，防止Server没有收到ACK而不断重发FIN。 MSL(Maximum<br> Segment Lifetime)，指一个片段在网络中最大的存活时间，2MSL就是一个发送和一个回复所需的<br> 最大时间。如果直到2MSL，Client都没有再次收到FIN，那么Client推断ACK已经被成功接收，则<br> 结束TCP连接。</li></ul><h2 id="_2-socket" tabindex="-1"><a class="header-anchor" href="#_2-socket" aria-hidden="true">#</a> 2 Socket</h2><h3 id="_1-什么是socket" tabindex="-1"><a class="header-anchor" href="#_1-什么是socket" aria-hidden="true">#</a> 1 什么是Socket</h3><ul><li>网络上的两个程序通过一个双向的通讯连接实现数据的交换，这个双向链路的一端称为一个<br> Socket。Socket通常用来实现客户方和服务方的连接。Socket是TCP/IP协议的一个十分流行的编<br> 程界面，一个Socket由一个IP地址和一个端口号唯一确定。</li><li>但是，Socket所支持的协议种类也不光TCP/IP、UDP，因此两者之间是没有必然联系的。在Java环<br> 境下，Socket编程主要是指基于TCP/IP协议的网络编程。</li><li>socket连接就是所谓的长连接，客户端和服务器需要互相连接，理论上客户端和服务器端一旦建立<br> 起连接将不会主动断掉的，但是有时候网络波动还是有可能的</li><li>Socket偏向于底层。一般很少直接使用Socket来编程，框架底层使用Socket比较多，</li></ul><h3 id="_2-socket属于网络的那个层面" tabindex="-1"><a class="header-anchor" href="#_2-socket属于网络的那个层面" aria-hidden="true">#</a> 2 socket属于网络的那个层面</h3><figure><img src="https://img-blog.csdnimg.cn/e0233c04c621435fa266bdc37c921feb.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><ul><li>Socket是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口。在设计模式中，Socket<br> 其实就是一个外观模式，它把复杂的TCP/IP协议族隐藏在Socket接口后面，对用户来说，一组简<br> 单的接口就是全部，让Socket去组织数据，以符合指定的协议。</li></ul><h3 id="_3-socket通讯的过程" tabindex="-1"><a class="header-anchor" href="#_3-socket通讯的过程" aria-hidden="true">#</a> 3 Socket通讯的过程</h3><ul><li>基于TCP：服务器端先初始化Socket，然后与端口绑定(bind)，对端口进行监听(listen)，调用<br> accept阻塞，等待客户端连接。在这时如果有个客户端初始化一个Socket，然后连接服务器<br> (connect)，如果连接成功，这时客户端与服务器端的连接就建立了。客户端发送数据请求，服务<br> 器端接收请求并处理请求，然后把回应数据发送给客户端，客户端读取数据，最后关闭连接，一次<br> 交互结束。</li><li>基于UDP：UDP 协议是用户数据报协议的简称，也用于网络数据的传输。虽然 UDP 协议是一种不<br> 太可靠的协议，但有时在需要较快地接收数据并且可以忍受较小错误的情况下，UDP 就会表现出<br> 更大的优势。我客户端只需要发送，服务端能不能接收的到我不管</li></ul><h3 id="_4-tcp协议socket代码示例" tabindex="-1"><a class="header-anchor" href="#_4-tcp协议socket代码示例" aria-hidden="true">#</a> 4 TCP协议Socket代码示例：</h3><p>先运行服务端，在运行客户端 ，</p><ol><li>服务端：</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>io</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">OutputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">ServerSocket</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Socket</span></span><span class="token punctuation">;</span>
<span class="token comment">//TCP协议Socket使用BIO进行通行：服务端</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BIOServer</span> <span class="token punctuation">{</span>
	<span class="token comment">// 在main线程中执行下面这些代码</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">//1单线程服务</span>
		<span class="token class-name">ServerSocket</span> server <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		<span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		<span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		<span class="token class-name">OutputStream</span> out <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>
			server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;服务端启动成功，监听端口为8000，等待客户端连接...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
				socket <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//等待客户端连接</span>
				<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;客户连接成功，客户信息为：&quot;</span> <span class="token operator">+</span>
				socket<span class="token punctuation">.</span><span class="token function">getRemoteSocketAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				in <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
				<span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
				<span class="token comment">//读取客户端的数据</span>
				<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
				<span class="token comment">//向客户端写数据</span>
				out <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;hello!&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>客户端：</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>io</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">OutputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Socket</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>
<span class="token comment">//TCP协议Socket：客户端</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client01</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
		<span class="token comment">//创建套接字对象socket并封装ip与port</span>
		<span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span> <span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//根据创建的socket对象获得一个输出流</span>
		<span class="token class-name">OutputStream</span> outputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//控制台输入以IO的形式发送到服务器</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;TCP连接成功 \\n请输入：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>car<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;TCP协议的Socket发送成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">//刷新缓冲区</span>
			outputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先运行服务端，在运行客户端 。测试结果发送成功：<br><img src="https://img-blog.csdnimg.cn/5c465afb10544c5d9c0a814c98722d7e.png" alt="在这里插入图片描述" loading="lazy"></p><figure><img src="https://img-blog.csdnimg.cn/773617fa66f84f67abee51661fe10c6d.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><h3 id="_5-udp协议socket代码示例" tabindex="-1"><a class="header-anchor" href="#_5-udp协议socket代码示例" aria-hidden="true">#</a> 5 UDP协议Socket代码示例：</h3><p>先运行服务端，在运行客户端</p><ol><li>服务端：</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//UDP协议Socket：服务端</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server1</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>
			<span class="token comment">//DatagramSocket代表声明一个UDP协议的Socket</span>
			<span class="token class-name">DatagramSocket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">//byte数组用于数据存储。</span>
			<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token comment">//DatagramPacket 类用来表示数据报包DatagramPacket</span>
			<span class="token class-name">DatagramPacket</span> packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>car<span class="token punctuation">,</span> car<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">// //创建DatagramPacket的receive()方法来进行数据的接收,等待接收一个socket请</span>
			求后才执行后续操作；
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;等待UDP协议传输数据&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			socket<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">//packet.getLength返回将要发送或者接收的数据的长度。</span>
			<span class="token keyword">int</span> length <span class="token operator">=</span> packet<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;啥东西来了：&quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>car<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;UDP协议Socket接受成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>客户端：</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//UDP协议Socket：客户端</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client1</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>
			<span class="token comment">//DatagramSocket代表声明一个UDP协议的Socket</span>
			<span class="token class-name">DatagramSocket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">2468</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">//字符串存储人Byte数组</span>
			<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> car <span class="token operator">=</span> <span class="token string">&quot;UDP协议的Socket请求，有可能失败哟&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">//InetSocketAddress类主要作用是封装端口</span>
			<span class="token class-name">InetSocketAddress</span> address <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">//DatagramPacket 类用来表示数据报包DatagramPacket</span>
			<span class="token class-name">DatagramPacket</span> packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>car<span class="token punctuation">,</span> car<span class="token punctuation">.</span>length<span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">//send() 方法发送数据包。</span>
			socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;UDP协议的Socket发送成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先运行服务端，在运行客户端 。测试结果成功发送成功：<br><img src="https://img-blog.csdnimg.cn/3c8e479c53984355aef8279aad22cf7b.png" alt="在这里插入图片描述" loading="lazy"></p><h3 id="_6-socket的常用类" tabindex="-1"><a class="header-anchor" href="#_6-socket的常用类" aria-hidden="true">#</a> 6 Socket的常用类</h3><table><thead><tr><th>类名</th><th>用于</th><th>作用</th></tr></thead><tbody><tr><td>Socket</td><td>TCP协议</td><td>Socket类同时工作于客户端和服务端，所有方法都是通用的，这个类三个主要作用，校验包信息，发起连接（Client），操作流数据（Client/Server）</td></tr><tr><td>ServerSocket</td><td>TCP协议</td><td>ServerSocket表示为服务端，主要作用就是绑定并监听一个服务器端口，为每个建立连接的客户端“克隆/映射”一个Socket对象，具体数据操作都是通过这个Socket对象完成的，ServerSocket只关注如何和客户端建立连接</td></tr><tr><td>DatagramSocket</td><td>ODP协议 DatagramSocket</td><td>类用于表示发送和接收数据报包的套接字。</td></tr><tr><td>DatagramPacket</td><td>ODP协议</td><td>DatagramPacket 类用来表示数据报包，数据报包用来实现无连接包投递服务。</td></tr><tr><td>InetAddress</td><td>IP+端口号</td><td>Java提供了InetAddress类来代表互联网协议（IP）地址，InetAddress类没有提供构造器，而是提供了如下两个静态方法来获取InetAddress实例：</td></tr><tr><td>InetSocketAddress</td><td>IP+端口号</td><td>在使用Socket来连接服务器时最简单的方式就是直接使用IP和端口，但Socket类中并未提供这种方式，而是靠SocketAddress的子类InetSocketAddress来实现 IP 地址 + 端口号的创建，不依赖任何协议。</td></tr></tbody></table><h2 id="_3-http" tabindex="-1"><a class="header-anchor" href="#_3-http" aria-hidden="true">#</a> 3. HTTP</h2><h3 id="_1-什么是http协议" tabindex="-1"><a class="header-anchor" href="#_1-什么是http协议" aria-hidden="true">#</a> 1. 什么是Http协议？</h3><ul><li>Http协议是对客户端和服务器端之间数据之间实现可靠性的传输文字、图片、音频、视频等超文<br> 本数据的规范，格式简称为“超文本传输协议”</li><li>Http协议属于应用层，及用户访问的第一层就是http<br><img src="https://img-blog.csdnimg.cn/bf3ddc4f722041a88a8d1fb8b1974c93.png" alt="在这里插入图片描述" loading="lazy"></li></ul><h3 id="_2-socket和http的区别和应用场景" tabindex="-1"><a class="header-anchor" href="#_2-socket和http的区别和应用场景" aria-hidden="true">#</a> 2. Socket和http的区别和应用场景</h3><ul><li>Socket连接就是所谓的长连接，理论上客户端和服务器端一旦建立起连接将不会主动断掉；</li><li>Socket适用场景：网络游戏，银行持续交互，直播，在线视屏等。</li><li>http连接就是所谓的短连接，即客户端向服务器端发送一次请求，服务器端响应后连接即会断开等<br> 待下次连接</li><li>http适用场景：公司OA服务，互联网服务，电商，办公，网站等等等等</li></ul><h3 id="_3-什么是http的请求体" tabindex="-1"><a class="header-anchor" href="#_3-什么是http的请求体" aria-hidden="true">#</a> 3. 什么是http的请求体？</h3><ul><li>HTTP请求体是我们请求数据时先发送给服务器的数据，毕竟我向服务器那数据，先要表明我要什么吧</li><li>HTTP请求体由：请求行 、请求头、请求数据组成的，</li><li>注意：GIT请求是没有请求体的</li></ul><ol><li>POST请求<br><img src="https://img-blog.csdnimg.cn/6cb7c043bb604d0d98ffad6faa602856.png" alt="在这里插入图片描述" loading="lazy"></li><li>GIT请求是没有请求体的<br><img src="https://img-blog.csdnimg.cn/72c6a938d51f4679b516fa2573a8f2ea.png" alt="在这里插入图片描述" loading="lazy"></li></ol><h3 id="_4-http的响应报文有哪些" tabindex="-1"><a class="header-anchor" href="#_4-http的响应报文有哪些" aria-hidden="true">#</a> 4. http的响应报文有哪些？</h3><ul><li>http的响应报是服务器返回给我们的数据，必须先有请求体再有响应报文</li><li>响应报文包含三部分 状态行、响应首部字段、响应内容实体实现<br><img src="https://img-blog.csdnimg.cn/5e25e00b7b3f40f285123e69203ce9da.png" alt="在这里插入图片描述" loading="lazy"></li></ul><h3 id="_5-http和https的区别" tabindex="-1"><a class="header-anchor" href="#_5-http和https的区别" aria-hidden="true">#</a> 5. http和https的区别？</h3><ul><li>其实HTTPS就是从HTTP加上加密处理（一般是SSL安全通信线路）+认证+完整性保护</li><li>区别：</li></ul><ol><li>http需要拿到ca证书，需要钱的</li><li>端口不一样，http是80，https443</li><li>http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。</li><li>http和https使用的是完全不同的连接方式（http的连接很简单，是无状态的；HTTPS 协议是<br> 由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。）</li></ol><h3 id="_6-https工作原理" tabindex="-1"><a class="header-anchor" href="#_6-https工作原理" aria-hidden="true">#</a> 6. HTTPS工作原理</h3><p>一、首先HTTP请求服务端生成证书，客户端对证书的有效期、合法性、域名是否与请求的域名一<br> 致、证书的公钥（RSA加密）等进行校验；<br> 二、客户端如果校验通过后，就根据证书的公钥的有效， 生成随机数，随机数使用公钥进行加密<br> （RSA加密）；<br> 三、消息体产生的后，对它的摘要进行MD5（或者SHA1）算法加密，此时就得到了RSA签名；<br> 四、发送给服务端，此时只有服务端（RSA私钥）能解密。<br> 五、解密得到的随机数，再用AES加密，作为密钥（此时的密钥只有客户端和服务端知道）。</p><h3 id="_7-一次完整的http请求所经历几个步骤" tabindex="-1"><a class="header-anchor" href="#_7-一次完整的http请求所经历几个步骤" aria-hidden="true">#</a> 7. 一次完整的HTTP请求所经历几个步骤?</h3><p>HTTP通信机制是在一次完整的HTTP通信过程中，Web浏览器与Web服务器之间将完成下列7个步骤：</p><ol><li>建立TCP连接<br> 怎么建立连接的，看上面的三次捂手</li><li>Web浏览器向Web服务器发送请求行<br> 一旦建立了TCP连接，Web浏览器就会向Web服务器发送请求命令。例如：GET /sample/hello.jsp<br> HTTP/1.1。</li><li>Web浏览器发送请求头<br> 浏览器发送其请求命令之后，还要以头信息的形式向Web服务器发送一些别的信息，之后浏览器发送<br> 了一空白行来通知服务器，它已经结束了该头信息的发送。</li><li>Web服务器应答<br> 客户机向服务器发出请求后，服务器会客户机回送应答， HTTP/1.1 200 OK ，应答的第一部分是协议<br> 的版本号和应答状态码。</li><li>Web服务器发送应答头<br> 正如客户端会随同请求发送关于自身的信息一样，服务器也会随同应答向用户发送关于它自己的数据及<br> 被请求的文档。</li><li>Web服务器向浏览器发送数据<br> Web服务器向浏览器发送头信息后，它会发送一个空白行来表示头信息的发送到此为结束，接着，它<br> 就以Content-Type应答头信息所描述的格式发送用户所请求的实际数据。</li><li>Web服务器关闭TCP连接</li></ol><h3 id="_8-常用http状态码是怎么分类的-有哪些常见的状态码" tabindex="-1"><a class="header-anchor" href="#_8-常用http状态码是怎么分类的-有哪些常见的状态码" aria-hidden="true">#</a> 8. 常用HTTP状态码是怎么分类的，有哪些常见的状态码？</h3><ul><li>HTTP状态码表示客户端HTTP请求的返回结果、标识服务器处理是否正常、表明请求出现的错误等。</li><li>状态码的类别：</li></ul><table><thead><tr><th>类别</th><th>描述</th></tr></thead><tbody><tr><td>1xx：</td><td>指示信息–表示请求已接收，正在处理</td></tr><tr><td>2xx：</td><td>成功–表示请求已被成功接收、理解、接受</td></tr><tr><td>3xx：</td><td>重定向–要完成请求必须进行更进一步的操作</td></tr><tr><td>4xx：</td><td>客户端错误–请求有语法错误或请求无法实现</td></tr><tr><td>5xx：</td><td>服务器端错误–服务器未能实现合法的请求</td></tr></tbody></table><ul><li>常见的状态码：</li></ul><table><thead><tr><th>状态码</th><th>描述</th></tr></thead><tbody><tr><td>200：</td><td>请求被正常处理</td></tr><tr><td>204：</td><td>请求被受理但没有资源可以返回</td></tr><tr><td>206：</td><td>客户端只是请求资源的一部分，服务器只对请求的部分资源执行GET方法，相应报文中通过Content-Range指定范围的资源。</td></tr><tr><td>301：</td><td>永久性重定向</td></tr><tr><td>302：</td><td>临时重定向</td></tr><tr><td>303：</td><td>与302状态码有相似功能，只是它希望客户端在请求一个URI的时候，能通过GET方法重定向到另一个URI上</td></tr><tr><td>304：</td><td>发送附带条件的请求时，条件不满足时返回，与重定向无关</td></tr><tr><td>307：</td><td>临时重定向，与302类似，只是强制要求使用POST方法</td></tr><tr><td>400：</td><td>请求报文语法有误，服务器无法识别</td></tr><tr><td>401：</td><td>请求需要认证</td></tr><tr><td>403：</td><td>请求的对应资源禁止被访问</td></tr><tr><td>404：</td><td>服务器无法找到对应资源</td></tr><tr><td>500：</td><td>服务器内部错误</td></tr><tr><td>503：</td><td>服务器正忙</td></tr></tbody></table><h3 id="_9-http协议中有那些请求方式" tabindex="-1"><a class="header-anchor" href="#_9-http协议中有那些请求方式" aria-hidden="true">#</a> 9. Http协议中有那些请求方式</h3><table><thead><tr><th>请求方式</th><th>描述</th></tr></thead><tbody><tr><td>GET：</td><td>用于请求访问已经被URI（统一资源标识符）识别的资源，可以通过URL传参给服务器</td></tr><tr><td>POST：</td><td>用于传输信息给服务器，主要功能与GET方法类似，但一般推荐使用POST方式。</td></tr><tr><td>PUT：</td><td>传输文件，报文主体中包含文件内容，保存到对应URI位置。</td></tr><tr><td>HEAD：</td><td>获得报文首部，与GET方法类似，只是不返回报文主体，一般用于验证URI是否有 &gt; 效。</td></tr><tr><td>PATCH：</td><td>客户端向服务器传送的数据取代指定的文档的内容(部分取代)</td></tr><tr><td>TRACE：</td><td>回显客户端请求服务器的原始请求报文，用于&quot;回环&quot;诊断</td></tr><tr><td>DELETE：</td><td>删除文件，与PUT方法相反，删除对应URI位置的文件。</td></tr><tr><td>OPTIONS：</td><td>查询相应URI支持的HTTP方法。</td></tr></tbody></table><h3 id="_10-get方法与post方法的区别" tabindex="-1"><a class="header-anchor" href="#_10-get方法与post方法的区别" aria-hidden="true">#</a> 10. GET方法与POST方法的区别</h3><ul><li>区别一： get重点在从服务器上获取资源，post重点在向服务器发送数据；</li><li>区别二： Get传输的数据量小，因为受URL长度限制，但效率较高； Post可以传输大量数据，所<br> 以上传文件时只能用Post方式；</li><li>区别三： get是不安全的，因为get请求发送数据是在URL上，是可见的，可能会泄露私密信息，<br> 如密码等； post是放在请求头部的，是安全的</li></ul><h3 id="_11-http版本的对比" tabindex="-1"><a class="header-anchor" href="#_11-http版本的对比" aria-hidden="true">#</a> 11. http版本的对比</h3><ul><li>HTTP1.0版本的特性： <ul><li>早先1.0的HTTP版本，是一种无状态、无连接的应用层协议。</li><li>HTTP1.0规定浏览器和服务器保持短暂的连接，浏览器的每次请求都需要与服务器建立一个<br> TCP连接，服务器处理完成后立即断开TCP连接（无连接），服务器不跟踪每个客户端也不记<br> 录过去的请求（无状态）。</li></ul></li><li>HTTP1.1版本新特性 <ul><li>默认持久连接节省通信量，只要客户端服务端任意一端没有明确提出断开TCP连接，就一直<br> 保持连接，可以发送多次HTTP请求</li><li>管线化，客户端可以同时发出多个HTTP请求，而不用一个个等待响应</li><li>断点续传原理</li></ul></li><li>HTTP2.0版本的特性 <ul><li>二进制分帧（采用二进制格式的编码将其封装）</li><li>首部压缩（设置了专门的首部压缩设计的HPACK算法。）</li><li>流量控制（设置了接收某个数据流的多少字节一些流量控制）</li><li>多路复用（可以在共享TCP链接的基础上同时发送请求和响应）</li><li>请求优先级（可以通过优化这些帧的交错和传输顺序进一步优化性能）</li><li>服务器推送（就是服务器可以对一个客户端请求发送多个响应。服务器向客户端推送资 源无<br> 需客户端明确的请求。（重大更新））</li></ul></li></ul><h3 id="_12-什么是对称加密与非对称加密" tabindex="-1"><a class="header-anchor" href="#_12-什么是对称加密与非对称加密" aria-hidden="true">#</a> 12. 什么是对称加密与非对称加密</h3><ul><li>对称密钥加密是指加密和解密使用同一个密钥的方式，这种方式存在的最大问题就是密钥发送问<br> 题，即如何安全地将密钥发给对方；</li><li>而非对称加密是指使用一对非对称密钥，即公钥和私钥，公钥可以随意发布，但私钥只有自己知<br> 道。发送密文的一方使用对方的公钥进行加密处理，对方接收到加密信息后，使用自己的私钥进行<br> 解密。 由于非对称加密的方式不需要发送用来解密的私钥，所以可以保证安全性；但是和对称加<br> 密比起来，非常的慢</li></ul><h3 id="_13-cookie和session对于http有什么用" tabindex="-1"><a class="header-anchor" href="#_13-cookie和session对于http有什么用" aria-hidden="true">#</a> 13. cookie和session对于HTTP有什么用？</h3><ul><li>HTTP协议本身是无法判断用户身份。所以需要cookie或者session</li></ul><h3 id="_14-什么是cookie" tabindex="-1"><a class="header-anchor" href="#_14-什么是cookie" aria-hidden="true">#</a> 14. 什么是cookie</h3><p>cookie是由Web服务器保存在用户浏览器上的文件（key-value格式），可以包含用户相关的信<br> 息。客户端向服务器发起请求，就提取浏览器中的用户信息由http发送给服务器</p><h3 id="_15-什么是session" tabindex="-1"><a class="header-anchor" href="#_15-什么是session" aria-hidden="true">#</a> 15. 什么是session</h3><p>session 是浏览器和服务器会话过程中，服务器会分配的一块储存空间给session。<br> 服务器默认为客户浏览器的cookie中设置 sessionid，这个sessionid就和cookie对应，浏览器在向<br> 服务器请求过程中传输的cookie 包含 sessionid ，服务器根据传输cookie 中的 sessionid 获取出<br> 会话中存储的信息，然后确定会话的身份信息。<br> cookie与session区别</p><ol><li>cookie数据存放在客户端上，安全性较差，session数据放在服务器上，安全性相对更高</li><li>单个cookie保存的数据不能超过4K，session无此限制</li><li>session一定时间内保存在服务器上，当访问增多，占用服务器性能，考虑到服务器性能方面，应<br> 当使用cookie。</li></ol><hr><p><strong>史上最全Java面试宝典，BAT大厂面试必备。整理不易，建议先关注点赞加收藏</strong></p>`,134),u=n("thead",null,[n("tr",null,[n("th",null,"序号"),n("th",null,"名称"),n("th",null,"地址")])],-1),d=n("td",null,"1",-1),k=n("td",null,"Java基础面试题（91道含答案）",-1),h={href:"https://blog.csdn.net/qq_30999361/article/details/124482581",target:"_blank",rel:"noopener noreferrer"},b=n("td",null,"2",-1),_=n("td",null,"Java并发编程面试题 （123道含答案）",-1),m={href:"https://blog.csdn.net/qq_30999361/article/details/124545403",target:"_blank",rel:"noopener noreferrer"},v=n("td",null,"3",-1),P=n("td",null,"Java异常面试题 （33道含答案）",-1),f={href:"https://blog.csdn.net/qq_30999361/article/details/124560006",target:"_blank",rel:"noopener noreferrer"},g=n("td",null,"4",-1),T=n("td",null,"Java虚拟机（JVM）面试题（51道含答案）",-1),S={href:"https://blog.csdn.net/qq_30999361/article/details/124532763",target:"_blank",rel:"noopener noreferrer"},C=n("td",null,"5",-1),y=n("td",null,"Java集合面试题（52道含答案）",-1),I={href:"https://blog.csdn.net/qq_30999361/article/details/124503952",target:"_blank",rel:"noopener noreferrer"},w=n("td",null,"6",-1),A=n("td",null,"Linux面试题（50道含答案）",-1),D={href:"https://blog.csdn.net/qq_30999361/article/details/124575798",target:"_blank",rel:"noopener noreferrer"},x=n("td",null,"7",-1),q=n("td",null,"Memcache面试题（23道含答案）",-1),H={href:"https://blog.csdn.net/qq_30999361/article/details/124596870",target:"_blank",rel:"noopener noreferrer"},U=n("td",null,"8",-1),N=n("td",null,"Mybatiss面试题 （37道含答案）",-1),E={href:"https://blog.csdn.net/qq_30999361/article/details/124560907",target:"_blank",rel:"noopener noreferrer"},O=n("td",null,"9",-1),R=n("td",null,"MySQL面试题（40道含答案）",-1),L={href:"https://blog.csdn.net/qq_30999361/article/details/124506169",target:"_blank",rel:"noopener noreferrer"},K=n("td",null,"10",-1),M=n("td",null,"Netty面试题（49道含答案）",-1),W={href:"https://blog.csdn.net/qq_30999361/article/details/124617122",target:"_blank",rel:"noopener noreferrer"},j=n("td",null,"11",-1),B=n("td",null,"Nginx面试题（23道含答案）",-1),F={href:"https://blog.csdn.net/qq_30999361/article/details/124597174",target:"_blank",rel:"noopener noreferrer"},G=n("td",null,"12",-1),z=n("td",null,"RabbitMQ面试题（22道含答案）",-1),J={href:"https://blog.csdn.net/qq_30999361/article/details/124533998",target:"_blank",rel:"noopener noreferrer"},Y=n("td",null,"13",-1),V=n("td",null,"Redis面试题（70道含答案）",-1),Q={href:"https://blog.csdn.net/qq_30999361/article/details/124459566",target:"_blank",rel:"noopener noreferrer"},Z=n("td",null,"14",-1),$=n("td",null,"SpringBoot面试题（44道含答案）",-1),X={href:"https://blog.csdn.net/qq_30999361/article/details/124461725",target:"_blank",rel:"noopener noreferrer"},nn=n("td",null,"15",-1),an=n("td",null,"SpringCloud面试题（49道含答案）",-1),sn={href:"https://blog.csdn.net/qq_30999361/article/details/124430712",target:"_blank",rel:"noopener noreferrer"},tn=n("td",null,"16",-1),en=n("td",null,"SpringMVC面试题（29道含答案）",-1),ln={href:"https://blog.csdn.net/qq_30999361/article/details/124519135",target:"_blank",rel:"noopener noreferrer"},on=n("td",null,"17",-1),pn=n("td",null,"Spring面试题（75道含答案）",-1),cn={href:"https://blog.csdn.net/qq_30999361/article/details/124519472",target:"_blank",rel:"noopener noreferrer"},rn=n("td",null,"18",-1),un=n("td",null,"TCP、UDP、Socket、Http网络编程面试题（47道含答案）",-1),dn={href:"https://blog.csdn.net/qq_30999361/article/details/124617792",target:"_blank",rel:"noopener noreferrer"},kn=n("td",null,"19",-1),hn=n("td",null,"Tomcat面试题（15道含答案）",-1),bn={href:"https://blog.csdn.net/qq_30999361/article/details/124576964",target:"_blank",rel:"noopener noreferrer"},_n=n("td",null,"20",-1),mn=n("td",null,"Zookeeper面试题（28道含答案）",-1),vn={href:"https://blog.csdn.net/qq_30999361/article/details/124596208",target:"_blank",rel:"noopener noreferrer"},Pn=n("td",null,"21",-1),fn=n("td",null,"多线程面试题（60道含答案）",-1),gn={href:"https://blog.csdn.net/qq_30999361/article/details/124596462",target:"_blank",rel:"noopener noreferrer"},Tn=n("td",null,"22",-1),Sn=n("td",null,"设计模式面试题（14道含答案）",-1),Cn={href:"https://blog.csdn.net/qq_30999361/article/details/124637874",target:"_blank",rel:"noopener noreferrer"},yn=n("td",null,"23",-1),In=n("td",null,"BIO、NIO、AIO、Netty面试题（35道含答案）",-1),wn={href:"https://blog.csdn.net/qq_30999361/article/details/124653616",target:"_blank",rel:"noopener noreferrer"},An=n("td",null,"24",-1),Dn=n("td",null,"Dubbo面试题（47道含答案）",-1),xn={href:"https://blog.csdn.net/qq_30999361/article/details/124637288",target:"_blank",rel:"noopener noreferrer"},qn=n("td",null,"25",-1),Hn=n("td",null,"ElasticSearch面试题（31道含答案）",-1),Un={href:"https://blog.csdn.net/qq_30999361/article/details/124619240",target:"_blank",rel:"noopener noreferrer"},Nn=n("td",null,"26",-1),En=n("td",null,"Git常用命令（63条）",-1),On={href:"https://blog.csdn.net/qq_30999361/article/details/124438420",target:"_blank",rel:"noopener noreferrer"};function Rn(Ln,Kn){const a=l("ExternalLinkIcon");return o(),i("div",null,[r,n("table",null,[u,n("tbody",null,[n("tr",null,[d,k,n("td",null,[n("a",h,[s("（点击查看）"),t(a)])])]),n("tr",null,[b,_,n("td",null,[n("a",m,[s("（点击查看）"),t(a)])])]),n("tr",null,[v,P,n("td",null,[n("a",f,[s("（点击查看）"),t(a)])])]),n("tr",null,[g,T,n("td",null,[n("a",S,[s("（点击查看）"),t(a)])])]),n("tr",null,[C,y,n("td",null,[n("a",I,[s("（点击查看）"),t(a)])])]),n("tr",null,[w,A,n("td",null,[n("a",D,[s("（点击查看）"),t(a)])])]),n("tr",null,[x,q,n("td",null,[n("a",H,[s("（点击查看）"),t(a)])])]),n("tr",null,[U,N,n("td",null,[n("a",E,[s("（点击查看）"),t(a)])])]),n("tr",null,[O,R,n("td",null,[n("a",L,[s("（点击查看）"),t(a)])])]),n("tr",null,[K,M,n("td",null,[n("a",W,[s("（点击查看）"),t(a)])])]),n("tr",null,[j,B,n("td",null,[n("a",F,[s("（点击查看）"),t(a)])])]),n("tr",null,[G,z,n("td",null,[n("a",J,[s("（点击查看）"),t(a)])])]),n("tr",null,[Y,V,n("td",null,[n("a",Q,[s("（点击查看）"),t(a)])])]),n("tr",null,[Z,$,n("td",null,[n("a",X,[s("（点击查看）"),t(a)])])]),n("tr",null,[nn,an,n("td",null,[n("a",sn,[s("（点击查看）"),t(a)])])]),n("tr",null,[tn,en,n("td",null,[n("a",ln,[s("（点击查看）"),t(a)])])]),n("tr",null,[on,pn,n("td",null,[n("a",cn,[s("（点击查看）"),t(a)])])]),n("tr",null,[rn,un,n("td",null,[n("a",dn,[s("（点击查看）"),t(a)])])]),n("tr",null,[kn,hn,n("td",null,[n("a",bn,[s("（点击查看）"),t(a)])])]),n("tr",null,[_n,mn,n("td",null,[n("a",vn,[s("（点击查看）"),t(a)])])]),n("tr",null,[Pn,fn,n("td",null,[n("a",gn,[s("（点击查看）"),t(a)])])]),n("tr",null,[Tn,Sn,n("td",null,[n("a",Cn,[s("（点击查看）"),t(a)])])]),n("tr",null,[yn,In,n("td",null,[n("a",wn,[s("（点击查看）"),t(a)])])]),n("tr",null,[An,Dn,n("td",null,[n("a",xn,[s("（点击查看）"),t(a)])])]),n("tr",null,[qn,Hn,n("td",null,[n("a",Un,[s("（点击查看）"),t(a)])])]),n("tr",null,[Nn,En,n("td",null,[n("a",On,[s("（点击查看）"),t(a)])])])])])])}const Wn=e(c,[["render",Rn],["__file","TCP、UDP、Socket、Http网络编程面试题（47道含答案）.html.vue"]]);export{Wn as default};
