import{_ as a,Z as e,$ as r,a4 as i}from"./framework-e0d053a9.js";const s={},c=i(`<h3 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h3><ul><li><a href="#1_elasticsearch__es___2">1. elasticsearch 了解多少，说说你们公司 es 的集群架构，索引数据大小，分片有多少，以及一些调优手段 。</a></li><li><ul><li><a href="#11__12">1.1 设计阶段调优</a></li><li><a href="#12__22">1.2 写入调优</a></li><li><a href="#13__29">1.3 查询调优</a></li><li><a href="#14__36">1.4 其他调优</a></li></ul></li><li><a href="#2_elasticsearch__40">2. elasticsearch 的倒排索引是什么</a></li><li><a href="#3_elasticsearch__59">3. elasticsearch 索引数据多了怎么办，如何调优，部署</a></li><li><ul><li><a href="#31__67">3.1 动态索引层面</a></li><li><a href="#32__72">3.2 存储层面</a></li><li><a href="#33__77">3.3 部署层面</a></li></ul></li><li><a href="#4_elasticsearch__master__82">4. elasticsearch 是如何实现 master 选举的</a></li><li><a href="#5__Elasticsearch__102">5. 详细描述一下 Elasticsearch 索引文档的过程</a></li><li><a href="#6__Elasticsearch__126">6. 详细描述一下 Elasticsearch 搜索的过程？</a></li><li><a href="#7_Elasticsearch__Linux__140">7. Elasticsearch 在部署时，对 Linux 的设置有哪些优化方法</a></li><li><a href="#8_lucence__150">8. lucence 内部结构是什么？</a></li><li><a href="#9_Elasticsearch__Master__157">9. Elasticsearch 是如何实现 Master 选举的？</a></li><li><a href="#10_Elasticsearch__20_10__master_10__master_167">10. Elasticsearch 中的节点（比如共 20 个），其中的10 个选了一个 master，另外 10 个选了另一个 master，怎么办？</a></li><li><a href="#11__172">11. 客户端在和集群连接时，如何选择特定的节点执行请求的？</a></li><li><a href="#12__Elasticsearch__176">12. 详细描述一下 Elasticsearch 索引文档的过程。</a></li><li><a href="#13_Elasticsearch__RESTful__203">13. Elasticsearch 是一个分布式的 RESTful 风格的搜索和数据分析引擎。</a></li><li><a href="#14_Elasticsearch_215">14. Elasticsearch是一个高度可伸缩的开源全文搜索和分析引擎。它允许您快速和接近实时地存储、搜索和分析大量数据。</a></li><li><a href="#15__Elasticsearch__235">15. 详细描述一下 Elasticsearch 更新和删除文档的过程。</a></li><li><a href="#16__Elasticsearch__247">16. 详细描述一下 Elasticsearch 搜索的过程。</a></li><li><a href="#17__Elasticsearch__266">17. 在 Elasticsearch 中，是怎么根据一个词找到对应的倒排索引的？</a></li><li><a href="#18_Elasticsearch__Linux__271">18. Elasticsearch 在部署时，对 Linux 的设置有哪些优化方法？</a></li><li><a href="#19__GC__Elasticsearch__316">19. 对于 GC 方面，在使用 Elasticsearch 时要注意什么？</a></li><li><a href="#20_Elasticsearch__333">20. Elasticsearch 对于大数据量（上亿量级）的聚合如何实现？</a></li><li><a href="#21_Elasticsearch__340">21. 在并发情况下，Elasticsearch 如果保证读写一致？</a></li><li><a href="#22__Elasticsearch__351">22. 如何监控 Elasticsearch 集群状态？</a></li><li><a href="#23__355">23. 介绍下你们电商搜索的整体技术架构。</a></li><li><a href="#24__357">24. 介绍一下你们的个性化搜索方案？</a></li><li><a href="#25__367">25. 是否了解字典树？</a></li><li><a href="#26__383">26. 拼写纠错是如何实现的？</a></li><li><ul><li><a href="#httpsimgblogcsdnimgcncf192814c80e469089177a9b8514c5b4png_422">在这里插入图片描述</a></li></ul></li></ul><h2 id="_1-elasticsearch-了解多少-说说你们公司-es-的集群架构-索引数据大小-分片有多少-以及一些调优手段-。" tabindex="-1"><a class="header-anchor" href="#_1-elasticsearch-了解多少-说说你们公司-es-的集群架构-索引数据大小-分片有多少-以及一些调优手段-。" aria-hidden="true">#</a> 1. elasticsearch 了解多少，说说你们公司 es 的集群架构，索引数据大小，分片有多少，以及一些调优手段 。</h2><p>面试官：想了解应聘者之前公司接触的 ES 使用场景、规模，有没有做过比较大规模的索引设计、规<br> 划、调优。</p><p>解答：如实结合自己的实践场景回答即可。<br> 比如：ES 集群架构 13 个节点，索引根据通道不同共 20+索引，根据日期，每日递增 20+，索引：10<br> 分片，每日递增 1 亿+数据，每个通道每天索引大小控制：150GB 之内。</p><p>仅索引层面调优手段：</p><h2 id="_1-1-设计阶段调优" tabindex="-1"><a class="header-anchor" href="#_1-1-设计阶段调优" aria-hidden="true">#</a> 1.1 设计阶段调优</h2><p>（1）根据业务增量需求，采取基于日期模板创建索引，通过 roll over API 滚动索引；<br> （2）使用别名进行索引管理；<br> （3）每天凌晨定时对索引做 force_merge 操作，以释放空间；<br> （4）采取冷热分离机制，热数据存储到 SSD，提高检索效率；冷数据定期进行 shrink操作，以缩减存<br> 储；<br> （5）采取 curator 进行索引的生命周期管理；<br> （6）仅针对需要分词的字段，合理的设置分词器；<br> （7）Mapping 阶段充分结合各个字段的属性，是否需要检索、是否需要存储等。………</p><h2 id="_1-2-写入调优" tabindex="-1"><a class="header-anchor" href="#_1-2-写入调优" aria-hidden="true">#</a> 1.2 写入调优</h2><p>（1）写入前副本数设置为 0；<br> （2）写入前关闭 refresh_interval 设置为-1，禁用刷新机制；<br> （3）写入过程中：采取 bulk 批量写入；<br> （4）写入后恢复副本数和刷新间隔；<br> （5）尽量使用自动生成的 id。</p><h2 id="_1-3-查询调优" tabindex="-1"><a class="header-anchor" href="#_1-3-查询调优" aria-hidden="true">#</a> 1.3 查询调优</h2><p>（1）禁用 wildcard；<br> （2）禁用批量 terms（成百上千的场景）；<br> （3）充分利用倒排索引机制，能 keyword 类型尽量 keyword；<br> （4）数据量大时候，可以先基于时间敲定索引再检索；<br> （5）设置合理的路由机制。</p><h2 id="_1-4-其他调优" tabindex="-1"><a class="header-anchor" href="#_1-4-其他调优" aria-hidden="true">#</a> 1.4 其他调优</h2><p>部署调优，业务调优等。<br> 上面的提及一部分，面试者就基本对你之前的实践或者运维经验有所评估了。</p><h2 id="_2-elasticsearch-的倒排索引是什么" tabindex="-1"><a class="header-anchor" href="#_2-elasticsearch-的倒排索引是什么" aria-hidden="true">#</a> 2. elasticsearch 的倒排索引是什么</h2><p>面试官：想了解你对基础概念的认知。</p><p>解答：通俗解释一下就可以。</p><p>传统的我们的检索是通过文章，逐个遍历找到对应关键词的位置。<br> 而倒排索引，是通过分词策略，形成了词和文章的映射关系表，这种词典+映射表即为倒排索引。有了<br> 倒排索引，就能实现 o（1）时间复杂度的效率检索文章了，极大的提高了检索效率。<br><img src="https://img-blog.csdnimg.cn/1cdaae109d0c4dd78643e73ff818d73e.png" alt="在这里插入图片描述" loading="lazy"><br> 学术的解答方式：<br> 倒排索引，相反于一篇文章包含了哪些词，它从词出发，记载了这个词在哪些文档中出现过，由两部分<br> 组成——词典和倒排表。</p><p>加分项：倒排索引的底层实现是基于：FST（Finite State Transducer）数据结构。</p><p>lucene 从 4+版本后开始大量使用的数据结构是 FST。FST 有两个优点：<br> （1）空间占用小。通过对词典中单词前缀和后缀的重复利用，压缩了存储空间；<br> （2）查询速度快。O(len(str))的查询时间复杂度。</p><h2 id="_3-elasticsearch-索引数据多了怎么办-如何调优-部署" tabindex="-1"><a class="header-anchor" href="#_3-elasticsearch-索引数据多了怎么办-如何调优-部署" aria-hidden="true">#</a> 3. elasticsearch 索引数据多了怎么办，如何调优，部署</h2><p>面试官：想了解大数据量的运维能力。</p><p>解答：索引数据的规划，应在前期做好规划，正所谓“设计先行，编码在后”，这样才能有效的避免突如<br> 其来的数据激增导致集群处理能力不足引发的线上客户检索或者其他业务受到影响。</p><p>如何调优，正如问题 1 所说，这里细化一下：</p><h2 id="_3-1-动态索引层面" tabindex="-1"><a class="header-anchor" href="#_3-1-动态索引层面" aria-hidden="true">#</a> 3.1 动态索引层面</h2><ul><li>基于模板+时间+rollover api 滚动创建索引，举例：设计阶段定义：blog 索引的模板格式为：<br> blog_index_时间戳的形式，每天递增数据。这样做的好处：不至于数据量激增导致单个索引数据量非常大，接近于上线 2 的32 次幂-1，索引存储达到了 TB+甚至更大。</li><li>一旦单个索引很大，存储等各种风险也随之而来，所以要提前考虑+及早避免。</li></ul><h2 id="_3-2-存储层面" tabindex="-1"><a class="header-anchor" href="#_3-2-存储层面" aria-hidden="true">#</a> 3.2 存储层面</h2><ul><li>冷热数据分离存储，热数据（比如最近 3 天或者一周的数据），其余为冷数据。</li><li>对于冷数据不会再写入新数据，可以考虑定期 force_merge 加 shrink 压缩操作，节省存储空间和检索<br> 效率。</li></ul><h2 id="_3-3-部署层面" tabindex="-1"><a class="header-anchor" href="#_3-3-部署层面" aria-hidden="true">#</a> 3.3 部署层面</h2><ul><li>一旦之前没有规划，这里就属于应急策略。</li><li>结合 ES 自身的支持动态扩展的特点，动态新增机器的方式可以缓解集群压力，注意：如果之前主节点<br> 等规划合理，不需要重启集群也能完成动态新增的。</li></ul><h2 id="_4-elasticsearch-是如何实现-master-选举的" tabindex="-1"><a class="header-anchor" href="#_4-elasticsearch-是如何实现-master-选举的" aria-hidden="true">#</a> 4. elasticsearch 是如何实现 master 选举的</h2><p>面试官：想了解 ES 集群的底层原理，不再只关注业务层面了。</p><p>解答：<br> 前置前提：<br> （1）只有候选主节点（master：true）的节点才能成为主节点。<br> （2）最小主节点数（min_master_nodes）的目的是防止脑裂。<br> 核对了一下代码，核心入口为 findMaster，选择主节点成功返回对应 Master，否则返回 null。选举流<br> 程大致描述如下：<br> 第一步：确认候选主节点数达标，elasticsearch.yml 设置的值<br> discovery.zen.minimum_master_nodes；</p><p>第二步：比较：先判定是否具备 master 资格，具备候选主节点资格的优先返回；<br> 若两节点都为候选主节点，则 id 小的值会主节点。注意这里的 id 为 string 类型。<br> 题外话：获取节点 id 的方法。</p><div class="language-auto line-numbers-mode" data-ext="auto"><pre class="language-auto"><code>1GET /_cat/nodes?v&amp;h=ip,port,heapPercent,heapMax,id,name
2ip port heapPercent heapMax id name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-详细描述一下-elasticsearch-索引文档的过程" tabindex="-1"><a class="header-anchor" href="#_5-详细描述一下-elasticsearch-索引文档的过程" aria-hidden="true">#</a> 5. 详细描述一下 Elasticsearch 索引文档的过程</h2><p>面试官：想了解 ES 的底层原理，不再只关注业务层面了。</p><p>解答：<br> 这里的索引文档应该理解为文档写入 ES，创建索引的过程。<br> 文档写入包含：单文档写入和批量 bulk 写入，这里只解释一下：单文档写入流程。<br> 记住官方文档中的这个图。<br><img src="https://img-blog.csdnimg.cn/b8ea298ec09743ea98b1d017e30f4f6c.png" alt="在这里插入图片描述" loading="lazy"><br> 第一步：客户写集群某节点写入数据，发送请求。（如果没有指定路由/协调节点，请求的节点扮演路<br> 由节点的角色。）</p><p>第二步：节点 1 接受到请求后，使用文档_id 来确定文档属于分片 0。请求会被转到另外的节点，假定<br> 节点 3。因此分片 0 的主分片分配到节点 3 上。</p><p>第三步：节点 3 在主分片上执行写操作，如果成功，则将请求并行转发到节点 1和节点 2 的副本分片<br> 上，等待结果返回。所有的副本分片都报告成功，节点 3 将向协调节点（节点 1）报告成功，节点 1 向<br> 请求客户端报告写入成功。</p><p>如果面试官再问：第二步中的文档获取分片的过程？<br> 回答：借助路由算法获取，路由算法就是根据路由和文档 id 计算目标的分片 id 的过程。</p><div class="language-auto line-numbers-mode" data-ext="auto"><pre class="language-auto"><code>1shard = hash(_routing) % (num_of_primary_shards)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_6-详细描述一下-elasticsearch-搜索的过程" tabindex="-1"><a class="header-anchor" href="#_6-详细描述一下-elasticsearch-搜索的过程" aria-hidden="true">#</a> 6. 详细描述一下 Elasticsearch 搜索的过程？</h2><p>面试官：想了解 ES 搜索的底层原理，不再只关注业务层面了。</p><p>解答：<br> 搜索拆解为“query then fetch” 两个阶段。<br> query 阶段的目的：定位到位置，但不取。</p><p>步骤拆解如下：<br> （1）假设一个索引数据有 5 主+1 副本 共 10 分片，一次请求会命中（主或者副本分片中）的一个。<br> （2）每个分片在本地进行查询，结果返回到本地有序的优先队列中。<br> （3）第 2）步骤的结果发送到协调节点，协调节点产生一个全局的排序列表。<br> fetch 阶段的目的：取数据。<br> 路由节点获取所有文档，返回给客户端。</p><h2 id="_7-elasticsearch-在部署时-对-linux-的设置有哪些优化方法" tabindex="-1"><a class="header-anchor" href="#_7-elasticsearch-在部署时-对-linux-的设置有哪些优化方法" aria-hidden="true">#</a> 7. Elasticsearch 在部署时，对 Linux 的设置有哪些优化方法</h2><p>面试官：想了解对 ES 集群的运维能力。</p><p>解答：<br> （1）关闭缓存 swap;<br> （2）堆内存设置为：Min（节点内存/2, 32GB）;<br> （3）设置最大文件句柄数；<br> （4）线程池+队列大小根据业务需要做调整；<br> （5）磁盘存储 raid 方式——存储有条件使用 RAID10，增加单节点性能以及避免单节点存储故障。</p><h2 id="_8-lucence-内部结构是什么" tabindex="-1"><a class="header-anchor" href="#_8-lucence-内部结构是什么" aria-hidden="true">#</a> 8. lucence 内部结构是什么？</h2><p>面试官：想了解你的知识面的广度和深度。</p><p>解答：<br> Lucene 是有索引和搜索的两个过程，包含索引创建，索引，搜索三个要点。可以基于这个脉络展开一<br> 些。</p><h2 id="_9-elasticsearch-是如何实现-master-选举的" tabindex="-1"><a class="header-anchor" href="#_9-elasticsearch-是如何实现-master-选举的" aria-hidden="true">#</a> 9. Elasticsearch 是如何实现 Master 选举的？</h2><p>（1）Elasticsearch 的选主是 ZenDiscovery 模块负责的，主要包含 Ping（节点之间通过这个 RPC 来发<br> 现彼此）和 Unicast（单播模块包含一个主机列表以控制哪些节点需要 ping 通）这两部分；<br> （2）对所有可以成为 master 的节点（node.master: true）根据 nodeId 字典排序，每次选举每个节<br> 点都把自己所知道节点排一次序，然后选出第一个（第 0 位）节点，暂且认为它是 master 节点。<br> （3）如果对某个节点的投票数达到一定的值（可以成为 master 节点数 n/2+1）并且该节点自己也选<br> 举自己，那这个节点就是 master。否则重新选举一直到满足上述条件。<br> （4）补充：master 节点的职责主要包括集群、节点和索引的管理，不负责文档级别的管理；data 节<br> 点可以关闭 http 功能*。</p><h2 id="_10-elasticsearch-中的节点-比如共-20-个-其中的10-个选了一个-master-另外-10-个选了另一个-master-怎么办" tabindex="-1"><a class="header-anchor" href="#_10-elasticsearch-中的节点-比如共-20-个-其中的10-个选了一个-master-另外-10-个选了另一个-master-怎么办" aria-hidden="true">#</a> 10. Elasticsearch 中的节点（比如共 20 个），其中的10 个选了一个 master，另外 10 个选了另一个 master，怎么办？</h2><p>（1）当集群 master 候选数量不小于 3 个时，可以通过设置最少投票通过数量<br> （discovery.zen.minimum_master_nodes）超过所有候选节点一半以上来解决脑裂问题；<br> （3）当候选数量为两个时，只能修改为唯一的一个 master 候选，其他作为 data节点，避免脑裂问题。</p><h2 id="_11-客户端在和集群连接时-如何选择特定的节点执行请求的" tabindex="-1"><a class="header-anchor" href="#_11-客户端在和集群连接时-如何选择特定的节点执行请求的" aria-hidden="true">#</a> 11. 客户端在和集群连接时，如何选择特定的节点执行请求的？</h2><p>TransportClient 利用 transport 模块远程连接一个 elasticsearch 集群。它并不加入到集群中，只是简<br> 单的获得一个或者多个初始化的 transport 地址，并以 轮询 的方式与这些地址进行通信。</p><h2 id="_12-详细描述一下-elasticsearch-索引文档的过程。" tabindex="-1"><a class="header-anchor" href="#_12-详细描述一下-elasticsearch-索引文档的过程。" aria-hidden="true">#</a> 12. 详细描述一下 Elasticsearch 索引文档的过程。</h2><p>协调节点默认使用文档 ID 参与计算（也支持通过 routing），以便为路由提供合适的分片。</p><div class="language-auto line-numbers-mode" data-ext="auto"><pre class="language-auto"><code>shard = hash(document_id) % (num_of_primary_shards)复制代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（1）当分片所在的节点接收到来自协调节点的请求后，会将请求写入到 MemoryBuffer，然后定时<br> （默认是每隔 1 秒）写入到 Filesystem Cache，这个从 MomeryBuffer 到 Filesystem Cache 的过程就<br> 叫做 refresh；</p><p>（2）当然在某些情况下，存在 Momery Buffer 和 Filesystem Cache 的数据可能会丢失，ES 是通过<br> translog 的机制来保证数据的可靠性的。其实现机制是接收到请求后，同时也会写入到 translog 中 ，<br> 当 Filesystem cache 中的数据写入到磁盘中时，才会清除掉，这个过程叫做 flush；</p><p>（3）在 flush 过程中，内存中的缓冲将被清除，内容被写入一个新段，段的 fsync将创建一个新的提交<br> 点，并将内容刷新到磁盘，旧的 translog 将被删除并开始一个新的 translog。</p><p>（4）flush 触发的时机是定时触发（默认 30 分钟）或者 translog 变得太大（默认为 512M）时；</p><p>补充：关于 Lucene 的 Segement：<br> （1）Lucene 索引是由多个段组成，段本身是一个功能齐全的倒排索引。<br> （2）段是不可变的，允许 Lucene 将新的文档增量地添加到索引中，而不用从头重建索引。<br> （3）对于每一个搜索请求而言，索引中的所有段都会被搜索，并且每个段会消耗CPU 的时钟周、文件<br> 句柄和内存。这意味着段的数量越多，搜索性能会越低。<br> （4）为了解决这个问题，Elasticsearch 会合并小段到一个较大的段，提交新的合并段到磁盘，并删除<br> 那些旧的小段。</p><h2 id="_13-elasticsearch-是一个分布式的-restful-风格的搜索和数据分析引擎。" tabindex="-1"><a class="header-anchor" href="#_13-elasticsearch-是一个分布式的-restful-风格的搜索和数据分析引擎。" aria-hidden="true">#</a> 13. Elasticsearch 是一个分布式的 RESTful 风格的搜索和数据分析引擎。</h2><p>（1）查询 ： Elasticsearch 允许执行和合并多种类型的搜索 — 结构化、非结构化、地理位置、度量指<br> 标 — 搜索方式随心而变。<br> （2）分析 ： 找到与查询最匹配的十个文档是一回事。但是如果面对的是十亿行日志，又该如何解读<br> 呢？Elasticsearch 聚合让您能够从大处着眼，探索数据的趋势和模式。<br> （3）速度 ： Elasticsearch 很快。真的，真的很快。<br> （4）可扩展性 ： 可以在笔记本电脑上运行。 也可以在承载了 PB 级数据的成百上千台服务器上运行。<br> （5）弹性 ： Elasticsearch 运行在一个分布式的环境中，从设计之初就考虑到了这一点。<br> （6）灵活性 ： 具备多个案例场景。数字、文本、地理位置、结构化、非结构化。所有的数据类型都欢<br> 迎。<br> （7）HADOOP &amp; SPARK ： Elasticsearch + Hadoop</p><h2 id="_14-elasticsearch是一个高度可伸缩的开源全文搜索和分析引擎。它允许您快速和接近实时地存储、搜索和分析大量数据。" tabindex="-1"><a class="header-anchor" href="#_14-elasticsearch是一个高度可伸缩的开源全文搜索和分析引擎。它允许您快速和接近实时地存储、搜索和分析大量数据。" aria-hidden="true">#</a> 14. Elasticsearch是一个高度可伸缩的开源全文搜索和分析引擎。它允许您快速和接近实时地存储、搜索和分析大量数据。</h2><p>这里有一些使用Elasticsearch的用例：<br> （1）你经营一个网上商店，你允许你的顾客搜索你卖的产品。在这种情况下，您可以使用<br> Elasticsearch来存储整个产品目录和库存，并为它们提供搜索和自动完成建议。</p><p>（2）你希望收集日志或事务数据，并希望分析和挖掘这些数据，以查找趋势、统计、汇总或异常。在<br> 这种情况下，你可以使用loghide (Elasticsearch/ loghide /Kibana堆栈的一部分)来收集、聚合和解析数<br> 据，然后让loghide将这些数据输入到Elasticsearch中。一旦数据在Elasticsearch中，你就可以运行搜<br> 索和聚合来挖掘你感兴趣的任何信息。</p><p>（3）你运行一个价格警报平台，允许精通价格的客户指定如下规则:“我有兴趣购买特定的电子设备，如<br> 果下个月任何供应商的产品价格低于X美元，我希望得到通知”。在这种情况下，你可以抓取供应商的价<br> 格，将它们推入到Elasticsearch中，并使用其反向搜索(Percolator)功能来匹配价格走势与客户查询，<br> 并最终在找到匹配后将警报推送给客户。</p><p>（4）你有分析/业务智能需求，并希望快速调查、分析、可视化，并对大量数据提出特别问题(想想数百<br> 万或数十亿的记录)。在这种情况下，你可以使用Elasticsearch来存储数据，然后使用Kibana<br> (Elasticsearch/ loghide /Kibana堆栈的一部分)来构建自定义仪表板，以可视化对您来说很重要的数据<br> 的各个方面。此外，还可以使用Elasticsearch聚合功能对数据执行复杂的业务智能查询。</p><h2 id="_15-详细描述一下-elasticsearch-更新和删除文档的过程。" tabindex="-1"><a class="header-anchor" href="#_15-详细描述一下-elasticsearch-更新和删除文档的过程。" aria-hidden="true">#</a> 15. 详细描述一下 Elasticsearch 更新和删除文档的过程。</h2><p>（1）删除和更新也都是写操作，但是 Elasticsearch 中的文档是不可变的，因此不能被删除或者改动以<br> 展示其变更；</p><p>（2）磁盘上的每个段都有一个相应的.del 文件。当删除请求发送后，文档并没有真的被删除，而是<br> 在.del 文件中被标记为删除。该文档依然能匹配查询，但是会在结果中被过滤掉。当段合并时，在.del<br> 文件中被标记为删除的文档将不会被写入新段。</p><p>（3）在新的文档被创建时，Elasticsearch 会为该文档指定一个版本号，当执行更新时，旧版本的文档<br> 在.del 文件中被标记为删除，新版本的文档被索引到一个新段。旧版本的文档依然能匹配查询，但是会<br> 在结果中被过滤掉。</p><h2 id="_16-详细描述一下-elasticsearch-搜索的过程。" tabindex="-1"><a class="header-anchor" href="#_16-详细描述一下-elasticsearch-搜索的过程。" aria-hidden="true">#</a> 16. 详细描述一下 Elasticsearch 搜索的过程。</h2><p>（1）搜索被执行成一个两阶段过程，我们称之为 Query Then Fetch；</p><p>（2）在初始查询阶段时，查询会广播到索引中每一个分片拷贝（主分片或者副本分片）。 每个分片在<br> 本地执行搜索并构建一个匹配文档的大小为 from + size 的优先队列。<br> PS：在搜索的时候是会查询 Filesystem Cache 的，但是有部分数据还在 MemoryBuffer，所以搜索是<br> 近实时的。</p><p>（3）每个分片返回各自优先队列中 所有文档的 ID 和排序值 给协调节点，它合并这些值到自己的优先<br> 队列中来产生一个全局排序后的结果列表。</p><p>（4）接下来就是 取回阶段，协调节点辨别出哪些文档需要被取回并向相关的分片提交多个 GET 请求。<br> 每个分片加载并 丰 富 文档，如果有需要的话，接着返回文档给协调节点。一旦所有的文档都被取回<br> 了，协调节点返回结果给客户端。</p><p>（5）补充：Query Then Fetch 的搜索类型在文档相关性打分的时候参考的是本分片的数据，这样在文<br> 档数量较少的时候可能不够准确，DFS Query Then Fetch 增加了一个预查询的处理，询问 Term 和<br> Document frequency，这个评分更准确，但是性能会变差。*<br><img src="https://img-blog.csdnimg.cn/96d8bb7b0aad42e1b1a1ebc449f22742.png" alt="在这里插入图片描述" loading="lazy"></p><h2 id="_17-在-elasticsearch-中-是怎么根据一个词找到对应的倒排索引的" tabindex="-1"><a class="header-anchor" href="#_17-在-elasticsearch-中-是怎么根据一个词找到对应的倒排索引的" aria-hidden="true">#</a> 17. 在 Elasticsearch 中，是怎么根据一个词找到对应的倒排索引的？</h2><p>（1）Lucene的索引过程，就是按照全文检索的基本过程，将倒排表写成此文件格式的过程。<br> （2）Lucene的搜索过程，就是按照此文件格式将索引进去的信息读出来，然后计算每篇文档打分<br> (score)的过程。</p><h2 id="_18-elasticsearch-在部署时-对-linux-的设置有哪些优化方法" tabindex="-1"><a class="header-anchor" href="#_18-elasticsearch-在部署时-对-linux-的设置有哪些优化方法" aria-hidden="true">#</a> 18. Elasticsearch 在部署时，对 Linux 的设置有哪些优化方法？</h2><p>（1）64 GB 内存的机器是非常理想的， 但是 32 GB 和 16 GB 机器也是很常见的。少于 8 GB 会适得其<br> 反。</p><p>（2）如果你要在更快的 CPUs 和更多的核心之间选择，选择更多的核心更好。多个内核提供的额外并<br> 发远胜过稍微快一点点的时钟频率。</p><p>（3）如果你负担得起 SSD，它将远远超出任何旋转介质。 基于 SSD 的节点，查询和索引性能都有提<br> 升。如果你负担得起，SSD 是一个好的选择。</p><p>（4）即使数据中心们近在咫尺，也要避免集群跨越多个数据中心。绝对要避免集群跨越大的地理距<br> 离。</p><p>（5）请确保运行你应用程序的 JVM 和服务器的 JVM 是完全一样的。 在Elasticsearch 的几个地方，使<br> 用 Java 的本地序列化。</p><p>（6）通过设置 gateway.recover_after_nodes、gateway.expected_nodes、<br> gateway.recover_after_time 可以在集群重启的时候避免过多的分片交换，这可能会让数据恢复从数个<br> 小时缩短为几秒钟。</p><p>（7）Elasticsearch 默认被配置为使用单播发现，以防止节点无意中加入集群。只有在同一台机器上运<br> 行的节点才会自动组成集群。最好使用单播代替组播。</p><p>（8）不要随意修改垃圾回收器（CMS）和各个线程池的大小。</p><p>（9）把你的内存的（少于）一半给 Lucene（但不要超过 32 GB！），通过ES_HEAP_SIZE 环境变量设置。</p><p>（10）内存交换到磁盘对服务器性能来说是致命的。如果内存交换到磁盘上，一个100 微秒的操作可能<br> 变成 10 毫秒。 再想想那么多 10 微秒的操作时延累加起来。 不难看出 swapping 对于性能是多么可<br> 怕。</p><p>（11）Lucene 使用了大 量 的文件。同时，Elasticsearch 在节点和 HTTP 客户端之间进行通信也使用<br> 了大量的套接字。 所有这一切都需要足够的文件描述符。你应该增加你的文件描述符，设置一个很大的<br> 值，如 64,000。</p><p>补充：索引阶段性能提升方法<br> （1）使用批量请求并调整其大小：每次批量数据 5–15 MB 大是个不错的起始点。<br> （2）存储：使用 SSD<br> （3）段和合并：Elasticsearch 默认值是 20 MB/s，对机械磁盘应该是个不错的设置。如果你用的是<br> SSD，可以考虑提高到 100–200 MB/s。如果你在做批量导入，完全不在意搜索，你可以彻底关掉合并<br> 限流。另外还可以增加index.translog.flush_threshold_size 设置，从默认的 512 MB 到更大一些的<br> 值，比如 1 GB，这可以在一次清空触发的时候在事务日志里积累出更大的段。<br> （4）如果你的搜索结果不需要近实时的准确度，考虑把每个索引的index.refresh_interval 改到 30s。<br> （5）如果你在做大批量导入，考虑通过设置 index.number_of_replicas: 0 关闭副本。</p><h2 id="_19-对于-gc-方面-在使用-elasticsearch-时要注意什么" tabindex="-1"><a class="header-anchor" href="#_19-对于-gc-方面-在使用-elasticsearch-时要注意什么" aria-hidden="true">#</a> 19. 对于 GC 方面，在使用 Elasticsearch 时要注意什么？</h2><p>（1）倒排词典的索引需要常驻内存，无法 GC，需要监控 data node 上 segmentmemory 增长趋势。</p><p>（2）各类缓存，field cache, filter cache, indexing cache, bulk queue 等等，要设置合理的大小，并<br> 且要应该根据最坏的情况来看 heap 是否够用，也就是各类缓存全部占满的时候，还有 heap 空间可以<br> 分配给其他任务吗？避免采用 clear cache等“自欺欺人”的方式来释放内存。</p><p>（3）避免返回大量结果集的搜索与聚合。确实需要大量拉取数据的场景，可以采用scan &amp; scroll api<br> 来实现。</p><p>（4）cluster stats 驻留内存并无法水平扩展，超大规模集群可以考虑分拆成多个集群通过 tribe node<br> 连接。</p><p>（5）想知道 heap 够不够，必须结合实际应用场景，并对集群的 heap 使用情况做持续的监控。</p><p>（6）根据监控数据理解内存需求，合理配置各类circuit breaker，将内存溢出风险降低到最低</p><h2 id="_20-elasticsearch-对于大数据量-上亿量级-的聚合如何实现" tabindex="-1"><a class="header-anchor" href="#_20-elasticsearch-对于大数据量-上亿量级-的聚合如何实现" aria-hidden="true">#</a> 20. Elasticsearch 对于大数据量（上亿量级）的聚合如何实现？</h2><p>Elasticsearch 提供的首个近似聚合是 cardinality 度量。它提供一个字段的基数，即该字段的 distinct<br> 或者 unique 值的数目。它是基于 HLL 算法的。HLL 会先对我们的输入作哈希运算，然后根据哈希运算<br> 的结果中的 bits 做概率估算从而得到基数。其特点是：可配置的精度，用来控制内存的使用（更精确<br> ＝ 更多内存）；小的数据集精度是非常高的；我们可以通过配置参数，来设置去重需要的固定内存使用<br> 量。无论数千还是数十亿的唯一值，内存使用量只与你配置的精确度相关。</p><h2 id="_21-在并发情况下-elasticsearch-如果保证读写一致" tabindex="-1"><a class="header-anchor" href="#_21-在并发情况下-elasticsearch-如果保证读写一致" aria-hidden="true">#</a> 21. 在并发情况下，Elasticsearch 如果保证读写一致？</h2><p>（1）可以通过版本号使用乐观并发控制，以确保新版本不会被旧版本覆盖，由应用层来处理具体的冲突；</p><p>（2）另外对于写操作，一致性级别支持 quorum/one/all，默认为 quorum，即只有当大多数分片可用<br> 时才允许写操作。但即使大多数可用，也可能存在因为网络等原因导致写入副本失败，这样该副本被认<br> 为故障，分片将会在一个不同的节点上重建。</p><p>（3）对于读操作，可以设置 replication 为 sync(默认)，这使得操作在主分片和副本分片都完成后才会<br> 返回；如果设置 replication 为 async 时，也可以通过设置搜索请求参数_preference 为 primary 来查<br> 询主分片，确保文档是最新版本。</p><h2 id="_22-如何监控-elasticsearch-集群状态" tabindex="-1"><a class="header-anchor" href="#_22-如何监控-elasticsearch-集群状态" aria-hidden="true">#</a> 22. 如何监控 Elasticsearch 集群状态？</h2><p>Marvel 让你可以很简单的通过 Kibana 监控 Elasticsearch。你可以实时查看你的集群健康状态和性<br> 能，也可以分析过去的集群、索引和节点指标。</p><h2 id="_23-介绍下你们电商搜索的整体技术架构。" tabindex="-1"><a class="header-anchor" href="#_23-介绍下你们电商搜索的整体技术架构。" aria-hidden="true">#</a> 23. 介绍下你们电商搜索的整体技术架构。</h2><h2 id="_24-介绍一下你们的个性化搜索方案" tabindex="-1"><a class="header-anchor" href="#_24-介绍一下你们的个性化搜索方案" aria-hidden="true">#</a> 24. 介绍一下你们的个性化搜索方案？</h2><p>基于word2vec和Elasticsearch实现个性化搜索<br> （1）基于word2vec、Elasticsearch和自定义的脚本插件，我们就实现了一个个性化的搜索服务，相对<br> 于原有的实现，新版的点击率和转化率都有大幅的提升；</p><p>（2）基于word2vec的商品向量还有一个可用之处，就是可以用来实现相似商品的推荐；</p><p>（3）使用word2vec来实现个性化搜索或个性化推荐是有一定局限性的，因为它只能处理用户点击历史<br> 这样的时序数据，而无法全面的去考虑用户偏好，这个还是有很大的改进和提升的空间；</p><h2 id="_25-是否了解字典树" tabindex="-1"><a class="header-anchor" href="#_25-是否了解字典树" aria-hidden="true">#</a> 25. 是否了解字典树？</h2><p>常用字典数据结构如下所示：<br> Trie 的核心思想是空间换时间，利用字符串的公共前缀来降低查询时间的开销以达到提高效率的目的。<br> 它有 3 个基本性质：<br> 1）根节点不包含字符，除根节点外每一个节点都只包含一个字符。<br> 2）从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串。<br> 3）每个节点的所有子节点包含的字符都不相同。<br> （1）可以看到，trie 树每一层的节点数是 26^i 级别的。所以为了节省空间，我们还可以用动态链表，<br> 或者用数组来模拟动态。而空间的花费，不会超过单词数×单词长度。</p><p>（2）实现：对每个结点开一个字母集大小的数组，每个结点挂一个链表，使用左儿子右兄弟表示法记<br> 录这棵树；</p><p>（3）对于中文的字典树，每个节点的子节点用一个哈希表存储，这样就不用浪费太大的空间，而且查<br> 询速度上可以保留哈希的复杂度 O(1)。</p><h2 id="_26-拼写纠错是如何实现的" tabindex="-1"><a class="header-anchor" href="#_26-拼写纠错是如何实现的" aria-hidden="true">#</a> 26. 拼写纠错是如何实现的？</h2><p>（1）拼写纠错是基于编辑距离来实现；编辑距离是一种标准的方法，它用来表示经过插入、删除和替<br> 换操作从一个字符串转换到另外一个字符串的最小操作步数；</p><p>（2）编辑距离的计算过程：比如要计算 batyu 和 beauty 的编辑距离，先创建一个7×8 的表（batyu<br> 长度为 5，coffee 长度为 6，各加 2），接着，在如下位置填入黑色数字。其他格的计算过程是取以下<br> 三个值的最小值：</p><p>如果最上方的字符等于最左方的字符，则为左上方的数字。否则为左上方的数字+1。（对于 3,3 来说为<br> 0）<br> 左方数字+1（对于 3,3 格来说为 2）<br> 上方数字+1（对于 3,3 格来说为 2）<br> 最终取右下角的值即为编辑距离的值 3。<br><img src="https://img-blog.csdnimg.cn/7d6c2f0ef35c4f839b9a5a73354c0f75.png" alt="在这里插入图片描述" loading="lazy"><br> 对于拼写纠错，我们考虑构造一个度量空间（Metric Space），该空间内任何关系满足以下三条基本条<br> 件：<br> d(x,y) = 0 – 假如 x 与 y 的距离为 0，则 x=y<br> d(x,y) = d(y,x) – x 到 y 的距离等同于 y 到 x 的距离<br> d(x,y) + d(y,z) &gt;= d(x,z) – 三角不等式</p><p>（1）根据三角不等式，则满足与 query 距离在 n 范围内的另一个字符转 B，其与 A的距离最大为<br> d+n，最小为 d-n。</p><p>（2）BK 树的构造就过程如下：每个节点有任意个子节点，每条边有个值表示编辑距离。所有子节点到<br> 父节点的边上标注 n 表示编辑距离恰好为 n。比如，我们有棵树父节点是”book”和两个子节点”cake”和”<br> books”，”book”到”books”的边标号 1，”book”到”cake”的边上标号 4。从字典里构造好树后，无论何时<br> 你想插入新单词时，计算该单词与根节点的编辑距离，并且查找数值为d(neweord, root)的边。递归得<br> 与各子节点进行比较，直到没有子节点，你就可以创建新的子节点并将新单词保存在那。比如，插入”<br> boo”到刚才上述例子的树中，我们先检查根节点，查找 d(“book”, “boo”) = 1 的边，然后检查标号为1<br> 的边的子节点，得到单词”books”。我们再计算距离 d(“books”, “boo”)=2，则将新单词插在”books”之<br> 后，边标号为 2。</p><p>3、查询相似词如下：计算单词与根节点的编辑距离 d，然后递归查找每个子节点标号为 d-n 到<br> d+n（包含）的边。假如被检查的节点与搜索单词的距离 d 小于 n，则返回该节点并继续查询。比如输<br> 入 cape 且最大容忍距离为 1，则先计算和根的编辑距离 d(“book”, “cape”)=4，然后接着找和根节点之<br> 间编辑距离为 3 到5 的，这个就找到了 cake 这个节点，计算 d(“cake”, “cape”)=1，满足条件所以返回<br> cake，然后再找和 cake 节点编辑距离是 0 到 2 的，分别找到 cape 和cart 节点，这样就得到 cape 这<br> 个满足条件的结果。</p><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a> <img src="https://img-blog.csdnimg.cn/cf192814c80e469089177a9b8514c5b4.png" alt="在这里插入图片描述" loading="lazy"></h2>`,130),h=[c];function l(t,d){return e(),r("div",null,h)}const b=a(s,[["render",l],["__file","ElasticSearch面试题（31道含答案）.html.vue"]]);export{b as default};
