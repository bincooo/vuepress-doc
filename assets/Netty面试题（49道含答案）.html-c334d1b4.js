const e=JSON.parse('{"key":"v-34b721a6","path":"/guide/markdown/Java%E9%9D%A2%E8%AF%95%E5%AE%9D%E5%85%B8/Netty%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8849%E9%81%93%E5%90%AB%E7%AD%94%E6%A1%88%EF%BC%89.html","title":"","lang":"zh-CN","frontmatter":{"description":"目录 1. Netty 2. BIO 3. IO 模式 4. 五种 I/O 模型 5. 阻塞 IO 6. 非阻塞 IO 7. IO 多路复用 8. 信号驱动 9. 异步 IO 10.IO 多路复用 11. select 12. poll 13. epoll 14. Java的i/o 15. Netty 线程模型和 Reactor 模式 16. Reactor 单线程模型 17. Reactor 多线程模型 18. Reactor 主从线程模型 19. Netty 使用 NIO 而不是 AIO 20. Echo服务 21. EventLoop和EventLoopGroup 22. Bootstrap 23. channel 24. childHandler 25. childOption 26. option 27. childOption 28. childHandler 29. Channel 30. ChannelHandler和ChannelPipeline 31. ChannelHandlerContext 32. Handler执行顺序 33. ChannelFuture 34. ChannelPromise 35. 编解码 36. Netty解码器 Decoder 37. Netty 编码器 Encoder 38. Netty 组合编解码器 Codec 39. TCP 粘包，拆包 40. TCP 半包读写解决方案 41. Netty 自带解决 TCP 半包读写方案 42. 实战半包读写 43. 自定义分隔符解决 TCP 读写问题 44. 自定义长度半包读写器 LengthFieldBasedFrameDecoder 45. ByteBuf 46. ByteBuf 创建方法与常见的模式 47. Netty 设计模式 48. Netty 单机百万实战 49. 数据链路","head":[["meta",{"property":"og:url","content":"https://www.icu-web.tk/vuepress-doc/guide/markdown/Java%E9%9D%A2%E8%AF%95%E5%AE%9D%E5%85%B8/Netty%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8849%E9%81%93%E5%90%AB%E7%AD%94%E6%A1%88%EF%BC%89.html"}],["meta",{"property":"og:site_name","content":"折戟沉沙、丿"}],["meta",{"property":"og:description","content":"目录 1. Netty 2. BIO 3. IO 模式 4. 五种 I/O 模型 5. 阻塞 IO 6. 非阻塞 IO 7. IO 多路复用 8. 信号驱动 9. 异步 IO 10.IO 多路复用 11. select 12. poll 13. epoll 14. Java的i/o 15. Netty 线程模型和 Reactor 模式 16. Reactor 单线程模型 17. Reactor 多线程模型 18. Reactor 主从线程模型 19. Netty 使用 NIO 而不是 AIO 20. Echo服务 21. EventLoop和EventLoopGroup 22. Bootstrap 23. channel 24. childHandler 25. childOption 26. option 27. childOption 28. childHandler 29. Channel 30. ChannelHandler和ChannelPipeline 31. ChannelHandlerContext 32. Handler执行顺序 33. ChannelFuture 34. ChannelPromise 35. 编解码 36. Netty解码器 Decoder 37. Netty 编码器 Encoder 38. Netty 组合编解码器 Codec 39. TCP 粘包，拆包 40. TCP 半包读写解决方案 41. Netty 自带解决 TCP 半包读写方案 42. 实战半包读写 43. 自定义分隔符解决 TCP 读写问题 44. 自定义长度半包读写器 LengthFieldBasedFrameDecoder 45. ByteBuf 46. ByteBuf 创建方法与常见的模式 47. Netty 设计模式 48. Netty 单机百万实战 49. 数据链路"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-05T14:04:17.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-05T14:04:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-05T14:04:17.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":2,"title":"1. Netty","slug":"_1-netty","link":"#_1-netty","children":[]},{"level":2,"title":"2. BIO","slug":"_2-bio","link":"#_2-bio","children":[]},{"level":2,"title":"3. IO 模式","slug":"_3-io-模式","link":"#_3-io-模式","children":[]},{"level":2,"title":"4. 五种 I/O 模型","slug":"_4-五种-i-o-模型","link":"#_4-五种-i-o-模型","children":[]},{"level":2,"title":"5. 阻塞 IO","slug":"_5-阻塞-io","link":"#_5-阻塞-io","children":[]},{"level":2,"title":"6. 非阻塞 IO","slug":"_6-非阻塞-io","link":"#_6-非阻塞-io","children":[]},{"level":2,"title":"7. IO 多路复用","slug":"_7-io-多路复用","link":"#_7-io-多路复用","children":[]},{"level":2,"title":"8. 信号驱动","slug":"_8-信号驱动","link":"#_8-信号驱动","children":[]},{"level":2,"title":"9. 异步 IO","slug":"_9-异步-io","link":"#_9-异步-io","children":[]},{"level":2,"title":"10.IO 多路复用","slug":"_10-io-多路复用","link":"#_10-io-多路复用","children":[]},{"level":2,"title":"11. select","slug":"_11-select","link":"#_11-select","children":[]},{"level":2,"title":"12. poll","slug":"_12-poll","link":"#_12-poll","children":[]},{"level":2,"title":"13. epoll","slug":"_13-epoll","link":"#_13-epoll","children":[]},{"level":2,"title":"14. Java的i/o","slug":"_14-java的i-o","link":"#_14-java的i-o","children":[]},{"level":2,"title":"15. Netty 线程模型和 Reactor 模式","slug":"_15-netty-线程模型和-reactor-模式","link":"#_15-netty-线程模型和-reactor-模式","children":[]},{"level":2,"title":"16. Reactor 单线程模型","slug":"_16-reactor-单线程模型","link":"#_16-reactor-单线程模型","children":[]},{"level":2,"title":"17. Reactor 多线程模型","slug":"_17-reactor-多线程模型","link":"#_17-reactor-多线程模型","children":[]},{"level":2,"title":"18. Reactor 主从线程模型","slug":"_18-reactor-主从线程模型","link":"#_18-reactor-主从线程模型","children":[]},{"level":2,"title":"19. Netty 使用 NIO 而不是 AIO","slug":"_19-netty-使用-nio-而不是-aio","link":"#_19-netty-使用-nio-而不是-aio","children":[]},{"level":2,"title":"20. Echo服务","slug":"_20-echo服务","link":"#_20-echo服务","children":[]},{"level":2,"title":"21. EventLoop和EventLoopGroup","slug":"_21-eventloop和eventloopgroup","link":"#_21-eventloop和eventloopgroup","children":[]},{"level":2,"title":"22. Bootstrap","slug":"_22-bootstrap","link":"#_22-bootstrap","children":[]},{"level":2,"title":"23. channel","slug":"_23-channel","link":"#_23-channel","children":[]},{"level":2,"title":"24. childHandler","slug":"_24-childhandler","link":"#_24-childhandler","children":[]},{"level":2,"title":"25. childOption","slug":"_25-childoption","link":"#_25-childoption","children":[]},{"level":2,"title":"26. option","slug":"_26-option","link":"#_26-option","children":[]},{"level":2,"title":"27. childOption","slug":"_27-childoption","link":"#_27-childoption","children":[]},{"level":2,"title":"28. childHandler","slug":"_28-childhandler","link":"#_28-childhandler","children":[]},{"level":2,"title":"29. Channel","slug":"_29-channel","link":"#_29-channel","children":[]},{"level":2,"title":"30. ChannelHandler和ChannelPipeline","slug":"_30-channelhandler和channelpipeline","link":"#_30-channelhandler和channelpipeline","children":[]},{"level":2,"title":"31. ChannelHandlerContext","slug":"_31-channelhandlercontext","link":"#_31-channelhandlercontext","children":[]},{"level":2,"title":"32. Handler执行顺序","slug":"_32-handler执行顺序","link":"#_32-handler执行顺序","children":[]},{"level":2,"title":"33. ChannelFuture","slug":"_33-channelfuture","link":"#_33-channelfuture","children":[]},{"level":2,"title":"34. ChannelPromise","slug":"_34-channelpromise","link":"#_34-channelpromise","children":[]},{"level":2,"title":"35. 编解码","slug":"_35-编解码","link":"#_35-编解码","children":[]},{"level":2,"title":"36. Netty解码器 Decoder","slug":"_36-netty解码器-decoder","link":"#_36-netty解码器-decoder","children":[]},{"level":2,"title":"37. Netty 编码器 Encoder","slug":"_37-netty-编码器-encoder","link":"#_37-netty-编码器-encoder","children":[]},{"level":2,"title":"38. Netty 组合编解码器 Codec","slug":"_38-netty-组合编解码器-codec","link":"#_38-netty-组合编解码器-codec","children":[]},{"level":2,"title":"39. TCP 粘包，拆包","slug":"_39-tcp-粘包-拆包","link":"#_39-tcp-粘包-拆包","children":[]},{"level":2,"title":"40. TCP 半包读写解决方案","slug":"_40-tcp-半包读写解决方案","link":"#_40-tcp-半包读写解决方案","children":[]},{"level":2,"title":"41. Netty 自带解决 TCP 半包读写方案","slug":"_41-netty-自带解决-tcp-半包读写方案","link":"#_41-netty-自带解决-tcp-半包读写方案","children":[]},{"level":2,"title":"42. 实战半包读写","slug":"_42-实战半包读写","link":"#_42-实战半包读写","children":[]},{"level":2,"title":"43. 自定义分隔符解决 TCP 读写问题","slug":"_43-自定义分隔符解决-tcp-读写问题","link":"#_43-自定义分隔符解决-tcp-读写问题","children":[]},{"level":2,"title":"44. 自定义长度半包读写器 LengthFieldBasedFrameDecoder","slug":"_44-自定义长度半包读写器-lengthfieldbasedframedecoder","link":"#_44-自定义长度半包读写器-lengthfieldbasedframedecoder","children":[]},{"level":2,"title":"45. ByteBuf","slug":"_45-bytebuf","link":"#_45-bytebuf","children":[]},{"level":2,"title":"46. ByteBuf 创建方法与常见的模式","slug":"_46-bytebuf-创建方法与常见的模式","link":"#_46-bytebuf-创建方法与常见的模式","children":[]},{"level":2,"title":"47. Netty 设计模式","slug":"_47-netty-设计模式","link":"#_47-netty-设计模式","children":[]},{"level":2,"title":"48. Netty 单机百万实战","slug":"_48-netty-单机百万实战","link":"#_48-netty-单机百万实战","children":[]},{"level":2,"title":"49. 数据链路","slug":"_49-数据链路","link":"#_49-数据链路","children":[]}],"git":{"createdTime":1693922657000,"updatedTime":1693922657000,"contributors":[{"name":"bincooo","email":"admin@bincooodeiMac.local","commits":1}]},"readingTime":{"minutes":21.06,"words":6318},"filePathRelative":"guide/markdown/Java面试宝典/Netty面试题（49道含答案）.md","localizedDate":"2023年9月5日","excerpt":"<h3> 目录</h3>\\n<ul>\\n<li><a href=\\"#1_Netty_2\\">1. Netty</a></li>\\n<li><a href=\\"#2_BIO_10\\">2. BIO</a></li>\\n<li><a href=\\"#3_IO__14\\">3. IO 模式</a></li>\\n<li><a href=\\"#4__IO__19\\">4. 五种 I/O 模型</a></li>\\n<li><a href=\\"#5__IO_23\\">5. 阻塞 IO</a></li>\\n<li><a href=\\"#6__IO_25\\">6. 非阻塞 IO</a></li>\\n<li><a href=\\"#7_IO__27\\">7. IO 多路复用</a></li>\\n<li><a href=\\"#8__32\\">8. 信号驱动</a></li>\\n<li><a href=\\"#9__IO_34\\">9. 异步 IO</a></li>\\n<li><a href=\\"#10IO__47\\">10.IO 多路复用</a></li>\\n<li><a href=\\"#11_select_52\\">11. select</a></li>\\n<li><a href=\\"#12_poll_61\\">12. poll</a></li>\\n<li><a href=\\"#13_epoll_65\\">13. epoll</a></li>\\n<li><a href=\\"#14_Javaio_85\\">14. Java的i/o</a></li>\\n<li><a href=\\"#15_Netty__Reactor__91\\">15. Netty 线程模型和 Reactor 模式</a></li>\\n<li><a href=\\"#16_Reactor__102\\">16. Reactor 单线程模型</a></li>\\n<li><a href=\\"#17_Reactor__109\\">17. Reactor 多线程模型</a></li>\\n<li><a href=\\"#18_Reactor__114\\">18. Reactor 主从线程模型</a></li>\\n<li><a href=\\"#19_Netty__NIO__AIO_119\\">19. Netty 使用 NIO 而不是 AIO</a></li>\\n<li><a href=\\"#20_Echo_124\\">20. Echo服务</a></li>\\n<li><a href=\\"#21_EventLoopEventLoopGroup_127\\">21. EventLoop和EventLoopGroup</a></li>\\n<li><a href=\\"#22_Bootstrap_135\\">22. Bootstrap</a></li>\\n<li><a href=\\"#23_channel_147\\">23. channel</a></li>\\n<li><a href=\\"#24_childHandler_151\\">24. childHandler</a></li>\\n<li><a href=\\"#25_childOption_154\\">25. childOption</a></li>\\n<li><a href=\\"#26_option_157\\">26. option</a></li>\\n<li><a href=\\"#27_childOption_174\\">27. childOption</a></li>\\n<li><a href=\\"#28_childHandler_177\\">28. childHandler</a></li>\\n<li><a href=\\"#29_Channel_180\\">29. Channel</a></li>\\n<li><a href=\\"#30_ChannelHandlerChannelPipeline_201\\">30. ChannelHandler和ChannelPipeline</a></li>\\n<li><a href=\\"#31_ChannelHandlerContext_214\\">31. ChannelHandlerContext</a></li>\\n<li><a href=\\"#32_Handler_226\\">32. Handler执行顺序</a></li>\\n<li><a href=\\"#33_ChannelFuture_242\\">33. ChannelFuture</a></li>\\n<li><a href=\\"#34_ChannelPromise_252\\">34. ChannelPromise</a></li>\\n<li><a href=\\"#35__255\\">35. 编解码</a></li>\\n<li><a href=\\"#36_Netty_Decoder_268\\">36. Netty解码器 Decoder</a></li>\\n<li><a href=\\"#37_Netty__Encoder_288\\">37. Netty 编码器 Encoder</a></li>\\n<li><a href=\\"#38_Netty__Codec_295\\">38. Netty 组合编解码器 Codec</a></li>\\n<li><a href=\\"#39_TCP__300\\">39. TCP 粘包，拆包</a></li>\\n<li><a href=\\"#40_TCP__307\\">40. TCP 半包读写解决方案</a></li>\\n<li><a href=\\"#41_Netty__TCP__317\\">41. Netty 自带解决 TCP 半包读写方案</a></li>\\n<li><a href=\\"#42__323\\">42. 实战半包读写</a></li>\\n<li><a href=\\"#43__TCP__326\\">43. 自定义分隔符解决 TCP 读写问题</a></li>\\n<li><a href=\\"#44__LengthFieldBasedFrameDecoder_333\\">44. 自定义长度半包读写器 LengthFieldBasedFrameDecoder</a></li>\\n<li><a href=\\"#45_ByteBuf_341\\">45. ByteBuf</a></li>\\n<li><a href=\\"#46_ByteBuf__351\\">46. ByteBuf 创建方法与常见的模式</a></li>\\n<li><a href=\\"#47_Netty__369\\">47. Netty 设计模式</a></li>\\n<li><a href=\\"#48_Netty__373\\">48. Netty 单机百万实战</a></li>\\n<li><a href=\\"#49__405\\">49. 数据链路</a></li>\\n</ul>","autoDesc":true}');export{e as data};
