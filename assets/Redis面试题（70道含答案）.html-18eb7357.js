import{_ as d,E as a,Z as s,$ as t,a0 as e,a3 as l,a1 as r,a4 as n}from"./framework-e0d053a9.js";const h={},o=n('<h3 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h3><ul><li><a href="#_2">一、概述</a></li><li><ul><li><a href="#1_Redis_3">1. 什么是Redis？</a></li><li><a href="#2_Redis_10">2. Redis有哪些优缺点？</a></li><li><a href="#3_redis_28">3. 使用redis有哪些好处？</a></li><li><a href="#4__Redis___35">4. 为什么要用 Redis / 为什么要用缓存</a></li><li><a href="#5__Redis__mapguava__46">5. 为什么要用 Redis 而不用 map/guava 做缓存?</a></li><li><a href="#6_Redis_54">6. Redis为什么这么快</a></li><li><a href="#7_Redis_66">7. Redis有哪些数据类型</a></li><li><a href="#8_Redis_77">8. Redis的应用场景</a></li><li><a href="#9__101">9. 持久化</a></li><li><a href="#10_Redis__104">10. Redis 的持久化机制是什么？各自的优缺点？</a></li><li><a href="#11__142">11. 如何选择合适的持久化方式</a></li><li><a href="#12_Redis_153">12. Redis持久化数据和缓存怎么做扩容？</a></li><li><a href="#13_Redis_159">13. Redis的过期键的删除策略</a></li><li><a href="#14_Redis_key_175">14. Redis key的过期时间和永久有效分别怎么设置？</a></li><li><a href="#15_expirekey__178">15. 我们知道通过expire来设置key 的过期时间，那么对过期的数据怎么处理呢?</a></li><li><a href="#16_MySQL2000wredis20wredis_187">16. MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据</a></li><li><a href="#17_Redis_190">17. Redis的内存淘汰策略有哪些</a></li><li><a href="#18_Redis_207">18. Redis主要消耗什么物理资源？</a></li><li><a href="#19_Redis_210">19. Redis的内存用完了会发生什么？</a></li><li><a href="#20_Redis_214">20. Redis如何做内存优化？</a></li></ul></li><li><a href="#_223">二、线程模型</a></li><li><ul><li><a href="#21_Redis_224">21. Redis线程模型</a></li></ul></li><li><a href="#_240">三、事务</a></li><li><ul><li><a href="#22__241">22. 什么是事务？</a></li><li><a href="#23_Redis_246">23. Redis事务的概念</a></li><li><a href="#24_Redis_252">24. Redis事务的三个阶段</a></li><li><a href="#25_Redis_259">25. Redis事务相关命令</a></li><li><a href="#26_ACID_278">26. 事务管理（ACID）概述</a></li><li><a href="#27_Redis_290">27. Redis事务支持隔离性吗</a></li><li><a href="#28_Redis_294">28. Redis事务保证原子性吗，支持回滚吗</a></li><li><a href="#29_Redis_298">29. Redis事务其他实现</a></li></ul></li><li><a href="#_306">四、集群方案</a></li><li><ul><li><a href="#30__307">30. 哨兵模式</a></li><li><a href="#31_Redis_Cluster__328">31. 官方Redis Cluster 方案(服务端路由查询)</a></li><li><a href="#32__373">32. 基于客户端分配</a></li><li><a href="#33__390">33. 基于代理服务器分片</a></li><li><a href="#34_Redis__405">34. Redis 主从架构</a></li><li><a href="#35_Redis_454">35. Redis集群的主从复制模型是怎样的？</a></li><li><a href="#36__redis__458">36. 生产环境中的 redis 是怎么部署的？</a></li><li><a href="#37_Redis_473">37. 说说Redis哈希槽的概念？</a></li><li><a href="#38_Redis_477">38. Redis集群会有写操作丢失吗？为什么？</a></li><li><a href="#39_Redis_480">39. Redis集群之间是如何复制的？</a></li><li><a href="#40_Redis_483">40. Redis集群最大节点个数是多少？</a></li><li><a href="#41_Redis_486">41. Redis集群如何选择数据库？</a></li></ul></li><li><a href="#_491">五、分区</a></li><li><ul><li><a href="#42_RedisCPU_492">42. Redis是单线程的，如何提高多核CPU的利用率？</a></li><li><a href="#43_Redis_496">43. 为什么要做Redis分区？</a></li><li><a href="#44_Redis_501">44. 你知道有哪些Redis分区实现方案？</a></li><li><a href="#45_Redis_510">45. Redis分区有什么缺点？</a></li></ul></li><li><a href="#__522">六、 分布式问题</a></li><li><ul><li><a href="#46_Redis_523">46. Redis实现分布式锁</a></li><li><a href="#47__Redis__Key__536">47. 如何解决 Redis 的并发竞争 Key 问题</a></li><li><a href="#48_Redis_549">48. 分布式Redis是前期做还是后期规模上来了再做好？为什么？</a></li><li><a href="#49__RedLock_559">49. 什么是 RedLock</a></li></ul></li><li><a href="#_568">七、缓存异常</a></li><li><ul><li><a href="#50_redis_569">50. 什么是redis穿透？</a></li><li><a href="#51_redis_577">51. 什么是redis雪崩？</a></li><li><a href="#52_redis_585">52. 什么是redis穿透？</a></li><li><a href="#53__592">53. 缓存预热</a></li><li><a href="#54__600">54. 缓存降级</a></li><li><a href="#55__619">55. 热点数据和冷数据</a></li><li><a href="#56_key_632">56. 缓存热点key</a></li></ul></li><li><a href="#_642">八、常用工具</a></li><li><ul><li><a href="#57_RedisJava_643">57. Redis支持的Java客户端都有哪些？官方推荐用哪个？</a></li><li><a href="#58_RedisRedisson_645">58. Redis和Redisson有什么关系？</a></li><li><a href="#59_JedisRedisson_652">59. Jedis与Redisson对比有什么优缺点？</a></li></ul></li><li><a href="#_660">九、其他问题</a></li><li><ul><li><a href="#60_RedisMemcached_661">60. Redis与Memcached的区别</a></li><li><a href="#61__682">61. 如何保证缓存与数据库双写时的数据一致性？</a></li><li><a href="#62_Redis_699">62. Redis常见性能问题和解决方案？</a></li><li><a href="#63_RedisWindows_711">63. Redis官方为什么不提供Windows版本？</a></li><li><a href="#64__715">64. 一个字符串类型的值能存储最大容量是多少？</a></li><li><a href="#65_Redis_718">65. Redis如何做大量数据插入？</a></li><li><a href="#66_Redis1key10wkey_721">66. 假如Redis里面有1亿个key，其中有10w个key是以某个固定的已知的前缀开头的，如果将它们全部找出来？</a></li><li><a href="#67_Redis_729">67. 使用Redis做过异步队列吗，是如何实现的</a></li><li><a href="#68_Redis_735">68. Redis如何实现延时队列</a></li><li><a href="#69_Redis_739">69. Redis回收进程如何工作的？</a></li><li><a href="#70_Redis_747">70. Redis回收使用的是什么算法？</a></li></ul></li></ul><h2 id="一、概述" tabindex="-1"><a class="header-anchor" href="#一、概述" aria-hidden="true">#</a> 一、概述</h2><h2 id="_1-什么是redis" tabindex="-1"><a class="header-anchor" href="#_1-什么是redis" aria-hidden="true">#</a> 1. 什么是Redis？</h2><ul><li>Redis 是一个使用 C 语言写成的，开源的高性能key-value非关系缓存数据库。它支持存储的value<br> 类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set --有序集合)和<br> hash（哈希类型）。Redis的数据都基于缓存的，所以很快，每秒可以处理超过 10万次读写操<br> 作，是已知性能最快的Key-Value DB。Redis也可以实现数据写入磁盘中，保证了数据的安全不丢<br> 失，而且Redis的操作是原子性的。</li></ul><h2 id="_2-redis有哪些优缺点" tabindex="-1"><a class="header-anchor" href="#_2-redis有哪些优缺点" aria-hidden="true">#</a> 2. Redis有哪些优缺点？</h2><ul><li>优点 <ul><li>读写性能优异， Redis能读的速度是110000次/s，写的速度是81000次/s。</li><li>支持数据持久化，支持AOF和RDB两种持久化方式。</li><li>支持事务，Redis的所有操作都是原子性的，同时Redis还支持对几个操作合并后的原子性执<br> 行。</li><li>数据结构丰富，除了支持string类型的value外还支持hash、set、zset、list等数据结构。</li><li>支持主从复制，主机会自动将数据同步到从机，可以进行读写分离。</li></ul></li><li>缺点 <ul><li>数据库容量受到物理内存的限制，不能用作海量数据的高性能读写，因此Redis适合的场景主<br> 要局限在较小数据量的高性能操作和运算上。</li><li>Redis 不具备自动容错和恢复功能，主机从机的宕机都会导致前端部分读写请求失败，需要<br> 等待机器重启或者手动切换前端的IP才能恢复。</li><li>主机宕机，宕机前有部分数据未能及时同步到从机，切换IP后还会引入数据不一致的问题，<br> 降低了系统的可用性。</li><li>Redis 较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。为避免这一问<br> 题，运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。</li></ul></li></ul><h2 id="_3-使用redis有哪些好处" tabindex="-1"><a class="header-anchor" href="#_3-使用redis有哪些好处" aria-hidden="true">#</a> 3. 使用redis有哪些好处？</h2><p>(1) 速度快，因为数据存在内存中，类似于HashMap，HashMap的优势就是查找和操作的时间复<br> 杂度都很低<br> (2)支持丰富数据类型，支持string，list，set，sorted set，hash<br> (3) 支持事务，操作都是原子性，所谓的原子性就是对数据的更改要么全部执行，要么全部不执行<br> (4) 丰富的特性：可用于缓存，消息，按key设置过期时间，过期后将会自动删除</p><h2 id="_4-为什么要用-redis-为什么要用缓存" tabindex="-1"><a class="header-anchor" href="#_4-为什么要用-redis-为什么要用缓存" aria-hidden="true">#</a> 4. 为什么要用 Redis / 为什么要用缓存</h2><p><code>主要从“高性能”和“高并发”这两点来看待这个问题。</code></p><ul><li>高性能： <ul><li>假如用户第一次访问数据库中的某些数据。这个过程会比较慢，因为是从硬盘上读取的。将<br> 该用户访问的数据存在数缓存中，这样下一次再访问这些数据的时候就可以直接从缓存中获<br> 取了。操作缓存就是直接操作内存，所以速度相当快。如果数据库中的对应数据改变的之<br> 后，同步改变缓存中相应的数据即可！</li></ul></li><li>高并发： <ul><li>直接操作缓存能够承受的请求是远远大于直接访问数据库的，所以我们可以考虑把数据库中<br> 的部分数据转移到缓存中去，这样用户的一部分请求会直接到缓存这里而不用经过数据库。</li></ul></li></ul><h2 id="_5-为什么要用-redis-而不用-map-guava-做缓存" tabindex="-1"><a class="header-anchor" href="#_5-为什么要用-redis-而不用-map-guava-做缓存" aria-hidden="true">#</a> 5. 为什么要用 Redis 而不用 map/guava 做缓存?</h2><ul><li>缓存分为本地缓存和分布式缓存。以 Java 为例，使用自带的 map 或者 guava 实现的是本地缓<br> 存，最主要的特点是轻量以及快速，生命周期随着 jvm 的销毁而结束，并且在多实例的情况下，<br> 每个实例都需要各自保存一份缓存，缓存不具有一致性。</li><li>使用 redis 或 memcached 之类的称为分布式缓存，在多实例的情况下，各实例共用一份缓存数<br> 据，缓存具有一致性。缺点是需要保持 redis 或 memcached服务的高可用，整个程序架构上较为<br> 复杂。</li></ul><h2 id="_6-redis为什么这么快" tabindex="-1"><a class="header-anchor" href="#_6-redis为什么这么快" aria-hidden="true">#</a> 6. Redis为什么这么快</h2><p>1、完全基于内存，绝大部分请求是纯粹的内存操作，非常快速。数据存在内存中，类似于<br> HashMap，HashMap 的优势就是查找和操作的时间复杂度都是O(1)；<br> 2、数据结构简单，对数据操作也简单，Redis 中的数据结构是专门进行设计的；<br> 3、采用单线程，避免了不必要的上下文切换和竞争条件，也不存在多进程或者多线程导致的切换<br> 而消耗 CPU，不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致<br> 的性能消耗；<br> 4、使用多路 I/O 复用模型，非阻塞 IO；<br> 5、使用底层模型不同，它们之间底层实现方式以及与客户端之间通信的应用协议不一样，Redis<br> 直接自己构建了 VM 机制 ，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请<br> 求</p><h2 id="_7-redis有哪些数据类型" tabindex="-1"><a class="header-anchor" href="#_7-redis有哪些数据类型" aria-hidden="true">#</a> 7. Redis有哪些数据类型</h2><ul><li>Redis主要有5种数据类型，包括String，List，Set，Zset，Hash，满足大部分的使用要求</li></ul><table><thead><tr><th>数据类型</th><th>可以存储的值</th><th>操作</th><th>应用场景</th></tr></thead><tbody><tr><td>String</td><td>字符串、整数或者浮点数</td><td>对整个字符串或者字符串的其中一部分执行操作，对整数和浮点数执行自增或者自减操作</td><td>做简单的键值对缓存</td></tr><tr><td>List</td><td>列表</td><td>从两端亚茹或者弹出元素，对单个或者多个元素进行修剪，只保留一个范围内的元素</td><td>存储一些列表型的数据结构，类似粉丝列表，文章的评论列表之类的数据</td></tr><tr><td>Set</td><td>无序集合</td><td>添加、获取、移除单个元素，检查一个元素是否存在于集合中，计算交集、并集、差集，从集合里面随机获取元素</td><td>交集、并集、差集的操作，比如交集，可以把两个人的粉丝列表整一个交集</td></tr><tr><td>Hash</td><td>包含键值对的无序散列表</td><td>添加、获取、溢出单个键值对，获取所有键值对，检查某个键值是否存在</td><td>结构化的数据，比如一个对象</td></tr><tr><td>ZSet</td><td>有序集合</td><td>各级分值范围或者成员来获取元素，计算一个键的排名</td><td>去重但可以排序，如获取排名前几名的用户</td></tr></tbody></table><h2 id="_8-redis的应用场景" tabindex="-1"><a class="header-anchor" href="#_8-redis的应用场景" aria-hidden="true">#</a> 8. Redis的应用场景</h2><ul><li>计数器<br> 可以对 String 进行自增自减运算，从而实现计数器功能。Redis 这种内存型数据库的读写性能非常高，很适合存储频繁读写的计数量。</li><li>缓存<br> 将热点数据放到内存中，设置内存的最大使用量以及淘汰策略来保证缓存的命中率。</li><li>会话缓存<br> 可以使用 Redis 来统一存储多台应用服务器的会话信息。当应用服务器不再存储用户的会话信息，也就<br> 不再具有状态，一个用户可以请求任意一个应用服务器，从而更容易实现高可用性以及可伸缩性。</li><li>全页缓存（FPC）<br> 除基本的会话token之外，Redis还提供很简便的FPC平台。以Magento为例，Magento提供一个插件<br> 来使用Redis作为全页缓存后端。此外，对WordPress的用户来说，Pantheon有一个非常好的插件 wpredis，这个插件能帮助你以最快速度加载你曾浏览过的页面。</li><li>查找表<br> 例如 DNS 记录就很适合使用 Redis 进行存储。查找表和缓存类似，也是利用了 Redis 快速的查找特<br> 性。但是查找表的内容不能失效，而缓存的内容可以失效，因为缓存不作为可靠的数据来源。</li><li>消息队列(发布/订阅功能)<br> List 是一个双向链表，可以通过 lpush 和 rpop 写入和读取消息。不过最好使用 Kafka、<br> RabbitMQ 等消息中间件。</li><li>分布式锁实现<br> 在分布式场景下，无法使用单机环境下的锁来对多个节点上的进程进行同步。可以使用 Redis 自带的<br> SETNX 命令实现分布式锁，除此之外，还可以使用官方提供的 RedLock 分布式锁实现。</li><li>其它<br> Set 可以实现交集、并集等操作，从而实现共同好友等功能。ZSet 可以实现有序性操作，从而实<br> 现排行榜等功能。</li></ul><h2 id="_9-持久化" tabindex="-1"><a class="header-anchor" href="#_9-持久化" aria-hidden="true">#</a> 9. 持久化</h2><ul><li>什么是Redis持久化？ 持久化就是把内存的数据写到磁盘中去，防止服务宕机了内存数据丢失。</li></ul><h2 id="_10-redis-的持久化机制是什么-各自的优缺点" tabindex="-1"><a class="header-anchor" href="#_10-redis-的持久化机制是什么-各自的优缺点" aria-hidden="true">#</a> 10. Redis 的持久化机制是什么？各自的优缺点？</h2><h2 id="_11-如何选择合适的持久化方式" tabindex="-1"><a class="header-anchor" href="#_11-如何选择合适的持久化方式" aria-hidden="true">#</a> 11. 如何选择合适的持久化方式</h2><ul><li>一般来说， 如果想达到足以媲美PostgreSQL的数据安全性，你应该同时使用两种持久化功能。在<br> 这种情况下，当 Redis 重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF<br> 文件保存的数据集要比RDB文件保存的数据集要完整。</li><li>如果你非常关心你的数据， 但仍然可以承受数分钟以内的数据丢失，那么你可以只使用RDB持久<br> 化。</li><li>有很多用户都只使用AOF持久化，但并不推荐这种方式，因为定时生成RDB快照（snapshot）非<br> 常便于进行数据库备份， 并且 RDB 恢复数据集的速度也要比AOF恢复的速度要快，除此之外，使<br> 用RDB还可以避免AOF程序的bug。</li><li>如果你只希望你的数据在服务器运行的时候存在，你也可以不使用任何持久化方式。</li></ul><h2 id="_12-redis持久化数据和缓存怎么做扩容" tabindex="-1"><a class="header-anchor" href="#_12-redis持久化数据和缓存怎么做扩容" aria-hidden="true">#</a> 12. Redis持久化数据和缓存怎么做扩容？</h2><ul><li>如果Redis被当做缓存使用，使用一致性哈希实现动态扩容缩容。</li><li>如果Redis被当做一个持久化存储使用，必须使用固定的keys-to-nodes映射关系，节点的数量一<br> 旦确定不能变化。否则的话(即Redis节点需要动态变化的情况），必须使用可以在运行时进行数据<br> 再平衡的一套系统，而当前只有Redis集群可以做到这样。</li></ul><h2 id="_13-redis的过期键的删除策略" tabindex="-1"><a class="header-anchor" href="#_13-redis的过期键的删除策略" aria-hidden="true">#</a> 13. Redis的过期键的删除策略</h2><p><code>我们都知道，Redis是key-value数据库，我们可以设置Redis中缓存的key的过期时间。Redis的过期策略就是指当Redis中缓存的key过期了，Redis如何处理。</code></p><ul><li>过期策略通常有以下三种：</li><li>定时过期：每个设置过期时间的key都需要创建一个定时器，到过期时间就会立即清除。该策略可<br> 以立即清除过期的数据，对内存很友好；但是会占用大量的CPU资源去处理过期的数据，从而影响<br> 缓存的响应时间和吞吐量。</li><li>惰性过期：只有当访问一个key时，才会判断该key是否已过期，过期则清除。该策略可以最大化<br> 地节省CPU资源，却对内存非常不友好。极端情况可能出现大量的过期key没有再次被访问，从而<br> 不会被清除，占用大量内存。</li><li>定期过期：每隔一定的时间，会扫描一定数量的数据库的expires字典中一定数量的key，并清除其<br> 中已过期的key。该策略是前两者的一个折中方案。通过调整定时扫描的时间间隔和每次扫描的限<br> 定耗时，可以在不同情况下使得CPU和内存资源达到最优的平衡效果。 (expires字典会保存所有设<br> 置了过期时间的key的过期时间数据，其中，key是指向键空间中的某个键的指针，value是该键的<br> 毫秒精度的UNIX时间戳表示的过期时间。键空间是指该Redis集群中保存的所有键。)<br><code>Redis中同时使用了惰性过期和定期过期两种过期策略。</code></li></ul><h2 id="_14-redis-key的过期时间和永久有效分别怎么设置" tabindex="-1"><a class="header-anchor" href="#_14-redis-key的过期时间和永久有效分别怎么设置" aria-hidden="true">#</a> 14. Redis key的过期时间和永久有效分别怎么设置？</h2><ul><li>expire和persist命令。</li></ul><h2 id="_15-我们知道通过expire来设置key-的过期时间-那么对过期的数据怎么处理呢" tabindex="-1"><a class="header-anchor" href="#_15-我们知道通过expire来设置key-的过期时间-那么对过期的数据怎么处理呢" aria-hidden="true">#</a> 15. 我们知道通过expire来设置key 的过期时间，那么对过期的数据怎么处理呢?</h2><ul><li>除了缓存服务器自带的缓存失效策略之外（Redis默认的有6中策略可供选择），我们还可以根据<br> 具体的业务需求进行自定义的缓存淘汰，常见的策略有两种： <ul><li>1、定时去清理过期的缓存；</li><li>2、当有用户请求过来时，再判断这个请求所用到的缓存是否过期，过期的话就去底层系统得<br> 到新数据并更新缓存。</li></ul></li></ul><p><code>两者各有优劣，第一种的缺点是维护大量缓存的key是比较麻烦的，第二种的缺点就是每次用户请求过来都要判断缓存失效，逻辑相对比较复杂！具体用哪种方案，大家可以根据自己的应用场景来权衡。</code></p><h2 id="_16-mysql里有2000w数据-redis中只存20w的数据-如何保证redis中的数据都是热点数据" tabindex="-1"><a class="header-anchor" href="#_16-mysql里有2000w数据-redis中只存20w的数据-如何保证redis中的数据都是热点数据" aria-hidden="true">#</a> 16. MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据</h2><ul><li>redis内存数据集大小上升到一定大小的时候，就会施行数据淘汰策略。</li></ul><h2 id="_17-redis的内存淘汰策略有哪些" tabindex="-1"><a class="header-anchor" href="#_17-redis的内存淘汰策略有哪些" aria-hidden="true">#</a> 17. Redis的内存淘汰策略有哪些</h2><p><code>Redis的内存淘汰策略是指在Redis的用于缓存的内存不足时，怎么处理需要新写入且需要申请额外空间的数据。</code></p><ul><li>全局的键空间选择性移除 <ul><li>noeviction：当内存不足以容纳新写入数据时，新写入操作会报错。</li><li>allkeys-lru：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的key。（这<br> 个是最常用的）</li><li>allkeys-random：当内存不足以容纳新写入数据时，在键空间中，随机移除某个key。</li></ul></li><li>设置过期时间的键空间选择性移除 <ul><li>volatile-lru：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，移除最近最<br> 少使用的key。</li><li>volatile-random：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，随机移<br> 除某个key。</li><li>volatile-ttl：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，有更早过期时<br> 间的key优先移除。</li></ul></li><li>总结<br><code>Redis的内存淘汰策略的选取并不会影响过期的key的处理。内存淘汰策略用于处理内存不足时的需要申请额外空间的数据；过期策略用于处理过期的缓存数据。</code></li></ul><h2 id="_18-redis主要消耗什么物理资源" tabindex="-1"><a class="header-anchor" href="#_18-redis主要消耗什么物理资源" aria-hidden="true">#</a> 18. Redis主要消耗什么物理资源？</h2><ul><li>内存。</li></ul><h2 id="_19-redis的内存用完了会发生什么" tabindex="-1"><a class="header-anchor" href="#_19-redis的内存用完了会发生什么" aria-hidden="true">#</a> 19. Redis的内存用完了会发生什么？</h2><ul><li>如果达到设置的上限，Redis的写命令会返回错误信息（但是读命令还可以正常返回。）或者你可<br> 以配置内存淘汰机制，当Redis达到内存上限时会冲刷掉旧的内容。</li></ul><h2 id="_20-redis如何做内存优化" tabindex="-1"><a class="header-anchor" href="#_20-redis如何做内存优化" aria-hidden="true">#</a> 20. Redis如何做内存优化？</h2><ul><li>可以好好利用Hash,list,sorted set,set等集合类型数据，因为通常情况下很多小的Key-Value可以<br> 用更紧凑的方式存放到一起。尽可能使用散列表（hashes），散列表（是说散列表里面存储的数<br> 少）使用的内存非常小，所以你应该尽可能的将你的数据模型抽象到一个散列表里面。比如你的<br> web系统中有一个用户对象，不要为这个用户的名称，姓氏，邮箱，密码设置单独的key，而是应<br> 该把这个用户的所有信息存储到一张散列表里面</li></ul><hr><h2 id="二、线程模型" tabindex="-1"><a class="header-anchor" href="#二、线程模型" aria-hidden="true">#</a> 二、线程模型</h2><h2 id="_21-redis线程模型" tabindex="-1"><a class="header-anchor" href="#_21-redis线程模型" aria-hidden="true">#</a> 21. Redis线程模型</h2><p>Redis基于Reactor模式开发了网络事件处理器，这个处理器被称为文件事件处理器（file event<br> handler）。它的组成结构为4部分：多个套接字、IO多路复用程序、文件事件分派器、事件处理器。因<br> 为文件事件分派器队列的消费是单线程的，所以Redis才叫单线程模型。</p><ul><li>文件事件处理器使用 I/O 多路复用（multiplexing）程序来同时监听多个套接字， 并根据套接字目<br> 前执行的任务来为套接字关联不同的事件处理器。</li><li>当被监听的套接字准备好执行连接应答（accept）、读取（read）、写入（write）、关闭<br> （close）等操作时， 与操作相对应的文件事件就会产生， 这时文件事件处理器就会调用套接字之<br> 前关联好的事件处理器来处理这些事件。</li></ul><p>虽然文件事件处理器以单线程方式运行， 但通过使用 I/O 多路复用程序来监听多个套接字， 文件事件<br> 处理器既实现了高性能的网络通信模型， 又可以很好地与 redis 服务器中其他同样以单线程方式运行的<br> 模块进行对接， 这保持了 Redis 内部单线程设计的简单性。</p><hr><h2 id="三、事务" tabindex="-1"><a class="header-anchor" href="#三、事务" aria-hidden="true">#</a> 三、事务</h2><h2 id="_22-什么是事务" tabindex="-1"><a class="header-anchor" href="#_22-什么是事务" aria-hidden="true">#</a> 22. 什么是事务？</h2><ul><li>事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程<br> 中，不会被其他客户端发送来的命令请求所打断。</li><li>事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。</li></ul><h2 id="_23-redis事务的概念" tabindex="-1"><a class="header-anchor" href="#_23-redis事务的概念" aria-hidden="true">#</a> 23. Redis事务的概念</h2><ul><li>Redis 事务的本质是通过MULTI、EXEC、WATCH等一组命令的集合。事务支持一次执行多个命<br> 令，一个事务中所有命令都会被序列化。在事务执行过程，会按照顺序串行化执行队列中的命令，</li><li>其他客户端提交的命令请求不会插入到事务执行命令序列中。<br> 总结说：redis事务就是一次性、顺序性、排他性的执行一个队列中的一系列命令。</li></ul><h2 id="_24-redis事务的三个阶段" tabindex="-1"><a class="header-anchor" href="#_24-redis事务的三个阶段" aria-hidden="true">#</a> 24. Redis事务的三个阶段</h2><ol><li>事务开始 MULTI</li><li>命令入队</li><li>事务执行 EXEC</li></ol><p><code>事务执行过程中，如果服务端收到有EXEC、DISCARD、WATCH、MULTI之外的请求，将会把请求放入队列中排队</code></p><h2 id="_25-redis事务相关命令" tabindex="-1"><a class="header-anchor" href="#_25-redis事务相关命令" aria-hidden="true">#</a> 25. Redis事务相关命令</h2><p>Redis事务功能是通过MULTI、EXEC、DISCARD和WATCH 四个原语实现的<br> Redis会将一个事务中的所有命令序列化，然后按顺序执行。</p><ol><li><strong>redis 不支持回滚</strong>，“Redis 在事务失败时不进行回滚，而是继续执行余下的命令”， 所以 Redis 的<br> 内部可以保持简单且快速。</li><li><strong>如果在一个事务中的命令出现错误，那么所有的命令都不会执行；</strong></li><li><strong>如果在一个事务中出现运行错误，那么正确的命令会被执行。</strong></li></ol><ul><li>WATCH 命令是一个乐观锁，可以为 Redis 事务提供 check-and-set （CAS）行为。 可以监控一个<br> 或多个键，一旦其中有一个键被修改（或删除），之后的事务就不会执行，监控一直持续到EXEC<br> 命令。</li><li>MULTI命令用于开启一个事务，它总是返回OK。 MULTI执行之后，客户端可以继续向服务器发送<br> 任意多条命令，这些命令不会立即被执行，而是被放到一个队列中，当EXEC命令被调用时，所有<br> 队列中的命令才会被执行。</li><li>EXEC：执行所有事务块内的命令。返回事务块内所有命令的返回值，按命令执行的先后顺序排<br> 列。 当操作被打断时，返回空值 nil 。</li><li>通过调用DISCARD，客户端可以清空事务队列，并放弃执行事务， 并且客户端会从事务状态中退<br> 出。</li><li>UNWATCH命令可以取消watch对所有key的监控。</li></ul><h2 id="_26-事务管理-acid-概述" tabindex="-1"><a class="header-anchor" href="#_26-事务管理-acid-概述" aria-hidden="true">#</a> 26. 事务管理（ACID）概述</h2><ul><li>原子性（Atomicity）<br> 原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。</li><li>一致性（Consistency）<br> 事务前后数据的完整性必须保持一致。</li><li>隔离性（Isolation）<br> 多个事务并发执行时，一个事务的执行不应影响其他事务的执行</li><li>持久性（Durability）<br> 持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发生故障也不应该对其有任何影响</li></ul><p><code>Redis的事务总是具有ACID中的一致性和隔离性，其他特性是不支持的。当服务器运行在_AOF_持久化模式下，并且appendfsync选项的值为always时，事务也具有耐久性。</code></p><h2 id="_27-redis事务支持隔离性吗" tabindex="-1"><a class="header-anchor" href="#_27-redis事务支持隔离性吗" aria-hidden="true">#</a> 27. Redis事务支持隔离性吗</h2><ul><li>Redis 是单进程程序，并且它保证在执行事务时，不会对事务进行中断，事务可以运行直到执行完<br> 所有事务队列中的命令为止。因此，Redis 的事务是总是带有隔离性的。</li></ul><h2 id="_28-redis事务保证原子性吗-支持回滚吗" tabindex="-1"><a class="header-anchor" href="#_28-redis事务保证原子性吗-支持回滚吗" aria-hidden="true">#</a> 28. Redis事务保证原子性吗，支持回滚吗</h2><ul><li>Redis中，单条命令是原子性执行的，但事务不保证原子性，且没有回滚。事务中任意命令执行失<br> 败，其余的命令仍会被执行。</li></ul><h2 id="_29-redis事务其他实现" tabindex="-1"><a class="header-anchor" href="#_29-redis事务其他实现" aria-hidden="true">#</a> 29. Redis事务其他实现</h2><ul><li>基于Lua脚本，Redis可以保证脚本内的命令一次性、按顺序地执行，<br> 其同时也不提供事务运行错误的回滚，执行过程中如果部分命令运行错误，剩下的命令还是会继<br> 续运行完* 基于中间标记变量，通过另外的标记变量来标识事务是否执行完成，读取数据时先读<br> 取该标记变量判断是否事务执行完成。但这样会需要额外写代码实现，比较繁琐</li></ul><hr><h2 id="四、集群方案" tabindex="-1"><a class="header-anchor" href="#四、集群方案" aria-hidden="true">#</a> 四、集群方案</h2><h2 id="_30-哨兵模式" tabindex="-1"><a class="header-anchor" href="#_30-哨兵模式" aria-hidden="true">#</a> 30. 哨兵模式</h2><p><img src="https://img-blog.csdnimg.cn/c1f4d84097274effa83dac48b3434a11.png" alt="在这里插入图片描述" loading="lazy"><br><strong>哨兵的介绍</strong><br> sentinel，中文名是哨兵。哨兵是 redis 集群机构中非常重要的一个组件，主要有以下功能：</p><ul><li>集群监控：负责监控 redis master 和 slave 进程是否正常工作。</li><li>消息通知：如果某个 redis 实例有故障，那么哨兵负责发送消息作为报警通知给管理员。</li><li>故障转移：如果 master node 挂掉了，会自动转移到 slave node 上。</li><li>配置中心：如果故障转移发生了，通知 client 客户端新的 master 地址。</li></ul><p><strong>哨兵用于实现 redis 集群的高可用</strong>，本身也是分布式的，作为一个哨兵集群去运行，互相协同工作。</p><ul><li>故障转移时，判断一个 master node 是否宕机了，需要大部分的哨兵都同意才行，涉及到了分布<br> 式选举的问题。</li><li>即使部分哨兵节点挂掉了，哨兵集群还是能正常工作的，因为如果一个作为高可用机制重要组成部<br> 分的故障转移系统本身是单点的，那就很坑爹了。</li></ul><p><strong>哨兵的核心知识</strong></p><ul><li>哨兵至少需要 3 个实例，来保证自己的健壮性。</li><li>哨兵 + redis 主从的部署架构，是不保证数据零丢失的，只能保证 redis 集群的高可用性。</li><li>对于哨兵 + redis 主从这种复杂的部署架构，尽量在测试环境和生产环境，都进行充足的测试和演<br> 练。</li></ul><h2 id="_31-官方redis-cluster-方案-服务端路由查询" tabindex="-1"><a class="header-anchor" href="#_31-官方redis-cluster-方案-服务端路由查询" aria-hidden="true">#</a> 31. 官方Redis Cluster 方案(服务端路由查询)</h2><figure><img src="https://img-blog.csdnimg.cn/e09ea697520d42558de8e23da08d54f7.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><ul><li>redis 集群模式的工作原理能说一下么？在集群模式下，redis 的 key 是如何寻址的？分布式寻址<br> 都有哪些算法？了解一致性 hash 算法吗？</li></ul><p><strong>简介</strong></p><ul><li>Redis Cluster是一种服务端Sharding技术，3.0版本开始正式提供。Redis Cluster并没有使用一致<br> 性hash，而是采用slot(槽)的概念，一共分成16384个槽。将请求发送到任意节点，接收到请求的<br> 节点会将查询请求发送到正确的节点上执行</li></ul><p><strong>方案说明</strong></p><ol><li>通过哈希的方式，将数据分片，每个节点均分存储一定哈希槽(哈希值)区间的数据，默认分配了<br> 16384 个槽位</li><li>每份数据分片会存储在多个互为主从的多节点上</li><li>数据写入先写主节点，再同步到从节点(支持配置为阻塞同步)</li><li>同一分片多个节点间的数据不保持一致性</li><li>读取数据时，当客户端操作的key没有分配在该节点上时，redis会返回转向指令，指向正确的节点</li><li>扩容时时需要需要把旧节点的数据迁移一部分到新节点</li></ol><ul><li>在 redis cluster 架构下，每个 redis 要放开两个端口号，比如一个是 6379，另外一个就是 加1w<br> 的端口号，比如 16379。 <ul><li>16379 端口号是用来进行节点间通信的，也就是 cluster bus 的东西，cluster bus 的通信，<br> 用来进行故障检测、配置更新、故障转移授权。cluster bus 用了另外一种二进制的协议，<br> gossip 协议，用于节点间进行高效的数据交换，占用更少的网络带宽和处理时间。</li></ul></li></ul><p><strong>节点间的内部通信机制</strong></p><ul><li>基本通信原理</li><li>集群元数据的维护有两种方式：集中式、Gossip 协议。redis cluster 节点间采用 gossip 协议进行通信。</li></ul><p><strong>分布式寻址算法</strong></p><ul><li>hash 算法（大量缓存重建）</li><li>一致性 hash 算法（自动缓存迁移）+ 虚拟节点（自动负载均衡）</li><li>redis cluster 的 hash slot 算法</li></ul><p><strong>优点</strong></p><ul><li>无中心架构，支持动态扩容，对业务透明</li><li>具备Sentinel的监控和自动Failover(故障转移)能力</li><li>客户端不需要连接集群所有节点，连接集群中任何一个可用节点即可</li><li>高性能，客户端直连redis服务，免去了proxy代理的损耗</li></ul><p><strong>缺点</strong></p><ul><li>运维也很复杂，数据迁移需要人工干预</li><li>只能使用0号数据库</li><li>不支持批量操作(pipeline管道操作)</li><li>分布式逻辑和存储模块耦合等</li></ul><h2 id="_32-基于客户端分配" tabindex="-1"><a class="header-anchor" href="#_32-基于客户端分配" aria-hidden="true">#</a> 32. 基于客户端分配</h2><p><img src="https://img-blog.csdnimg.cn/126d902bcaf24a95bb0f8803902d98bb.png" alt="在这里插入图片描述" loading="lazy"><br><strong>简介</strong></p><ul><li>Redis Sharding是Redis Cluster出来之前，业界普遍使用的多Redis实例集群方法。其主要思想是<br> 采用哈希算法将Redis数据的key进行散列，通过hash函数，特定的key会映射到特定的Redis节点<br> 上。Java redis客户端驱动jedis，支持Redis Sharding功能，即ShardedJedis以及结合缓存池的<br> ShardedJedisPool</li></ul><p><strong>优点</strong><br> 优势在于非常简单，服务端的Redis实例彼此独立，相互无关联，每个Redis实例像单服务器一样<br> 运行，非常容易线性扩展，系统的灵活性很强</p><p><strong>缺点</strong></p><ul><li>由于sharding处理放到客户端，规模进一步扩大时给运维带来挑战。</li><li>客户端sharding不支持动态增删节点。服务端Redis实例群拓扑结构有变化时，每个客户端都需要<br> 更新调整。连接不能共享，当应用规模增大时，资源浪费制约优化</li></ul><h2 id="_33-基于代理服务器分片" tabindex="-1"><a class="header-anchor" href="#_33-基于代理服务器分片" aria-hidden="true">#</a> 33. 基于代理服务器分片</h2><p><img src="https://img-blog.csdnimg.cn/7d3c366ad50446d487cd2d839d341dc6.png" alt="在这里插入图片描述" loading="lazy"><br><strong>简介</strong></p><ul><li>客户端发送请求到一个代理组件，代理解析客户端的数据，并将请求转发至正确的节点，最后将结<br> 果回复给客户端</li></ul><p><strong>特征</strong></p><ul><li>透明接入，业务程序不用关心后端Redis实例，切换成本低</li><li>Proxy 的逻辑和存储的逻辑是隔离的</li><li>代理层多了一次转发，性能有所损耗</li></ul><p><strong>业界开源方案</strong></p><ul><li>Twtter开源的Twemproxy</li><li>豌豆荚开源的Codis</li></ul><h2 id="_34-redis-主从架构" tabindex="-1"><a class="header-anchor" href="#_34-redis-主从架构" aria-hidden="true">#</a> 34. Redis 主从架构</h2><ul><li>单机的 redis，能够承载的 QPS 大概就在上万到几万不等。对于缓存来说，一般都是用来支撑<strong>读高<br> 并发</strong>的。因此架构做成主从(master-slave)架构，一主多从，主负责写，并且将数据复制到其它的<br> slave 节点，从节点负责读。所有的<strong>读请求全部走从节点</strong>。这样也可以很轻松实现水平扩容，<strong>支撑<br> 读高并发</strong>。<br><img src="https://img-blog.csdnimg.cn/544b1767a80644eeaa4313a3533eabb5.png" alt="在这里插入图片描述" loading="lazy"><br><code>redis replication -&gt; 主从架构 -&gt; 读写分离 -&gt; 水平扩容支撑读高并发</code><br><strong>redis replication 的核心机制</strong></li><li>redis 采用异步方式复制数据到 slave 节点，不过 redis2.8 开始，slave node 会周期性地确认自己<br> 每次复制的数据量；</li><li>一个 master node 是可以配置多个 slave node 的；</li><li>slave node 也可以连接其他的 slave node；</li><li>slave node 做复制的时候，不会 block master node 的正常工作；</li><li>slave node 在做复制的时候，也不会 block 对自己的查询操作，它会用旧的数据集来提供服务；<br> 但是复制完成的时候，需要删除旧数据集，加载新数据集，这个时候就会暂停对外服务了；</li><li>slave node 主要用来进行横向扩容，做读写分离，扩容的 slave node 可以提高读的吞吐量。</li></ul><p><strong>注意：</strong></p><ul><li>如果采用了主从架构，那么建议必须开启 master node 的持久化，不建议用 slave node 作为<br> master node 的数据热备，因为那样的话，如果你关掉 master 的持久化，可能在 master 宕机重<br> 启的时候数据是空的，然后可能一经过复制， slave node 的数据也丢了。</li><li>另外，master 的各种备份方案，也需要做。万一本地的所有文件丢失了，从备份中挑选一份 rdb<br> 去恢复 master，这样才能确保启动的时候，是有数据的，即使采用了后续讲解的高可用机制，<br> slave node 可以自动接管 master node，但也可能 sentinel 还没检测到 master failure，master<br> node 就自动重启了，还是可能导致上面所有的 slave node 数据被清空。</li></ul><p><strong>redis 主从复制的核心原理</strong></p><ul><li>当启动一个 slave node 的时候，它会发送一个 PSYNC 命令给 master node。</li><li>如果这是 slave node 初次连接到 master node，那么会触发一次 full resynchronization 全<br> 量复制。此时 master 会启动一个后台线程，开始生成一份 RDB 快照文件，</li><li>同时还会将从客户端 client 新收到的所有写命令缓存在内存中。 RDB 文件生成完毕后， master<br> 会将这个 RDB 发送给 slave，slave 会先写入本地磁盘，然后再从本地磁盘加载到内存中，</li><li>接着 master 会将内存中缓存的写命令发送到 slave，slave 也会同步这些数据。</li><li>slave node 如果跟 master node 有网络故障，断开了连接，会自动重连，连接之后 master node<br> 仅会复制给 slave 部分缺少的数据。<br><img src="https://img-blog.csdnimg.cn/a85af23c47994eca92c6b2b1ba837af1.png" alt="在这里插入图片描述" loading="lazy"></li></ul><p><strong>过程原理</strong></p><ol><li>当从库和主库建立MS关系后，会向主数据库发送SYNC命令</li><li>主库接收到SYNC命令后会开始在后台保存快照(RDB持久化过程)，并将期间接收到的写命令缓存<br> 起来</li><li>当快照完成后，主Redis会将快照文件和所有缓存的写命令发送给从Redis</li><li>从Redis接收到后，会载入快照文件并且执行收到的缓存的命令</li><li>之后，主Redis每当接收到写命令时就会将命令发送从Redis，从而保证数据的一致</li></ol><p><strong>缺点</strong></p><ul><li>所有的slave节点数据的复制和同步都由master节点来处理，会照成master节点压力太大，使用主<br> 从从结构来解决</li></ul><h2 id="_35-redis集群的主从复制模型是怎样的" tabindex="-1"><a class="header-anchor" href="#_35-redis集群的主从复制模型是怎样的" aria-hidden="true">#</a> 35. Redis集群的主从复制模型是怎样的？</h2><ul><li>为了使在部分节点失败或者大部分节点无法通信的情况下集群仍然可用，所以集群使用了主从复制<br> 模型，每个节点都会有N-1个复制品</li></ul><h2 id="_36-生产环境中的-redis-是怎么部署的" tabindex="-1"><a class="header-anchor" href="#_36-生产环境中的-redis-是怎么部署的" aria-hidden="true">#</a> 36. 生产环境中的 redis 是怎么部署的？</h2><ul><li>redis cluster，10 台机器，5 台机器部署了 redis 主实例，另外 5 台机器部署了 redis 的从实例，<br> 每个主实例挂了一个从实例，5 个节点对外提供读写服务，每个节点的读写高峰qps可能可以达到<br> 每秒 5 万，5 台机器最多是 25 万读写请求/s。</li><li>机器是什么配置？32G 内存+ 8 核 CPU + 1T 磁盘，但是分配给 redis 进程的是10g内存，一般线上<br> 生产环境，redis 的内存尽量不要超过 10g，超过 10g 可能会有问题。</li><li>5 台机器对外提供读写，一共有 50g 内存。</li><li>因为每个主实例都挂了一个从实例，所以是高可用的，任何一个主实例宕机，都会自动故障迁移，<br> redis 从实例会自动变成主实例继续提供读写服务。</li><li>你往内存里写的是什么数据？每条数据的大小是多少？商品数据，每条数据是 10kb。100 条数据<br> 是 1mb，10 万条数据是 1g。常驻内存的是 200 万条商品数据，占用内存是 20g，仅仅不到总内<br> 存的 50%。目前高峰期每秒就是 3500 左右的请求量。</li></ul><p><code>其实大型的公司，会有基础架构的 team 负责缓存集群的运维。</code></p><h2 id="_37-说说redis哈希槽的概念" tabindex="-1"><a class="header-anchor" href="#_37-说说redis哈希槽的概念" aria-hidden="true">#</a> 37. 说说Redis哈希槽的概念？</h2><ul><li>Redis集群没有使用一致性hash,而是引入了哈希槽的概念，Redis集群有16384个哈希槽，每个key<br> 通过CRC16校验后对16384取模来决定放置哪个槽，集群的每个节点负责一部分hash槽。</li></ul><h2 id="_38-redis集群会有写操作丢失吗-为什么" tabindex="-1"><a class="header-anchor" href="#_38-redis集群会有写操作丢失吗-为什么" aria-hidden="true">#</a> 38. Redis集群会有写操作丢失吗？为什么？</h2><ul><li>Redis并不能保证数据的强一致性，这意味这在实际中集群在特定的条件下可能会丢失写操作。</li></ul><h2 id="_39-redis集群之间是如何复制的" tabindex="-1"><a class="header-anchor" href="#_39-redis集群之间是如何复制的" aria-hidden="true">#</a> 39. Redis集群之间是如何复制的？</h2><ul><li>异步复制</li></ul><h2 id="_40-redis集群最大节点个数是多少" tabindex="-1"><a class="header-anchor" href="#_40-redis集群最大节点个数是多少" aria-hidden="true">#</a> 40. Redis集群最大节点个数是多少？</h2><ul><li>16384个</li></ul><h2 id="_41-redis集群如何选择数据库" tabindex="-1"><a class="header-anchor" href="#_41-redis集群如何选择数据库" aria-hidden="true">#</a> 41. Redis集群如何选择数据库？</h2><ul><li>Redis集群目前无法做数据库选择，默认在0数据库。</li></ul><hr><h2 id="五、分区" tabindex="-1"><a class="header-anchor" href="#五、分区" aria-hidden="true">#</a> 五、分区</h2><h2 id="_42-redis是单线程的-如何提高多核cpu的利用率" tabindex="-1"><a class="header-anchor" href="#_42-redis是单线程的-如何提高多核cpu的利用率" aria-hidden="true">#</a> 42. Redis是单线程的，如何提高多核CPU的利用率？</h2><ul><li>可以在同一个服务器部署多个Redis的实例，并把他们当作不同的服务器来使用，在某些时候，无<br> 论如何一个服务器是不够的， 所以，如果你想使用多个CPU，你可以考虑一下分片（shard）。</li></ul><h2 id="_43-为什么要做redis分区" tabindex="-1"><a class="header-anchor" href="#_43-为什么要做redis分区" aria-hidden="true">#</a> 43. 为什么要做Redis分区？</h2><ul><li>分区可以让Redis管理更大的内存，Redis将可以使用所有机器的内存。如果没有分区，你最多只<br> 能使用一台机器的内存。分区使Redis的计算能力通过简单地增加计算机得到成倍提升，Redis的<br> 网络带宽也会随着计算机和网卡的增加而成倍增长。</li></ul><h2 id="_44-你知道有哪些redis分区实现方案" tabindex="-1"><a class="header-anchor" href="#_44-你知道有哪些redis分区实现方案" aria-hidden="true">#</a> 44. 你知道有哪些Redis分区实现方案？</h2><ul><li>客户端分区就是在客户端就已经决定数据会被存储到哪个redis节点或者从哪个redis节点读取。大<br> 多数客户端已经实现了客户端分区。</li><li>代理分区 意味着客户端将请求发送给代理，然后代理决定去哪个节点写数据或者读数据。代理根<br> 据分区规则决定请求哪些Redis实例，然后根据Redis的响应结果返回给客户端。redis和memcached的一种代理实现就是Twemproxy</li><li>查询路由(Query routing) 的意思是客户端随机地请求任意一个redis实例，然后由Redis将请求转<br> 发给正确的Redis节点。Redis Cluster实现了一种混合形式的查询路由，但并不是直接将请求从一<br> 个redis节点转发到另一个redis节点，而是在客户端的帮助下直接redirected到正确的redis节点。</li></ul><h2 id="_45-redis分区有什么缺点" tabindex="-1"><a class="header-anchor" href="#_45-redis分区有什么缺点" aria-hidden="true">#</a> 45. Redis分区有什么缺点？</h2><ul><li>涉及多个key的操作通常不会被支持。例如你不能对两个集合求交集，因为他们可能被存储到不同<br> 的Redis实例（实际上这种情况也有办法，但是不能直接使用交集指令）。</li><li>同时操作多个key,则不能使用Redis事务.</li><li>分区使用的粒度是key，不能使用一个非常长的排序key存储一个数据集（The partitioning granularity is the key, so it is not possible to shard a dataset with a single huge key like a very big sorted set）</li><li>当使用分区的时候，数据处理会非常复杂，例如为了备份你必须从不同的Redis实例和主机同时收<br> 集RDB / AOF文件。</li><li>分区时动态扩容或缩容可能非常复杂。Redis集群在运行时增加或者删除Redis节点，能做到最大<br> 程度对用户透明地数据再平衡，但其他一些客户端分区或者代理分区方法则不支持这种特性。然<br> 而，有一种预分片的技术也可以较好的解决这个问题。</li></ul><hr><h2 id="六、-分布式问题" tabindex="-1"><a class="header-anchor" href="#六、-分布式问题" aria-hidden="true">#</a> 六、 分布式问题</h2><h2 id="_46-redis实现分布式锁" tabindex="-1"><a class="header-anchor" href="#_46-redis实现分布式锁" aria-hidden="true">#</a> 46. Redis实现分布式锁</h2><ul><li><p>Redis为单进程单线程模式，采用队列模式将并发访问变成串行访问，且多客户端对Redis的连接<br> 并不存在竞争关系Redis中可以使用setNx命令实现分布式锁。</p></li><li><p>当且仅当 key 不存在，将 key 的值设为 value。 若给定的 key 已经存在，则 setNx不做任何动作</p></li><li><p>SETNX 是『SET if Not eXists』(如果不存在，则 SET)的简写。</p></li><li><p>返回值：设置成功，返回 1 。设置失败，返回 0 。<br><img src="https://img-blog.csdnimg.cn/ea2b02cc4b7b46eab8ed7b976c64d90c.png" alt="在这里插入图片描述" loading="lazy"></p></li><li><p>使用setNx完成同步锁的流程及事项如下：</p></li><li><p>使用SETNX命令获取锁，若返回0（key已存在，锁已存在）则获取失败，反之获取成功</p></li><li><p>为了防止获取锁后程序出现异常，导致其他线程/进程调用setNx命令总是返回0而进入死锁状态，<br> 需要为该key设置一个“合理”的过期时间释放锁，使用DEL命令将锁数据删除</p></li></ul><h2 id="_47-如何解决-redis-的并发竞争-key-问题" tabindex="-1"><a class="header-anchor" href="#_47-如何解决-redis-的并发竞争-key-问题" aria-hidden="true">#</a> 47. 如何解决 Redis 的并发竞争 Key 问题</h2><ul><li>所谓 Redis 的并发竞争 Key 的问题也就是多个系统同时对一个 key 进行操作，但是最后执行的顺<br> 序和我们期望的顺序不同，这样也就导致了结果的不同！</li><li>推荐一种方案：分布式锁（zookeeper 和 redis 都可以实现分布式锁）。（如果不存在 Redis 的并<br> 发竞争 Key 问题，不要使用分布式锁，这样会影响性能）</li><li>基于zookeeper临时有序节点可以实现的分布式锁。大致思想为：每个客户端对某个方法加锁时，<br> 在zookeeper上的与该方法对应的指定节点的目录下，生成一个唯一的瞬时有序节点。 判断是否<br> 获取锁的方式很简单，只需要判断有序节点中序号最小的一个。 当释放锁的时候，只需将这个瞬<br> 时节点删除即可。同时，其可以避免服务宕机导致的锁无法释放，而产生的死锁问题。完成业务流<br> 程后，删除对应的子节点释放锁。</li></ul><p><code>在实践中，当然是从以可靠性为主。所以首推Zookeeper。</code></p><h2 id="_48-分布式redis是前期做还是后期规模上来了再做好-为什么" tabindex="-1"><a class="header-anchor" href="#_48-分布式redis是前期做还是后期规模上来了再做好-为什么" aria-hidden="true">#</a> 48. 分布式Redis是前期做还是后期规模上来了再做好？为什么？</h2><ul><li>既然Redis是如此的轻量（单实例只使用1M内存），为防止以后的扩容，最好的办法就是一开始就<br> 启动较多实例。即便你只有一台服务器，你也可以一开始就让Redis以分布式的方式运行，使用分<br> 区，在同一台服务器上启动多个实例。</li><li>一开始就多设置几个Redis实例，例如32或者64个实例，对大多数用户来说这操作起来可能比较麻<br> 烦，但是从长久来看做这点牺牲是值得的。</li><li>这样的话，当你的数据不断增长，需要更多的Redis服务器时，你需要做的就是仅仅将Redis实例<br> 从一台服务迁移到另外一台服务器而已（而不用考虑重新分区的问题）。一旦你添加了另一台服务<br> 器，你需要将你一半的Redis实例从第一台机器迁移到第二台机器。</li></ul><h2 id="_49-什么是-redlock" tabindex="-1"><a class="header-anchor" href="#_49-什么是-redlock" aria-hidden="true">#</a> 49. 什么是 RedLock</h2><ul><li>Redis 官方站提出了一种权威的基于 Redis 实现分布式锁的方式名叫 Redlock，此种方式比原先的<br> 单节点的方法更安全。它可以保证以下特性： <ol><li>安全特性：互斥访问，即永远只有一个 client 能拿到锁</li><li>避免死锁：最终 client 都可能拿到锁，不会出现死锁的情况，即使原本锁住某资源的 client crash 了或者出现了网络分区</li><li>容错性：只要大部分 Redis 节点存活就可以正常提供服务</li></ol></li></ul><hr><h2 id="七、缓存异常" tabindex="-1"><a class="header-anchor" href="#七、缓存异常" aria-hidden="true">#</a> 七、缓存异常</h2><h2 id="_50-什么是redis穿透" tabindex="-1"><a class="header-anchor" href="#_50-什么是redis穿透" aria-hidden="true">#</a> 50. 什么是redis穿透？</h2><ul><li>就是用户请求透过redis去请求mysql服务器，导致mysql压力过载。但一个web服务里，极容易出<br> 现瓶颈的就是mysql，所以才让redis去分担mysql 的压力，所以这种问题是万万要避免的</li><li>解决方法： <ol><li>从缓存取不到的数据，在数据库中也没有取到，这时也可以将key-value对写为key-null，缓存有效时间可以设置短点，如30秒（设置太长会导致正常情况也没法使用）。这样可以防止攻击用户反复用同一个id暴力攻击</li><li>接口层增加校验，如用户鉴权校验，id做基础校验，id&lt;=0的直接拦截；</li><li>采用布隆过滤器，将所有可能存在的数据哈希到一个足够大的 bitmap 中，一个一定不存在的数据会被这个 bitmap 拦截掉，从而避免了对底层存储系统的查询压力</li></ol></li></ul><h2 id="_51-什么是redis雪崩" tabindex="-1"><a class="header-anchor" href="#_51-什么是redis雪崩" aria-hidden="true">#</a> 51. 什么是redis雪崩？</h2><ul><li>就是redis服务由于负载过大而宕机，导致mysql的负载过大也宕机，最终整个系统瘫痪</li><li>解决方法： <ol><li>redis集群，将原来一个人干的工作，分发给多个人干</li><li>缓存预热（关闭外网访问，先开启mysql，通过预热脚本将热点数据写入缓存中，启动缓<br> 存。开启外网服务）</li><li>数据不要设置相同的生存时间，不然过期时，redis压力会大</li></ol></li></ul><h2 id="_52-什么是redis穿透" tabindex="-1"><a class="header-anchor" href="#_52-什么是redis穿透" aria-hidden="true">#</a> 52. 什么是redis穿透？</h2><ul><li>高并发下，由于一个key失效，而导致多个线程去mysql查同一业务数据并存到redis（并发下，存<br> 了多份数据），而一段时间后，多份数据同时失效。导致压力骤增</li><li>解决方法： <ol><li>分级缓存（缓存两份数据，第二份数据生存时间长一点作为备份，第一份数据用于被请求命中，如果第二份数据被命中说明第一份数据已经过期，要去mysql请求数据重新缓存两份数据）</li><li>计划任务（假如数据生存时间为30分钟，计划任务就20分钟执行一次更新缓存数据）</li></ol></li></ul><h2 id="_53-缓存预热" tabindex="-1"><a class="header-anchor" href="#_53-缓存预热" aria-hidden="true">#</a> 53. 缓存预热</h2><ul><li>缓存预热就是系统上线后，将相关的缓存数据直接加载到缓存系统。这样就可以避免在用户请求的<br> 时候，先查询数据库，然后再将数据缓存的问题！用户直接查询事先被预热的缓存数据！</li><li>解决方案 <ol><li>直接写个缓存刷新页面，上线时手工操作一下；</li><li>数据量不大，可以在项目启动的时候自动进行加载；</li><li>定时刷新缓存；</li></ol></li></ul><h2 id="_54-缓存降级" tabindex="-1"><a class="header-anchor" href="#_54-缓存降级" aria-hidden="true">#</a> 54. 缓存降级</h2><ul><li><p>当访问量剧增、服务出现问题（如响应时间慢或不响应）或非核心服务影响到核心流程的性能时，<br> 仍然需要保证服务还是可用的，即使是有损服务。系统可以根据一些关键数据进行自动降级，也可<br> 以配置开关实现人工降级。</p></li><li><p>缓存降级的最终目的是保证核心服务可用，即使是有损的。而且有些服务是无法降级的（如加入购<br> 物车、结算）。</p></li><li><p>在进行降级之前要对系统进行梳理，看看系统是不是可以丢卒保帅；从而梳理出哪些必须誓死保<br> 护，哪些可降级；比如可以参考日志级别设置预案：</p><ol><li>一般：比如有些服务偶尔因为网络抖动或者服务正在上线而超时，可以自动降级；</li><li>警告：有些服务在一段时间内成功率有波动（如在95~100%之间），可以自动降级或人工降<br> 级，并发送告警；</li><li>错误：比如可用率低于90%，或者数据库连接池被打爆了，或者访问量突然猛增到系统能承<br> 受的最大阀值，此时可以根据情况自动降级或者人工降级；</li><li>严重错误：比如因为特殊原因数据错误了，此时需要紧急人工降级。</li></ol></li><li><p>服务降级的目的，是为了防止Redis服务故障，导致数据库跟着一起发生雪崩问题。因此，对于不<br> 重要的缓存数据，可以采取服务降级策略，例如一个比较常见的做法就是，Redis出现问题，不去<br> 数据库查询，而是直接返回默认值给用户。</p></li></ul><h2 id="_55-热点数据和冷数据" tabindex="-1"><a class="header-anchor" href="#_55-热点数据和冷数据" aria-hidden="true">#</a> 55. 热点数据和冷数据</h2><ul><li>热点数据，缓存才有价值</li><li>对于冷数据而言，大部分数据可能还没有再次访问到就已经被挤出内存，不仅占用内存，而且价值<br> 不大。频繁修改的数据，看情况考虑使用缓存</li><li>对于热点数据，比如我们的某IM产品，生日祝福模块，当天的寿星列表，缓存以后可能读取数十<br> 万次。再举个例子，某导航产品，我们将导航信息，缓存以后可能读取数百万次。</li><li>数据更新前至少读取两次，缓存才有意义。这个是最基本的策略，如果缓存还没有起作用就失效<br> 了，那就没有太大价值了。</li><li>那存不存在，修改频率很高，但是又不得不考虑缓存的场景呢？有！比如，这个读取接口对数据库<br> 的压力很大，但是又是热点数据，这个时候就需要考虑通过缓存手段，减少数据库的压力，比如我<br> 们的某助手产品的，点赞数，收藏数，分享数等是非常典型的热点数据，但是又不断变化，此时就<br> 需要将数据同步保存到Redis缓存，减少数据库压力。</li></ul><h2 id="_56-缓存热点key" tabindex="-1"><a class="header-anchor" href="#_56-缓存热点key" aria-hidden="true">#</a> 56. 缓存热点key</h2><ul><li>缓存中的一个Key(比如一个促销商品)，在某个时间点过期的时候，恰好在这个时间点对这个Key有<br> 大量的并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时<br> 候大并发的请求可能会瞬间把后端DB压垮。</li><li>解决方案<br> 对缓存查询加锁，如果KEY不存在，就加锁，然后查DB入缓存，然后解锁；其他进程如果发现有<br> 锁就等待，然后等解锁后返回数据或者进入DB查询</li></ul><hr><h2 id="八、常用工具" tabindex="-1"><a class="header-anchor" href="#八、常用工具" aria-hidden="true">#</a> 八、常用工具</h2><h2 id="_57-redis支持的java客户端都有哪些-官方推荐用哪个" tabindex="-1"><a class="header-anchor" href="#_57-redis支持的java客户端都有哪些-官方推荐用哪个" aria-hidden="true">#</a> 57. Redis支持的Java客户端都有哪些？官方推荐用哪个？</h2><ul><li>Redisson、Jedis、lettuce等等，官方推荐使用Redisson。</li></ul><h2 id="_58-redis和redisson有什么关系" tabindex="-1"><a class="header-anchor" href="#_58-redis和redisson有什么关系" aria-hidden="true">#</a> 58. Redis和Redisson有什么关系？</h2><ul><li>Redisson是一个高级的分布式协调Redis客服端，能帮助用户在分布式环境中轻松实现一些Java的<br> 对象 (Bloom filter, BitSet, Set, SetMultimap, ScoredSortedSet, SortedSet, Map,<br> ConcurrentMap, List, ListMultimap, Queue, BlockingQueue, Deque, BlockingDeque,<br> Semaphore, Lock, ReadWriteLock, AtomicLong, CountDownLatch, Publish / Subscribe,<br> HyperLogLog)。</li></ul><h2 id="_59-jedis与redisson对比有什么优缺点" tabindex="-1"><a class="header-anchor" href="#_59-jedis与redisson对比有什么优缺点" aria-hidden="true">#</a> 59. Jedis与Redisson对比有什么优缺点？</h2><ul><li>Jedis是Redis的Java实现的客户端，其API提供了比较全面的Redis命令的支持；Redisson实现了分<br> 布式和可扩展的Java数据结构，和Jedis相比，功能较为简单，不支持字符串操作，不支持排序、<br> 事务、管道、分区等Redis特性。Redisson的宗旨是促进使用者对Redis的关注分离，从而让使用<br> 者能够将精力更集中地放在处理业务逻辑上。</li></ul><hr><h2 id="九、其他问题" tabindex="-1"><a class="header-anchor" href="#九、其他问题" aria-hidden="true">#</a> 九、其他问题</h2><h2 id="_60-redis与memcached的区别" tabindex="-1"><a class="header-anchor" href="#_60-redis与memcached的区别" aria-hidden="true">#</a> 60. Redis与Memcached的区别</h2><ul><li>两者都是非关系型内存键值数据库，现在公司一般都是用 Redis 来实现缓存，而且 Redis 自身也<br> 越来越强大了！Redis 与 Memcached 主要有以下不同：</li></ul><table><thead><tr><th>对比参数</th><th>Redis</th><th>Memcached</th></tr></thead><tbody><tr><td>类型</td><td>1. 支持内存 2. 非关系型数据库</td><td>1. 支持内存 2. 键值对形式 3. 缓存形式</td></tr><tr><td>数据存储类型</td><td>1. String 2. List 3.Set 4. Hash 5.Sort Set 【俗称ZSet】</td><td>1. 文本型 2. 二进制类型</td></tr><tr><td>查询【操作】类型</td><td>1. 批量操作 2. 事务支持 3. 每个类型不同的CRUD</td><td>1.常用的CRUD 2. 少量的其他命令</td></tr><tr><td>附加功能</td><td>1. 发布/订阅模式2. 主从分区 3. 序列化支持 4. 脚本支持【Lua脚本】</td><td>1. 多线程服务支持</td></tr><tr><td>网络IO模型</td><td>1. 单线程的多路IO 复用模型</td><td>1. 多线程，非阻塞IO模式</td></tr><tr><td>事件库</td><td>自封转简易事件库AeEvent</td><td>贵族血统的LibEvent事件库</td></tr><tr><td>持久化支持</td><td>1. RDB 2. AOF</td><td>不支持</td></tr><tr><td>集群模式</td><td>原生支持 cluster模式，可以实现主从复制，读写分离</td><td>没有原生的集群模式，需要依靠客户端来实现往集群中分片写入数据</td></tr><tr><td>内存管理机制</td><td>在 Redis 中，并不是所有数据都一直存储在内存中，可以将一些很久没用的 value 交换到磁盘</td><td>Memcached 的数据则会一直在内存中，Memcached 将内存分割成特定长度的块来存储数据，以完全解决内存碎片的问题。但是这种方式会使得内存的利用率不高，例如块的大小为 128 bytes，只存储 100 bytes 的数据，那么剩下的28 bytes就浪费掉了。</td></tr><tr><td>适用场景</td><td>复杂数据结构，有持久化，高可用需求，value存储内容较大</td><td>纯key-value，数据量非常大，并发量非常大的业务</td></tr></tbody></table><ol><li>memcached所有的值均是简单的字符串，redis作为其替代者，支持更为丰富的数据类型</li><li>redis的速度比memcached快很多</li><li>redis可以持久化其数据</li></ol><h2 id="_61-如何保证缓存与数据库双写时的数据一致性" tabindex="-1"><a class="header-anchor" href="#_61-如何保证缓存与数据库双写时的数据一致性" aria-hidden="true">#</a> 61. 如何保证缓存与数据库双写时的数据一致性？</h2><ul><li>你只要用缓存，就可能会涉及到缓存与数据库双存储双写，你只要是双写，就一定会有数据一致性<br> 的问题，那么你如何解决一致性问题？</li><li>一般来说，就是如果你的系统不是严格要求缓存+数据库必须一致性的话，缓存可以稍微的跟数据<br> 库偶尔有不一致的情况，最好不要做这个方案，读请求和写请求串行化，串到一个内存队列里去，<br> 这样就可以保证一定不会出现不一致的情况</li><li>串行化之后，就会导致系统的吞吐量会大幅度的降低，用比正常情况下多几倍的机器去支撑线上的<br> 一个请求。</li><li>还有一种方式就是可能会暂时产生不一致的情况，但是发生的几率特别小，就是先更新数据库，然<br> 后再删除缓存。</li></ul><table><thead><tr><th>问题场景</th><th>描述</th><th>解决</th></tr></thead><tbody><tr><td>先写缓存，再写数据库，缓存写成功，数据库写失败</td><td>缓存写成功，但写数据库失败或者响应延迟，则下次读取（并发读）缓存时，就出现脏读</td><td>这个写缓存的方式，本身就是错误的，需要改为先写数据库，把旧缓存置为失效；读取数据的时候，如果缓存不存在，则读取数据库再写缓存</td></tr><tr><td>先写数据库，再写缓存，数据库写成功，缓存写失败</td><td>写数据库成功，但写缓存失败，则下次读取（并发读）缓存时，则读不到数据</td><td>缓存使用时，假如读缓存失败，先读数据库，再回写缓存的方式实现</td></tr><tr><td>需要缓存异步刷新</td><td>指数据库操作和写缓存不在一个操作步骤中，比如在分布式场景下，无法做到同时写缓存或需要异步刷新（补救措施）时候</td><td>确定哪些数据适合此类场景，根据经验值确定合理的数据不一致时间，用户数据刷新的时间间隔</td></tr></tbody></table><h2 id="_62-redis常见性能问题和解决方案" tabindex="-1"><a class="header-anchor" href="#_62-redis常见性能问题和解决方案" aria-hidden="true">#</a> 62. Redis常见性能问题和解决方案？</h2><ol><li>Master最好不要做任何持久化工作，包括内存快照和AOF日志文件，特别是不要启用内存快照做<br> 持久化。</li><li>如果数据比较关键，某个Slave开启AOF备份数据，策略为每秒同步一次。</li><li>为了主从复制的速度和连接的稳定性，Slave和Master最好在同一个局域网内。</li><li>尽量避免在压力较大的主库上增加从库</li><li>Master调用BGREWRITEAOF重写AOF文件，AOF在重写的时候会占大量的CPU和内存资源，导致<br> 服务load过高，出现短暂服务暂停现象。</li><li>为了Master的稳定性，主从复制不要用图状结构，用单向链表结构更稳定，即主从关系为：<br> Master&lt;–Slave1&lt;–Slave2&lt;–Slave3…，这样的结构也方便解决单点故障问题，实现Slave对Master<br> 的替换，也即，如果Master挂了，可以立马启用Slave1做Master，其他不变。</li></ol><h2 id="_63-redis官方为什么不提供windows版本" tabindex="-1"><a class="header-anchor" href="#_63-redis官方为什么不提供windows版本" aria-hidden="true">#</a> 63. Redis官方为什么不提供Windows版本？</h2><ul><li>因为目前Linux版本已经相当稳定，而且用户量很大，无需开发windows版本，反而会带来兼容性<br> 等问题。</li></ul><h2 id="_64-一个字符串类型的值能存储最大容量是多少" tabindex="-1"><a class="header-anchor" href="#_64-一个字符串类型的值能存储最大容量是多少" aria-hidden="true">#</a> 64. 一个字符串类型的值能存储最大容量是多少？</h2><ul><li>512M</li></ul><h2 id="_65-redis如何做大量数据插入" tabindex="-1"><a class="header-anchor" href="#_65-redis如何做大量数据插入" aria-hidden="true">#</a> 65. Redis如何做大量数据插入？</h2><ul><li>Redis2.6开始redis-cli支持一种新的被称之为pipe mode的新模式用于执行大量数据插入工作。</li></ul><h2 id="_66-假如redis里面有1亿个key-其中有10w个key是以某个固定的已知的前缀开头的-如果将它们全部找出来" tabindex="-1"><a class="header-anchor" href="#_66-假如redis里面有1亿个key-其中有10w个key是以某个固定的已知的前缀开头的-如果将它们全部找出来" aria-hidden="true">#</a> 66. 假如Redis里面有1亿个key，其中有10w个key是以某个固定的已知的前缀开头的，如果将它们全部找出来？</h2><ul><li>使用keys指令可以扫出指定模式的key列表。</li><li>对方接着追问：如果这个redis正在给线上的业务提供服务，那使用keys指令会有什么问题？<br> 这个时候你要回答redis关键的一个特性：redis的单线程的。keys指令会导致线程阻塞一段时间，<br> 线上服务会停顿，直到指令执行完毕，服务才能恢复。这个时候可以使用scan指令，scan指令可<br> 以无阻塞的提取出指定模式的key列表，但是会有一定的重复概率，在客户端做一次去重就可以<br> 了，但是整体所花费的时间会比直接用keys指令长。</li></ul><h2 id="_67-使用redis做过异步队列吗-是如何实现的" tabindex="-1"><a class="header-anchor" href="#_67-使用redis做过异步队列吗-是如何实现的" aria-hidden="true">#</a> 67. 使用Redis做过异步队列吗，是如何实现的</h2><ul><li>使用list类型保存数据信息，rpush生产消息，lpop消费消息，当lpop没有消息时，可以sleep一段<br> 时间，然后再检查有没有信息，如果不想sleep的话，可以使用blpop, 在没有信息的时候，会一直<br> 阻塞，直到信息的到来。redis可以通过pub/sub主题订阅模式实现一个生产者，多个消费者，当<br> 然也存在一定的缺点，当消费者下线时，生产的消息会丢失。</li></ul><h2 id="_68-redis如何实现延时队列" tabindex="-1"><a class="header-anchor" href="#_68-redis如何实现延时队列" aria-hidden="true">#</a> 68. Redis如何实现延时队列</h2><ul><li>使用sortedset，使用时间戳做score, 消息内容作为key,调用zadd来生产消息，消费者使用<br> zrangbyscore获取n秒之前的数据做轮询处理。</li></ul><h2 id="_69-redis回收进程如何工作的" tabindex="-1"><a class="header-anchor" href="#_69-redis回收进程如何工作的" aria-hidden="true">#</a> 69. Redis回收进程如何工作的？</h2><ol><li>一个客户端运行了新的命令，添加了新的数据。</li><li>Redis检查内存使用情况，如果大于maxmemory的限制， 则根据设定好的策略进行回收。</li><li>一个新的命令被执行，等等。</li><li>所以我们不断地穿越内存限制的边界，通过不断达到边界然后不断地回收回到边界以下。</li></ol><p><code>如果一个命令的结果导致大量内存被使用（例如很大的集合的交集保存到一个新的键），不用多久内存限制就会被这个内存使用量超越。</code></p><h2 id="_70-redis回收使用的是什么算法" tabindex="-1"><a class="header-anchor" href="#_70-redis回收使用的是什么算法" aria-hidden="true">#</a> 70. Redis回收使用的是什么算法？</h2><ul><li>LRU算法</li></ul><hr><p><strong>史上最全Java面试宝典，BAT大厂面试必备。整理不易，建议先关注点赞加收藏</strong></p>',213),_=e("thead",null,[e("tr",null,[e("th",null,"序号"),e("th",null,"名称"),e("th",null,"地址")])],-1),c=e("td",null,"1",-1),u=e("td",null,"Java基础面试题（91道含答案）",-1),b={href:"https://blog.csdn.net/qq_30999361/article/details/124482581",target:"_blank",rel:"noopener noreferrer"},R=e("td",null,"2",-1),f=e("td",null,"Java并发编程面试题 （123道含答案）",-1),p={href:"https://blog.csdn.net/qq_30999361/article/details/124545403",target:"_blank",rel:"noopener noreferrer"},g=e("td",null,"3",-1),y=e("td",null,"Java异常面试题 （33道含答案）",-1),k={href:"https://blog.csdn.net/qq_30999361/article/details/124560006",target:"_blank",rel:"noopener noreferrer"},m=e("td",null,"4",-1),x=e("td",null,"Java虚拟机（JVM）面试题（51道含答案）",-1),v={href:"https://blog.csdn.net/qq_30999361/article/details/124532763",target:"_blank",rel:"noopener noreferrer"},q=e("td",null,"5",-1),S=e("td",null,"Java集合面试题（52道含答案）",-1),C={href:"https://blog.csdn.net/qq_30999361/article/details/124503952",target:"_blank",rel:"noopener noreferrer"},M=e("td",null,"6",-1),D=e("td",null,"Linux面试题（50道含答案）",-1),w={href:"https://blog.csdn.net/qq_30999361/article/details/124575798",target:"_blank",rel:"noopener noreferrer"},L=e("td",null,"7",-1),A=e("td",null,"Memcache面试题（23道含答案）",-1),I={href:"https://blog.csdn.net/qq_30999361/article/details/124596870",target:"_blank",rel:"noopener noreferrer"},E=e("td",null,"8",-1),B=e("td",null,"Mybatiss面试题 （37道含答案）",-1),O={href:"https://blog.csdn.net/qq_30999361/article/details/124560907",target:"_blank",rel:"noopener noreferrer"},T=e("td",null,"9",-1),P=e("td",null,"MySQL面试题（40道含答案）",-1),J={href:"https://blog.csdn.net/qq_30999361/article/details/124506169",target:"_blank",rel:"noopener noreferrer"},N=e("td",null,"10",-1),U=e("td",null,"Netty面试题（49道含答案）",-1),F={href:"https://blog.csdn.net/qq_30999361/article/details/124617122",target:"_blank",rel:"noopener noreferrer"},z=e("td",null,"11",-1),H=e("td",null,"Nginx面试题（23道含答案）",-1),K={href:"https://blog.csdn.net/qq_30999361/article/details/124597174",target:"_blank",rel:"noopener noreferrer"},X=e("td",null,"12",-1),Q=e("td",null,"RabbitMQ面试题（22道含答案）",-1),W={href:"https://blog.csdn.net/qq_30999361/article/details/124533998",target:"_blank",rel:"noopener noreferrer"},V=e("td",null,"13",-1),Z=e("td",null,"Redis面试题（70道含答案）",-1),j={href:"https://blog.csdn.net/qq_30999361/article/details/124459566",target:"_blank",rel:"noopener noreferrer"},G=e("td",null,"14",-1),Y=e("td",null,"SpringBoot面试题（44道含答案）",-1),$={href:"https://blog.csdn.net/qq_30999361/article/details/124461725",target:"_blank",rel:"noopener noreferrer"},ee=e("td",null,"15",-1),ie=e("td",null,"SpringCloud面试题（49道含答案）",-1),le={href:"https://blog.csdn.net/qq_30999361/article/details/124430712",target:"_blank",rel:"noopener noreferrer"},re=e("td",null,"16",-1),de=e("td",null,"SpringMVC面试题（29道含答案）",-1),ae={href:"https://blog.csdn.net/qq_30999361/article/details/124519135",target:"_blank",rel:"noopener noreferrer"},se=e("td",null,"17",-1),te=e("td",null,"Spring面试题（75道含答案）",-1),ne={href:"https://blog.csdn.net/qq_30999361/article/details/124519472",target:"_blank",rel:"noopener noreferrer"},he=e("td",null,"18",-1),oe=e("td",null,"TCP、UDP、Socket、Http网络编程面试题（47道含答案）",-1),_e={href:"https://blog.csdn.net/qq_30999361/article/details/124617792",target:"_blank",rel:"noopener noreferrer"},ce=e("td",null,"19",-1),ue=e("td",null,"Tomcat面试题（15道含答案）",-1),be={href:"https://blog.csdn.net/qq_30999361/article/details/124576964",target:"_blank",rel:"noopener noreferrer"},Re=e("td",null,"20",-1),fe=e("td",null,"Zookeeper面试题（28道含答案）",-1),pe={href:"https://blog.csdn.net/qq_30999361/article/details/124596208",target:"_blank",rel:"noopener noreferrer"},ge=e("td",null,"21",-1),ye=e("td",null,"多线程面试题（60道含答案）",-1),ke={href:"https://blog.csdn.net/qq_30999361/article/details/124596462",target:"_blank",rel:"noopener noreferrer"},me=e("td",null,"22",-1),xe=e("td",null,"设计模式面试题（14道含答案）",-1),ve={href:"https://blog.csdn.net/qq_30999361/article/details/124637874",target:"_blank",rel:"noopener noreferrer"},qe=e("td",null,"23",-1),Se=e("td",null,"BIO、NIO、AIO、Netty面试题（35道含答案）",-1),Ce={href:"https://blog.csdn.net/qq_30999361/article/details/124653616",target:"_blank",rel:"noopener noreferrer"},Me=e("td",null,"24",-1),De=e("td",null,"Dubbo面试题（47道含答案）",-1),we={href:"https://blog.csdn.net/qq_30999361/article/details/124637288",target:"_blank",rel:"noopener noreferrer"},Le=e("td",null,"25",-1),Ae=e("td",null,"ElasticSearch面试题（31道含答案）",-1),Ie={href:"https://blog.csdn.net/qq_30999361/article/details/124619240",target:"_blank",rel:"noopener noreferrer"},Ee=e("td",null,"26",-1),Be=e("td",null,"Git常用命令（63条）",-1),Oe={href:"https://blog.csdn.net/qq_30999361/article/details/124438420",target:"_blank",rel:"noopener noreferrer"};function Te(Pe,Je){const i=a("ExternalLinkIcon");return s(),t("div",null,[o,e("table",null,[_,e("tbody",null,[e("tr",null,[c,u,e("td",null,[e("a",b,[l("（点击查看）"),r(i)])])]),e("tr",null,[R,f,e("td",null,[e("a",p,[l("（点击查看）"),r(i)])])]),e("tr",null,[g,y,e("td",null,[e("a",k,[l("（点击查看）"),r(i)])])]),e("tr",null,[m,x,e("td",null,[e("a",v,[l("（点击查看）"),r(i)])])]),e("tr",null,[q,S,e("td",null,[e("a",C,[l("（点击查看）"),r(i)])])]),e("tr",null,[M,D,e("td",null,[e("a",w,[l("（点击查看）"),r(i)])])]),e("tr",null,[L,A,e("td",null,[e("a",I,[l("（点击查看）"),r(i)])])]),e("tr",null,[E,B,e("td",null,[e("a",O,[l("（点击查看）"),r(i)])])]),e("tr",null,[T,P,e("td",null,[e("a",J,[l("（点击查看）"),r(i)])])]),e("tr",null,[N,U,e("td",null,[e("a",F,[l("（点击查看）"),r(i)])])]),e("tr",null,[z,H,e("td",null,[e("a",K,[l("（点击查看）"),r(i)])])]),e("tr",null,[X,Q,e("td",null,[e("a",W,[l("（点击查看）"),r(i)])])]),e("tr",null,[V,Z,e("td",null,[e("a",j,[l("（点击查看）"),r(i)])])]),e("tr",null,[G,Y,e("td",null,[e("a",$,[l("（点击查看）"),r(i)])])]),e("tr",null,[ee,ie,e("td",null,[e("a",le,[l("（点击查看）"),r(i)])])]),e("tr",null,[re,de,e("td",null,[e("a",ae,[l("（点击查看）"),r(i)])])]),e("tr",null,[se,te,e("td",null,[e("a",ne,[l("（点击查看）"),r(i)])])]),e("tr",null,[he,oe,e("td",null,[e("a",_e,[l("（点击查看）"),r(i)])])]),e("tr",null,[ce,ue,e("td",null,[e("a",be,[l("（点击查看）"),r(i)])])]),e("tr",null,[Re,fe,e("td",null,[e("a",pe,[l("（点击查看）"),r(i)])])]),e("tr",null,[ge,ye,e("td",null,[e("a",ke,[l("（点击查看）"),r(i)])])]),e("tr",null,[me,xe,e("td",null,[e("a",ve,[l("（点击查看）"),r(i)])])]),e("tr",null,[qe,Se,e("td",null,[e("a",Ce,[l("（点击查看）"),r(i)])])]),e("tr",null,[Me,De,e("td",null,[e("a",we,[l("（点击查看）"),r(i)])])]),e("tr",null,[Le,Ae,e("td",null,[e("a",Ie,[l("（点击查看）"),r(i)])])]),e("tr",null,[Ee,Be,e("td",null,[e("a",Oe,[l("（点击查看）"),r(i)])])])])])])}const Ue=d(h,[["render",Te],["__file","Redis面试题（70道含答案）.html.vue"]]);export{Ue as default};
