import{_ as s,E as r,Z as l,$ as i,a0 as n,a3 as e,a1 as t,a4 as o}from"./framework-e0d053a9.js";const p={},c=o(`<h3 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h3><ul><li><a href="#1__1">1. 概述</a></li><li><ul><li><a href="#11_Spring_MVCSpring_MVC_2">1.1 什么是Spring MVC？简单介绍下你对Spring MVC的理解？</a></li><li><a href="#12_Spring_MVC_7">1.2 Spring MVC的优点</a></li></ul></li><li><a href="#2__17">2. 核心组件</a></li><li><ul><li><a href="#21_Spring_MVC_18">2.1 Spring MVC的主要组件？</a></li><li><a href="#22_DispatcherServlet_31">2.2 什么是DispatcherServlet</a></li><li><a href="#23_Spring_MVC_34">2.3 什么是Spring MVC框架的控制器？</a></li><li><a href="#24_Spring_MVC_39">2.4 Spring MVC的控制器是不是单例模式,如果是,有什么问题,怎么决？</a></li></ul></li><li><a href="#3_45">3.工作原理</a></li><li><ul><li><a href="#31_Spring_MVC_DispatcherServlet__46">3.1 请描述Spring MVC的工作流程？描述一下 DispatcherServlet 的工作流程？</a></li></ul></li><li><a href="#4MVC_65">4.MVC框架</a></li><li><ul><li><a href="#41_MVCMVC_66">4.1 MVC是什么？MVC设计模式的好处有哪些</a></li></ul></li><li><a href="#5_76">5.常用注解</a></li><li><ul><li><a href="#51__77">5.1 注解原理是什么</a></li><li><a href="#52_Spring_MVC_83">5.2 Spring MVC常用的注解有哪些？</a></li><li><a href="#53_SpingMvc_90">5.3 SpingMvc中的控制器的注解一般用哪个,有没有别的注解可以替代？</a></li><li><a href="#54_Controller_94">5.4 @Controller注解的作用</a></li><li><a href="#55_RequestMapping_111">5.5 @RequestMapping注解的作用</a></li><li><a href="#56_ResponseBody_126">5.6 @ResponseBody注解的作用</a></li><li><a href="#57_PathVariableRequestParam_132">5.7 @PathVariable和@RequestParam的区别</a></li></ul></li><li><a href="#6_139">6.其他</a></li><li><ul><li><a href="#61_Spring_MVCStruts2_140">6.1 Spring MVC与Struts2区别</a></li><li><a href="#62_Spring_MVC_150">6.2 Spring MVC怎么样设定重定向和转发的？</a></li><li><a href="#63_Spring_MVCAJAX_154">6.3 Spring MVC怎么和AJAX相互调用的？</a></li><li><a href="#64_POSTGET_160">6.4 如何解决POST请求中文乱码问题，GET的又如何处理呢？</a></li><li><a href="#65_Spring_MVC_189">6.5 Spring MVC的异常处理？</a></li><li><a href="#66_get_193">6.6 如果在拦截请求中，我想拦截get方式提交的方法,怎么配置</a></li><li><a href="#67_RequestSession_196">6.7 怎样在方法里面得到Request,或者Session？</a></li><li><a href="#68__199">6.8 如果想在拦截的方法里面得到从前台传入的参数,怎么得到？</a></li><li><a href="#69__202">6.9 如果前台有很多个参数传入,并且这些参数都是一个对象的,那么</a></li><li><a href="#610_Spring_MVC_206">6.10 Spring MVC中函数的返回值是什么？</a></li><li><a href="#611_Spring_MVC_210">6.11 Spring MVC用什么对象从后台向前台传递数据的？</a></li><li><a href="#612_ModelMapSession_214">6.12 怎么样把ModelMap里面的数据放入Session里面？</a></li><li><a href="#613_Spring_MVC_218">6.13 Spring MVC里面拦截器是怎么写的</a></li><li><a href="#614__WebApplicationContext_235">6.14 介绍一下 WebApplicationContext</a></li></ul></li></ul><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述" aria-hidden="true">#</a> 1. 概述</h2><h2 id="_1-1-什么是spring-mvc-简单介绍下你对spring-mvc的理解" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是spring-mvc-简单介绍下你对spring-mvc的理解" aria-hidden="true">#</a> 1.1 什么是Spring MVC？简单介绍下你对Spring MVC的理解？</h2><p>Spring MVC是一个基于Java的实现了MVC设计模式的请求驱动类型的轻量级Web框架，通过把模<br> 型-视图-控制器分离，将web层进行职责解耦，把复杂的web应用分成逻辑清晰的几部分，简化开<br> 发，减少出错，方便组内开发人员之间的配合。</p><h2 id="_1-2-spring-mvc的优点" tabindex="-1"><a class="header-anchor" href="#_1-2-spring-mvc的优点" aria-hidden="true">#</a> 1.2 Spring MVC的优点</h2><p>（1）可以支持各种视图技术,而不仅仅局限于JSP；<br> （2）与Spring框架集成（如IoC容器、AOP等）；<br> （3）清晰的角色分配：前端控制器(dispatcherServlet) , 请求到处理器映射（handlerMapping),<br> 处理器适配器（HandlerAdapter), 视图解析器（ViewResolver）。<br> （4） 支持各种请求资源的映射策略。</p><hr><h2 id="_2-核心组件" tabindex="-1"><a class="header-anchor" href="#_2-核心组件" aria-hidden="true">#</a> 2. 核心组件</h2><h2 id="_2-1-spring-mvc的主要组件" tabindex="-1"><a class="header-anchor" href="#_2-1-spring-mvc的主要组件" aria-hidden="true">#</a> 2.1 Spring MVC的主要组件？</h2><p>（1）前端控制器 DispatcherServlet（不需要程序员开发）<br> 作用：接收请求、响应结果，相当于转发器，有了DispatcherServlet 就减少了其它组件之间的耦合度。<br> （2）处理器映射器HandlerMapping（不需要程序员开发）<br> 作用：根据请求的URL来查找Handler<br> （3）处理器适配器HandlerAdapter<br> 注意：在编写Handler的时候要按照HandlerAdapter要求的规则去编写，这样适配器HandlerAdapter才可以正确的去执行Handler。<br> （4）处理器Handler（需要程序员开发）<br> （5）视图解析器 ViewResolver（不需要程序员开发）<br> 作用：进行视图的解析，根据视图逻辑名解析成真正的视图（view）<br> （6）视图View（需要程序员开发jsp）<br> View是一个接口， 它的实现类支持不同的视图类型（jsp，freemarker，pdf等等）</p><h2 id="_2-2-什么是dispatcherservlet" tabindex="-1"><a class="header-anchor" href="#_2-2-什么是dispatcherservlet" aria-hidden="true">#</a> 2.2 什么是DispatcherServlet</h2><p>Spring的MVC框架是围绕DispatcherServlet来设计的，它用来处理所有的HTTP请求和响应。</p><h2 id="_2-3-什么是spring-mvc框架的控制器" tabindex="-1"><a class="header-anchor" href="#_2-3-什么是spring-mvc框架的控制器" aria-hidden="true">#</a> 2.3 什么是Spring MVC框架的控制器？</h2><p>控制器提供一个访问应用程序的行为，此行为通常通过服务接口实现。控制器解析用户输入并将其<br> 转换为一个由视图呈现给用户的模型。Spring用一个非常抽象的方式实现了一个控制层，允许用户<br> 创建多种用途的控制器。</p><h2 id="_2-4-spring-mvc的控制器是不是单例模式-如果是-有什么问题-怎么决" tabindex="-1"><a class="header-anchor" href="#_2-4-spring-mvc的控制器是不是单例模式-如果是-有什么问题-怎么决" aria-hidden="true">#</a> 2.4 Spring MVC的控制器是不是单例模式,如果是,有什么问题,怎么决？</h2><p>答：是单例模式,所以在多线程访问的时候有线程安全问题,不要用同步,会影响性能的,解决方案是在<br> 控制器里面不能写字段。</p><hr><h2 id="_3-工作原理" tabindex="-1"><a class="header-anchor" href="#_3-工作原理" aria-hidden="true">#</a> 3.工作原理</h2><h2 id="_3-1-请描述spring-mvc的工作流程-描述一下-dispatcherservlet-的工作流程" tabindex="-1"><a class="header-anchor" href="#_3-1-请描述spring-mvc的工作流程-描述一下-dispatcherservlet-的工作流程" aria-hidden="true">#</a> 3.1 请描述Spring MVC的工作流程？描述一下 DispatcherServlet 的工作流程？</h2><figure><img src="https://img-blog.csdnimg.cn/570c08752bc64469baa45c12541fb6c9.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><p>（1）用户发送请求至前端控制器DispatcherServlet；<br> （2） DispatcherServlet收到请求后，调用HandlerMapping处理器映射器，请求获取Handle；<br> （1）用户发送请求至前端控制器DispatcherServlet；<br> （2） DispatcherServlet收到请求后，调用HandlerMapping处理器映射器，请求获取Handle；<br> （3）处理器映射器根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet；<br> （4）DispatcherServlet 调用 HandlerAdapter处理器适配器；<br> （5）HandlerAdapter 经过适配调用 具体处理器(Handler，也叫后端控制器)；<br> （6）Handler执行完成返回ModelAndView；<br> （7）HandlerAdapter将Handler执行结果ModelAndView返回给DispatcherServlet；<br> （8）DispatcherServlet将ModelAndView传给ViewResolver视图解析器进行解析；<br> （9）ViewResolver解析后返回具体View；<br> （10）DispatcherServlet对View进行渲染视图（即将模型数据填充至视图中）<br> （11）DispatcherServlet响应用户。</p><hr><h2 id="_4-mvc框架" tabindex="-1"><a class="header-anchor" href="#_4-mvc框架" aria-hidden="true">#</a> 4.MVC框架</h2><h2 id="_4-1-mvc是什么-mvc设计模式的好处有哪些" tabindex="-1"><a class="header-anchor" href="#_4-1-mvc是什么-mvc设计模式的好处有哪些" aria-hidden="true">#</a> 4.1 MVC是什么？MVC设计模式的好处有哪些</h2><ul><li>mvc是一种设计模式（设计模式就是日常开发中编写代码的一种好的方法和经验的总结）。模型<br> （model）-视图（view）-控制器（controller），三层架构的设计模式。用于实现前端页面的展<br> 现与后端业务数据处理的分离。</li><li>mvc设计模式的好处<br> 1.分层设计，实现了业务系统各个组件之间的解耦，有利于业务系统的可扩展性，可维护性。<br> 2.有利于系统的并行开发，提升开发效率。</li></ul><hr><h2 id="_5-常用注解" tabindex="-1"><a class="header-anchor" href="#_5-常用注解" aria-hidden="true">#</a> 5.常用注解</h2><h2 id="_5-1-注解原理是什么" tabindex="-1"><a class="header-anchor" href="#_5-1-注解原理是什么" aria-hidden="true">#</a> 5.1 注解原理是什么</h2><p>注解本质是一个继承了Annotation的特殊接口，其具体实现类是Java运行时生成的动态代理类。<br> 我们通过反射获取注解时，返回的是Java运行时生成的动态代理对象。通过代理对象调用自定义注<br> 解的方法，会最终调用AnnotationInvocationHandler的invoke方法。该方法会从memberValues<br> 这个Map中索引出对应的值。而memberValues的来源是Java常量池。</p><h2 id="_5-2-spring-mvc常用的注解有哪些" tabindex="-1"><a class="header-anchor" href="#_5-2-spring-mvc常用的注解有哪些" aria-hidden="true">#</a> 5.2 Spring MVC常用的注解有哪些？</h2><p>@RequestMapping：用于处理请求 url 映射的注解，可用于类或方法上。用于类上，则表示类中<br> 的所有响应请求的方法都是以该地址作为父路径。<br> @RequestBody：注解实现接收http请求的json数据，将json转换为java对象。<br> @ResponseBody：注解实现将conreoller方法返回对象转化为json对象响应给客户。<br> @Conntroller：控制器的注解，表示是表现层,不能用用别的注解代替</p><h2 id="_5-3-spingmvc中的控制器的注解一般用哪个-有没有别的注解可以替代" tabindex="-1"><a class="header-anchor" href="#_5-3-spingmvc中的控制器的注解一般用哪个-有没有别的注解可以替代" aria-hidden="true">#</a> 5.3 SpingMvc中的控制器的注解一般用哪个,有没有别的注解可以替代？</h2><p>答：一般用@Controller注解,也可以使用@RestController,@RestController注解相当于<br> @ResponseBody ＋ @Controller,表示是表现层,除此之外，一般不用别的注解代替。</p><h2 id="_5-4-controller注解的作用" tabindex="-1"><a class="header-anchor" href="#_5-4-controller注解的作用" aria-hidden="true">#</a> 5.4 @Controller注解的作用</h2><p>在Spring MVC 中，控制器Controller 负责处理由DispatcherServlet 分发的请求，它把用户请求<br> 的数据经过业务处理层处理之后封装成一个Model ，然后再把该Model 返回给对应的View 进行展<br> 示。在Spring MVC 中提供了一个非常简便的定义Controller 的方法，你无需继承特定的类或实现<br> 特定的接口，只需使用@Controller 标记一个类是Controller ，然后使用@RequestMapping 和<br> @RequestParam 等一些注解用以定义URL 请求和Controller 方法之间的映射，这样的Controller<br> 就能被外界访问到。此外Controller 不会直接依赖于HttpServletRequest 和HttpServletResponse<br> 等HttpServlet 对象，它们可以通过Controller 的方法参数灵活的获取到。<br> @Controller 用于标记在一个类上，使用它标记的类就是一个Spring MVC Controller 对象。分发<br> 处理器将会扫描使用了该注解的类的方法，并检测该方法是否使用了@RequestMapping 注解。<br> @Controller 只是定义了一个控制器类，而使用@RequestMapping 注解的方法才是真正处理请求<br> 的处理器。单单使用@Controller 标记在一个类上还不能真正意义上的说它就是Spring MVC 的一<br> 个控制器类，因为这个时候Spring 还不认识它。那么要如何做Spring 才能认识它呢？这个时候就<br> 需要我们把这个控制器类交给Spring 来管理。有两种方式：<br> 在Spring MVC 的配置文件中定义MyController 的bean 对象。<br> 在Spring MVC 的配置文件中告诉Spring 该到哪里去找标记为@Controller 的Controller 控制器。</p><h2 id="_5-5-requestmapping注解的作用" tabindex="-1"><a class="header-anchor" href="#_5-5-requestmapping注解的作用" aria-hidden="true">#</a> 5.5 @RequestMapping注解的作用</h2><ul><li>RequestMapping是一个用来处理请求地址映射的注解，可用于类或方法上。用于类上，表示类中<br> 的所有响应请求的方法都是以该地址作为父路径。</li><li>RequestMapping注解有六个属性，下面我们把她分成三类进行说明（下面有相应示例）。 <ul><li>value， method <ul><li>value： 指定请求的实际地址，指定的地址可以是URI Template 模式（后面将会说明）；</li><li>method： 指定请求的method类型， GET、POST、PUT、DELETE等；</li></ul></li><li>consumes，produces <ul><li>consumes： 指定处理请求的提交内容类型（Content-Type），例如application/json,text/html;</li><li>produces: 指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回；</li></ul></li><li>params，headers <ul><li>params： 指定request中必须包含某些参数值是，才让该方法处理。</li><li>headers： 指定request中必须包含某些指定的header值，才能让该方法处理请求。</li></ul></li></ul></li></ul><h2 id="_5-6-responsebody注解的作用" tabindex="-1"><a class="header-anchor" href="#_5-6-responsebody注解的作用" aria-hidden="true">#</a> 5.6 @ResponseBody注解的作用</h2><p>作用： 该注解用于将Controller的方法返回的对象，通过适当的HttpMessageConverter转换为指<br> 定格式后，写入到Response对象的body数据区。<br> 使用时机：返回的数据不是html标签的页面，而是其他某种格式的数据时（如json、xml等）使<br> 用；</p><h2 id="_5-7-pathvariable和-requestparam的区别" tabindex="-1"><a class="header-anchor" href="#_5-7-pathvariable和-requestparam的区别" aria-hidden="true">#</a> 5.7 @PathVariable和@RequestParam的区别</h2><p>请求路径上有个id的变量值，可以通过@PathVariable来获取 @RequestMapping(value =<br> “/page/{id}”, method = RequestMethod.GET)<br> @RequestParam用来获得静态的URL请求入参 spring注解时action里用到。</p><hr><h2 id="_6-其他" tabindex="-1"><a class="header-anchor" href="#_6-其他" aria-hidden="true">#</a> 6.其他</h2><h2 id="_6-1-spring-mvc与struts2区别" tabindex="-1"><a class="header-anchor" href="#_6-1-spring-mvc与struts2区别" aria-hidden="true">#</a> 6.1 Spring MVC与Struts2区别</h2><ul><li>相同点<br> 都是基于mvc的表现层框架，都用于web项目的开发。</li><li>不同点 <ol><li>前端控制器不一样。Spring MVC的前端控制器是servlet：DispatcherServlet。struts2的前端控制器是filter：StrutsPreparedAndExcutorFilter。</li><li>请求参数的接收方式不一样。Spring MVC是使用方法的形参接收请求的参数，基于方法的开发，线程安全，可以设计为单例或者多例的开发，推荐使用单例模式的开发（执行效率更高），默认就是单例开发模式。struts2是通过类的成员变量接收请求的参数，是基于类的开发，线程不安全，只能设计为多例的开发。</li><li>Struts采用值栈存储请求和响应的数据，通过OGNL存取数据，Spring MVC通过参数解析器是将request请求内容解析，并给方法形参赋值，将数据和视图封装成ModelAndView对象，最后又将<br> ModelAndView中的模型数据通过reques域传输到页面。Jsp视图解析器默认使用jstl。</li><li>与spring整合不一样。Spring MVC是spring框架的一部分，不需要整合。在企业项目中，SpringMVC使用更多一些。</li></ol></li></ul><h2 id="_6-2-spring-mvc怎么样设定重定向和转发的" tabindex="-1"><a class="header-anchor" href="#_6-2-spring-mvc怎么样设定重定向和转发的" aria-hidden="true">#</a> 6.2 Spring MVC怎么样设定重定向和转发的？</h2><p>（1）转发：在返回值前面加&quot;forward:“，譬如&quot;forward:user.do?name=method4”<br> （2）重定向：在返回值前面加&quot;redirect:“，譬如&quot;redirect:www.baidu.com”</p><h2 id="_6-3-spring-mvc怎么和ajax相互调用的" tabindex="-1"><a class="header-anchor" href="#_6-3-spring-mvc怎么和ajax相互调用的" aria-hidden="true">#</a> 6.3 Spring MVC怎么和AJAX相互调用的？</h2><p>通过Jackson框架就可以把Java里面的对象直接转化成Js可以识别的Json对象。具体步骤如下 ：<br> （1）加入Jackson.jar<br> （2）在配置文件中配置json的映射<br> （3）在接受Ajax方法里面可以直接返回Object,List等,但方法前面要加上@ResponseBody注解。</p><h2 id="_6-4-如何解决post请求中文乱码问题-get的又如何处理呢" tabindex="-1"><a class="header-anchor" href="#_6-4-如何解决post请求中文乱码问题-get的又如何处理呢" aria-hidden="true">#</a> 6.4 如何解决POST请求中文乱码问题，GET的又如何处理呢？</h2><p>（1）解决post请求乱码问题：<br> 在web.xml中配置一个CharacterEncodingFilter过滤器，设置成utf-8；</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filterclass</span><span class="token punctuation">&gt;</span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）get请求中文参数出现乱码解决方法有两个：<br> 1、修改tomcat配置文件添加编码与工程编码一致，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span><span class="token class-name">ConnectorURIEncoding</span><span class="token operator">=</span><span class="token string">&quot;utf-8&quot;</span> connectionTimeout<span class="token operator">=</span><span class="token string">&quot;20000&quot;</span> port<span class="token operator">=</span><span class="token string">&quot;8080&quot;</span>
protocol<span class="token operator">=</span><span class="token string">&quot;HTTP/1.1&quot;</span> redirectPort<span class="token operator">=</span><span class="token string">&quot;8443&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>2、另外一种方法对参数进行重新编码：<br> String userName = new String(request.getParamter(“userName”).getBytes(“ISO8859-1”),“utf8”)</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token constant">ISO8859</span><span class="token operator">-</span><span class="token number">1</span>是tomcat默认编码，需要将tomcat编码后的内容按utf<span class="token operator">-</span><span class="token number">8</span>编码。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_6-5-spring-mvc的异常处理" tabindex="-1"><a class="header-anchor" href="#_6-5-spring-mvc的异常处理" aria-hidden="true">#</a> 6.5 Spring MVC的异常处理？</h2><p>答：可以将异常抛给Spring框架，由Spring框架来处理；我们只需要配置简单的异常处理器，在异<br> 常处理器中添视图页面即可。</p><h2 id="_6-6-如果在拦截请求中-我想拦截get方式提交的方法-怎么配置" tabindex="-1"><a class="header-anchor" href="#_6-6-如果在拦截请求中-我想拦截get方式提交的方法-怎么配置" aria-hidden="true">#</a> 6.6 如果在拦截请求中，我想拦截get方式提交的方法,怎么配置</h2><p>答：可以在@RequestMapping注解里面加上method=RequestMethod.GET。</p><h2 id="_6-7-怎样在方法里面得到request-或者session" tabindex="-1"><a class="header-anchor" href="#_6-7-怎样在方法里面得到request-或者session" aria-hidden="true">#</a> 6.7 怎样在方法里面得到Request,或者Session？</h2><p>答：直接在方法的形参中声明request,Spring MVC就自动把request对象传入。</p><h2 id="_6-8-如果想在拦截的方法里面得到从前台传入的参数-怎么得到" tabindex="-1"><a class="header-anchor" href="#_6-8-如果想在拦截的方法里面得到从前台传入的参数-怎么得到" aria-hidden="true">#</a> 6.8 如果想在拦截的方法里面得到从前台传入的参数,怎么得到？</h2><p>答：直接在形参里面声明这个参数就可以,但必须名字和传过来的参数一样。</p><h2 id="_6-9-如果前台有很多个参数传入-并且这些参数都是一个对象的-那么" tabindex="-1"><a class="header-anchor" href="#_6-9-如果前台有很多个参数传入-并且这些参数都是一个对象的-那么" aria-hidden="true">#</a> 6.9 如果前台有很多个参数传入,并且这些参数都是一个对象的,那么</h2><p>怎么样快速得到这个对象？<br> 答：直接在方法中声明这个对象,Spring MVC就自动会把属性赋值到这个对象里面。</p><h2 id="_6-10-spring-mvc中函数的返回值是什么" tabindex="-1"><a class="header-anchor" href="#_6-10-spring-mvc中函数的返回值是什么" aria-hidden="true">#</a> 6.10 Spring MVC中函数的返回值是什么？</h2><p>答：返回值可以有很多类型,有String, ModelAndView。ModelAndView类把视图和数据都合并的<br> 一起的，但一般用String比较好。</p><h2 id="_6-11-spring-mvc用什么对象从后台向前台传递数据的" tabindex="-1"><a class="header-anchor" href="#_6-11-spring-mvc用什么对象从后台向前台传递数据的" aria-hidden="true">#</a> 6.11 Spring MVC用什么对象从后台向前台传递数据的？</h2><p>答：通过ModelMap对象,可以在这个对象里面调用put方法,把对象加到里面,前台就可以通过el表<br> 达式拿到。</p><h2 id="_6-12-怎么样把modelmap里面的数据放入session里面" tabindex="-1"><a class="header-anchor" href="#_6-12-怎么样把modelmap里面的数据放入session里面" aria-hidden="true">#</a> 6.12 怎么样把ModelMap里面的数据放入Session里面？</h2><p>答：可以在类上面加上@SessionAttributes注解,里面包含的字符串就是要放入session里面的<br> key。</p><h2 id="_6-13-spring-mvc里面拦截器是怎么写的" tabindex="-1"><a class="header-anchor" href="#_6-13-spring-mvc里面拦截器是怎么写的" aria-hidden="true">#</a> 6.13 Spring MVC里面拦截器是怎么写的</h2><p>有两种写法,一种是实现HandlerInterceptor接口，另外一种是继承适配器类，接着在接口方法当<br> 中，实现处理逻辑；然后在Spring MVC的配置文件中配置拦截器即可：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 配置Spring MVC的拦截器 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">&gt;</span></span>
	<span class="token comment">&lt;!-- 配置一个拦截器的Bean就可以了 默认是对所有请求都拦截 --&gt;</span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myInterceptor<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.zwp.action.MyHandlerInterceptor<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
	<span class="token comment">&lt;!-- 只针对部分请求拦截 --&gt;</span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/modelMap.do<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.zwp.action.MyHandlerInterceptorAdapter<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-14-介绍一下-webapplicationcontext" tabindex="-1"><a class="header-anchor" href="#_6-14-介绍一下-webapplicationcontext" aria-hidden="true">#</a> 6.14 介绍一下 WebApplicationContext</h2><p>WebApplicationContext 继承了ApplicationContext 并增加了一些WEB应用必备的特有功能，它<br> 不同于一般的ApplicationContext ，因为它能处理主题，并找到被关联的servlet。</p><hr><p><strong>史上最全Java面试宝典，BAT大厂面试必备。整理不易，建议先关注点赞加收藏</strong></p>`,80),d=n("thead",null,[n("tr",null,[n("th",null,"序号"),n("th",null,"名称"),n("th",null,"地址")])],-1),u=n("td",null,"1",-1),h=n("td",null,"Java基础面试题（91道含答案）",-1),_={href:"https://blog.csdn.net/qq_30999361/article/details/124482581",target:"_blank",rel:"noopener noreferrer"},g=n("td",null,"2",-1),b=n("td",null,"Java并发编程面试题 （123道含答案）",-1),k={href:"https://blog.csdn.net/qq_30999361/article/details/124545403",target:"_blank",rel:"noopener noreferrer"},v=n("td",null,"3",-1),m=n("td",null,"Java异常面试题 （33道含答案）",-1),f={href:"https://blog.csdn.net/qq_30999361/article/details/124560006",target:"_blank",rel:"noopener noreferrer"},S=n("td",null,"4",-1),M=n("td",null,"Java虚拟机（JVM）面试题（51道含答案）",-1),C={href:"https://blog.csdn.net/qq_30999361/article/details/124532763",target:"_blank",rel:"noopener noreferrer"},q=n("td",null,"5",-1),V=n("td",null,"Java集合面试题（52道含答案）",-1),x={href:"https://blog.csdn.net/qq_30999361/article/details/124503952",target:"_blank",rel:"noopener noreferrer"},R=n("td",null,"6",-1),A=n("td",null,"Linux面试题（50道含答案）",-1),w={href:"https://blog.csdn.net/qq_30999361/article/details/124575798",target:"_blank",rel:"noopener noreferrer"},H=n("td",null,"7",-1),D=n("td",null,"Memcache面试题（23道含答案）",-1),y={href:"https://blog.csdn.net/qq_30999361/article/details/124596870",target:"_blank",rel:"noopener noreferrer"},P=n("td",null,"8",-1),T=n("td",null,"Mybatiss面试题 （37道含答案）",-1),j={href:"https://blog.csdn.net/qq_30999361/article/details/124560907",target:"_blank",rel:"noopener noreferrer"},E=n("td",null,"9",-1),J=n("td",null,"MySQL面试题（40道含答案）",-1),B={href:"https://blog.csdn.net/qq_30999361/article/details/124506169",target:"_blank",rel:"noopener noreferrer"},I=n("td",null,"10",-1),O=n("td",null,"Netty面试题（49道含答案）",-1),N={href:"https://blog.csdn.net/qq_30999361/article/details/124617122",target:"_blank",rel:"noopener noreferrer"},L=n("td",null,"11",-1),G=n("td",null,"Nginx面试题（23道含答案）",-1),U={href:"https://blog.csdn.net/qq_30999361/article/details/124597174",target:"_blank",rel:"noopener noreferrer"},W=n("td",null,"12",-1),F=n("td",null,"RabbitMQ面试题（22道含答案）",-1),z={href:"https://blog.csdn.net/qq_30999361/article/details/124533998",target:"_blank",rel:"noopener noreferrer"},X=n("td",null,"13",-1),Q=n("td",null,"Redis面试题（70道含答案）",-1),Z={href:"https://blog.csdn.net/qq_30999361/article/details/124459566",target:"_blank",rel:"noopener noreferrer"},$=n("td",null,"14",-1),K=n("td",null,"SpringBoot面试题（44道含答案）",-1),Y={href:"https://blog.csdn.net/qq_30999361/article/details/124461725",target:"_blank",rel:"noopener noreferrer"},nn=n("td",null,"15",-1),an=n("td",null,"SpringCloud面试题（49道含答案）",-1),en={href:"https://blog.csdn.net/qq_30999361/article/details/124430712",target:"_blank",rel:"noopener noreferrer"},tn=n("td",null,"16",-1),sn=n("td",null,"SpringMVC面试题（29道含答案）",-1),rn={href:"https://blog.csdn.net/qq_30999361/article/details/124519135",target:"_blank",rel:"noopener noreferrer"},ln=n("td",null,"17",-1),on=n("td",null,"Spring面试题（75道含答案）",-1),pn={href:"https://blog.csdn.net/qq_30999361/article/details/124519472",target:"_blank",rel:"noopener noreferrer"},cn=n("td",null,"18",-1),dn=n("td",null,"TCP、UDP、Socket、Http网络编程面试题（47道含答案）",-1),un={href:"https://blog.csdn.net/qq_30999361/article/details/124617792",target:"_blank",rel:"noopener noreferrer"},hn=n("td",null,"19",-1),_n=n("td",null,"Tomcat面试题（15道含答案）",-1),gn={href:"https://blog.csdn.net/qq_30999361/article/details/124576964",target:"_blank",rel:"noopener noreferrer"},bn=n("td",null,"20",-1),kn=n("td",null,"Zookeeper面试题（28道含答案）",-1),vn={href:"https://blog.csdn.net/qq_30999361/article/details/124596208",target:"_blank",rel:"noopener noreferrer"},mn=n("td",null,"21",-1),fn=n("td",null,"多线程面试题（60道含答案）",-1),Sn={href:"https://blog.csdn.net/qq_30999361/article/details/124596462",target:"_blank",rel:"noopener noreferrer"},Mn=n("td",null,"22",-1),Cn=n("td",null,"设计模式面试题（14道含答案）",-1),qn={href:"https://blog.csdn.net/qq_30999361/article/details/124637874",target:"_blank",rel:"noopener noreferrer"},Vn=n("td",null,"23",-1),xn=n("td",null,"BIO、NIO、AIO、Netty面试题（35道含答案）",-1),Rn={href:"https://blog.csdn.net/qq_30999361/article/details/124653616",target:"_blank",rel:"noopener noreferrer"},An=n("td",null,"24",-1),wn=n("td",null,"Dubbo面试题（47道含答案）",-1),Hn={href:"https://blog.csdn.net/qq_30999361/article/details/124637288",target:"_blank",rel:"noopener noreferrer"},Dn=n("td",null,"25",-1),yn=n("td",null,"ElasticSearch面试题（31道含答案）",-1),Pn={href:"https://blog.csdn.net/qq_30999361/article/details/124619240",target:"_blank",rel:"noopener noreferrer"},Tn=n("td",null,"26",-1),jn=n("td",null,"Git常用命令（63条）",-1),En={href:"https://blog.csdn.net/qq_30999361/article/details/124438420",target:"_blank",rel:"noopener noreferrer"};function Jn(Bn,In){const a=r("ExternalLinkIcon");return l(),i("div",null,[c,n("table",null,[d,n("tbody",null,[n("tr",null,[u,h,n("td",null,[n("a",_,[e("（点击查看）"),t(a)])])]),n("tr",null,[g,b,n("td",null,[n("a",k,[e("（点击查看）"),t(a)])])]),n("tr",null,[v,m,n("td",null,[n("a",f,[e("（点击查看）"),t(a)])])]),n("tr",null,[S,M,n("td",null,[n("a",C,[e("（点击查看）"),t(a)])])]),n("tr",null,[q,V,n("td",null,[n("a",x,[e("（点击查看）"),t(a)])])]),n("tr",null,[R,A,n("td",null,[n("a",w,[e("（点击查看）"),t(a)])])]),n("tr",null,[H,D,n("td",null,[n("a",y,[e("（点击查看）"),t(a)])])]),n("tr",null,[P,T,n("td",null,[n("a",j,[e("（点击查看）"),t(a)])])]),n("tr",null,[E,J,n("td",null,[n("a",B,[e("（点击查看）"),t(a)])])]),n("tr",null,[I,O,n("td",null,[n("a",N,[e("（点击查看）"),t(a)])])]),n("tr",null,[L,G,n("td",null,[n("a",U,[e("（点击查看）"),t(a)])])]),n("tr",null,[W,F,n("td",null,[n("a",z,[e("（点击查看）"),t(a)])])]),n("tr",null,[X,Q,n("td",null,[n("a",Z,[e("（点击查看）"),t(a)])])]),n("tr",null,[$,K,n("td",null,[n("a",Y,[e("（点击查看）"),t(a)])])]),n("tr",null,[nn,an,n("td",null,[n("a",en,[e("（点击查看）"),t(a)])])]),n("tr",null,[tn,sn,n("td",null,[n("a",rn,[e("（点击查看）"),t(a)])])]),n("tr",null,[ln,on,n("td",null,[n("a",pn,[e("（点击查看）"),t(a)])])]),n("tr",null,[cn,dn,n("td",null,[n("a",un,[e("（点击查看）"),t(a)])])]),n("tr",null,[hn,_n,n("td",null,[n("a",gn,[e("（点击查看）"),t(a)])])]),n("tr",null,[bn,kn,n("td",null,[n("a",vn,[e("（点击查看）"),t(a)])])]),n("tr",null,[mn,fn,n("td",null,[n("a",Sn,[e("（点击查看）"),t(a)])])]),n("tr",null,[Mn,Cn,n("td",null,[n("a",qn,[e("（点击查看）"),t(a)])])]),n("tr",null,[Vn,xn,n("td",null,[n("a",Rn,[e("（点击查看）"),t(a)])])]),n("tr",null,[An,wn,n("td",null,[n("a",Hn,[e("（点击查看）"),t(a)])])]),n("tr",null,[Dn,yn,n("td",null,[n("a",Pn,[e("（点击查看）"),t(a)])])]),n("tr",null,[Tn,jn,n("td",null,[n("a",En,[e("（点击查看）"),t(a)])])])])])])}const Nn=s(p,[["render",Jn],["__file","SpringMVC面试题（29道含答案）.html.vue"]]);export{Nn as default};
