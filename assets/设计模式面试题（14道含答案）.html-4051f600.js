const l=JSON.parse('{"key":"v-464610b7","path":"/guide/markdown/Java%E9%9D%A2%E8%AF%95%E5%AE%9D%E5%85%B8/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8814%E9%81%93%E5%90%AB%E7%AD%94%E6%A1%88%EF%BC%89.html","title":"","lang":"zh-CN","frontmatter":{"description":"目录 1.什么是设计模式 2.为什么要学习设计模式 3.设计模式分类 4.设计模式的六大原则 5.单例模式 1.什么是单例 2.那些地方用到了单例模式 3.单例优缺点 4.单例模式使用注意事项： 5.单例防止反射漏洞攻击 6.如何选择单例创建方式 7.单例创建方式 6.工厂模式 1.什么是工厂模式 2.工厂模式好处 3.为什么要学习工厂设计模式 4.Spring开发中的工厂设计模式 5.工厂模式分类 5.1 简单工厂模式 5.2 工厂方法模式 5.3 抽象工厂模式 7.代理模式 1.什么是代理模式 2.代理模式应用场景 3.代理的分类 4.三种代理的区别 5.用代码演示三种代理 5.1 静态代理 5.2 动态代理 5.3.CGLIB动态代理 8.建造者模式 1.什么是建造者模式 2.建造者模式的使用场景 3.代码案例 9.模板方法模式 1.什么是模板方法 2.什么时候使用模板方法 3.实际开发中应用场景哪里用到了模板方法 4.现实生活中的模板方法 5.代码实现模板方法模式 10.外观模式 1.什么是外观模式 2.外观模式例子 11.原型模式 1.什么是原型模式 2.原型模式的应用场景 3.原型模式的使用方式 3.1 原型模式分为浅复制和深复制 4.代码演示 12.策略模式 1.什么是策略模式 2.策略模式应用场景 3.策略模式的优点和缺点 4.代码演示 13.观察者模式 1. 什么是观察者模式 2. 模式的职责 3. 观察者模式应用场景 4.代码实现观察者模式","head":[["meta",{"property":"og:url","content":"https://www.icu-web.tk/vuepress-doc/guide/markdown/Java%E9%9D%A2%E8%AF%95%E5%AE%9D%E5%85%B8/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8814%E9%81%93%E5%90%AB%E7%AD%94%E6%A1%88%EF%BC%89.html"}],["meta",{"property":"og:site_name","content":"折戟沉沙、丿"}],["meta",{"property":"og:description","content":"目录 1.什么是设计模式 2.为什么要学习设计模式 3.设计模式分类 4.设计模式的六大原则 5.单例模式 1.什么是单例 2.那些地方用到了单例模式 3.单例优缺点 4.单例模式使用注意事项： 5.单例防止反射漏洞攻击 6.如何选择单例创建方式 7.单例创建方式 6.工厂模式 1.什么是工厂模式 2.工厂模式好处 3.为什么要学习工厂设计模式 4.Spring开发中的工厂设计模式 5.工厂模式分类 5.1 简单工厂模式 5.2 工厂方法模式 5.3 抽象工厂模式 7.代理模式 1.什么是代理模式 2.代理模式应用场景 3.代理的分类 4.三种代理的区别 5.用代码演示三种代理 5.1 静态代理 5.2 动态代理 5.3.CGLIB动态代理 8.建造者模式 1.什么是建造者模式 2.建造者模式的使用场景 3.代码案例 9.模板方法模式 1.什么是模板方法 2.什么时候使用模板方法 3.实际开发中应用场景哪里用到了模板方法 4.现实生活中的模板方法 5.代码实现模板方法模式 10.外观模式 1.什么是外观模式 2.外观模式例子 11.原型模式 1.什么是原型模式 2.原型模式的应用场景 3.原型模式的使用方式 3.1 原型模式分为浅复制和深复制 4.代码演示 12.策略模式 1.什么是策略模式 2.策略模式应用场景 3.策略模式的优点和缺点 4.代码演示 13.观察者模式 1. 什么是观察者模式 2. 模式的职责 3. 观察者模式应用场景 4.代码实现观察者模式"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-05T14:04:17.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-05T14:04:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-05T14:04:17.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":2,"title":"1.什么是设计模式","slug":"_1-什么是设计模式","link":"#_1-什么是设计模式","children":[]},{"level":2,"title":"2.为什么要学习设计模式","slug":"_2-为什么要学习设计模式","link":"#_2-为什么要学习设计模式","children":[]},{"level":2,"title":"3.设计模式分类","slug":"_3-设计模式分类","link":"#_3-设计模式分类","children":[]},{"level":2,"title":"4.设计模式的六大原则","slug":"_4-设计模式的六大原则","link":"#_4-设计模式的六大原则","children":[]},{"level":2,"title":"5.单例模式","slug":"_5-单例模式","link":"#_5-单例模式","children":[]},{"level":2,"title":"1.什么是单例","slug":"_1-什么是单例","link":"#_1-什么是单例","children":[]},{"level":2,"title":"2.那些地方用到了单例模式","slug":"_2-那些地方用到了单例模式","link":"#_2-那些地方用到了单例模式","children":[]},{"level":2,"title":"3.单例优缺点","slug":"_3-单例优缺点","link":"#_3-单例优缺点","children":[]},{"level":2,"title":"4.单例模式使用注意事项：","slug":"_4-单例模式使用注意事项","link":"#_4-单例模式使用注意事项","children":[]},{"level":2,"title":"5.单例防止反射漏洞攻击","slug":"_5-单例防止反射漏洞攻击","link":"#_5-单例防止反射漏洞攻击","children":[]},{"level":2,"title":"6.如何选择单例创建方式","slug":"_6-如何选择单例创建方式","link":"#_6-如何选择单例创建方式","children":[]},{"level":2,"title":"7.单例创建方式","slug":"_7-单例创建方式","link":"#_7-单例创建方式","children":[]},{"level":2,"title":"6.工厂模式","slug":"_6-工厂模式","link":"#_6-工厂模式","children":[]},{"level":2,"title":"1.什么是工厂模式","slug":"_1-什么是工厂模式","link":"#_1-什么是工厂模式","children":[]},{"level":2,"title":"2.工厂模式好处","slug":"_2-工厂模式好处","link":"#_2-工厂模式好处","children":[]},{"level":2,"title":"3.为什么要学习工厂设计模式","slug":"_3-为什么要学习工厂设计模式","link":"#_3-为什么要学习工厂设计模式","children":[]},{"level":2,"title":"4.Spring开发中的工厂设计模式","slug":"_4-spring开发中的工厂设计模式","link":"#_4-spring开发中的工厂设计模式","children":[]},{"level":2,"title":"5.工厂模式分类","slug":"_5-工厂模式分类","link":"#_5-工厂模式分类","children":[]},{"level":2,"title":"5.1 简单工厂模式","slug":"_5-1-简单工厂模式","link":"#_5-1-简单工厂模式","children":[]},{"level":2,"title":"5.2 工厂方法模式","slug":"_5-2-工厂方法模式","link":"#_5-2-工厂方法模式","children":[]},{"level":2,"title":"5.3 抽象工厂模式","slug":"_5-3-抽象工厂模式","link":"#_5-3-抽象工厂模式","children":[]},{"level":2,"title":"7.代理模式","slug":"_7-代理模式","link":"#_7-代理模式","children":[]},{"level":2,"title":"1.什么是代理模式","slug":"_1-什么是代理模式","link":"#_1-什么是代理模式","children":[]},{"level":2,"title":"2.代理模式应用场景","slug":"_2-代理模式应用场景","link":"#_2-代理模式应用场景","children":[]},{"level":2,"title":"3.代理的分类","slug":"_3-代理的分类","link":"#_3-代理的分类","children":[]},{"level":2,"title":"4.三种代理的区别","slug":"_4-三种代理的区别","link":"#_4-三种代理的区别","children":[]},{"level":2,"title":"5.用代码演示三种代理","slug":"_5-用代码演示三种代理","link":"#_5-用代码演示三种代理","children":[{"level":3,"title":"5.1 静态代理","slug":"_5-1-静态代理","link":"#_5-1-静态代理","children":[]},{"level":3,"title":"5.2 动态代理","slug":"_5-2-动态代理","link":"#_5-2-动态代理","children":[]},{"level":3,"title":"5.3.CGLIB动态代理","slug":"_5-3-cglib动态代理","link":"#_5-3-cglib动态代理","children":[]}]},{"level":2,"title":"8.建造者模式","slug":"_8-建造者模式","link":"#_8-建造者模式","children":[]},{"level":2,"title":"1.什么是建造者模式","slug":"_1-什么是建造者模式","link":"#_1-什么是建造者模式","children":[]},{"level":2,"title":"2.建造者模式的使用场景","slug":"_2-建造者模式的使用场景","link":"#_2-建造者模式的使用场景","children":[]},{"level":2,"title":"3.代码案例","slug":"_3-代码案例","link":"#_3-代码案例","children":[]},{"level":2,"title":"9.模板方法模式","slug":"_9-模板方法模式","link":"#_9-模板方法模式","children":[]},{"level":2,"title":"1.什么是模板方法","slug":"_1-什么是模板方法","link":"#_1-什么是模板方法","children":[]},{"level":2,"title":"2.什么时候使用模板方法","slug":"_2-什么时候使用模板方法","link":"#_2-什么时候使用模板方法","children":[]},{"level":2,"title":"3.实际开发中应用场景哪里用到了模板方法","slug":"_3-实际开发中应用场景哪里用到了模板方法","link":"#_3-实际开发中应用场景哪里用到了模板方法","children":[]},{"level":2,"title":"4.现实生活中的模板方法","slug":"_4-现实生活中的模板方法","link":"#_4-现实生活中的模板方法","children":[]},{"level":2,"title":"5.代码实现模板方法模式","slug":"_5-代码实现模板方法模式","link":"#_5-代码实现模板方法模式","children":[]},{"level":2,"title":"10.外观模式","slug":"_10-外观模式","link":"#_10-外观模式","children":[]},{"level":2,"title":"1.什么是外观模式","slug":"_1-什么是外观模式","link":"#_1-什么是外观模式","children":[]},{"level":2,"title":"2.外观模式例子","slug":"_2-外观模式例子","link":"#_2-外观模式例子","children":[]},{"level":2,"title":"11.原型模式","slug":"_11-原型模式","link":"#_11-原型模式","children":[]},{"level":2,"title":"1.什么是原型模式","slug":"_1-什么是原型模式","link":"#_1-什么是原型模式","children":[]},{"level":2,"title":"2.原型模式的应用场景","slug":"_2-原型模式的应用场景","link":"#_2-原型模式的应用场景","children":[]},{"level":2,"title":"3.原型模式的使用方式","slug":"_3-原型模式的使用方式","link":"#_3-原型模式的使用方式","children":[{"level":3,"title":"3.1 原型模式分为浅复制和深复制","slug":"_3-1-原型模式分为浅复制和深复制","link":"#_3-1-原型模式分为浅复制和深复制","children":[]}]},{"level":2,"title":"4.代码演示","slug":"_4-代码演示","link":"#_4-代码演示","children":[]},{"level":2,"title":"12.策略模式","slug":"_12-策略模式","link":"#_12-策略模式","children":[]},{"level":2,"title":"1.什么是策略模式","slug":"_1-什么是策略模式","link":"#_1-什么是策略模式","children":[]},{"level":2,"title":"2.策略模式应用场景","slug":"_2-策略模式应用场景","link":"#_2-策略模式应用场景","children":[]},{"level":2,"title":"3.策略模式的优点和缺点","slug":"_3-策略模式的优点和缺点","link":"#_3-策略模式的优点和缺点","children":[]},{"level":2,"title":"4.代码演示","slug":"_4-代码演示-1","link":"#_4-代码演示-1","children":[]},{"level":2,"title":"13.观察者模式","slug":"_13-观察者模式","link":"#_13-观察者模式","children":[]},{"level":2,"title":"1. 什么是观察者模式","slug":"_1-什么是观察者模式","link":"#_1-什么是观察者模式","children":[]},{"level":2,"title":"2. 模式的职责","slug":"_2-模式的职责","link":"#_2-模式的职责","children":[]},{"level":2,"title":"3. 观察者模式应用场景","slug":"_3-观察者模式应用场景","link":"#_3-观察者模式应用场景","children":[]},{"level":2,"title":"4.代码实现观察者模式","slug":"_4-代码实现观察者模式","link":"#_4-代码实现观察者模式","children":[]}],"git":{"createdTime":1693922657000,"updatedTime":1693922657000,"contributors":[{"name":"bincooo","email":"admin@bincooodeiMac.local","commits":1}]},"readingTime":{"minutes":34.91,"words":10472},"filePathRelative":"guide/markdown/Java面试宝典/设计模式面试题（14道含答案）.md","localizedDate":"2023年9月5日","excerpt":"<h3> 目录</h3>\\n<ul>\\n<li><a href=\\"#1_4\\">1.什么是设计模式</a></li>\\n<li><a href=\\"#2_8\\">2.为什么要学习设计模式</a></li>\\n<li><a href=\\"#3_16\\">3.设计模式分类</a></li>\\n<li><a href=\\"#4_25\\">4.设计模式的六大原则</a></li>\\n<li><a href=\\"#5_63\\">5.单例模式</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#1_64\\">1.什么是单例</a></li>\\n<li><a href=\\"#2_67\\">2.那些地方用到了单例模式</a></li>\\n<li><a href=\\"#3_75\\">3.单例优缺点</a></li>\\n<li><a href=\\"#4_96\\">4.单例模式使用注意事项：</a></li>\\n<li><a href=\\"#5_102\\">5.单例防止反射漏洞攻击</a></li>\\n<li><a href=\\"#6_118\\">6.如何选择单例创建方式</a></li>\\n<li><a href=\\"#7_122\\">7.单例创建方式</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#6_274\\">6.工厂模式</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#1_275\\">1.什么是工厂模式</a></li>\\n<li><a href=\\"#2_279\\">2.工厂模式好处</a></li>\\n<li><a href=\\"#3_284\\">3.为什么要学习工厂设计模式</a></li>\\n<li><a href=\\"#4Spring_289\\">4.Spring开发中的工厂设计模式</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#5_307\\">5.工厂模式分类</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#51__315\\">5.1 简单工厂模式</a></li>\\n<li><a href=\\"#52__382\\">5.2 工厂方法模式</a></li>\\n<li><a href=\\"#53__450\\">5.3 抽象工厂模式</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#7_524\\">7.代理模式</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#1_525\\">1.什么是代理模式</a></li>\\n<li><a href=\\"#2_531\\">2.代理模式应用场景</a></li>\\n<li><a href=\\"#3_534\\">3.代理的分类</a></li>\\n<li><a href=\\"#4_539\\">4.三种代理的区别</a></li>\\n<li><a href=\\"#5_546\\">5.用代码演示三种代理</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#51__547\\">5.1 静态代理</a></li>\\n<li><a href=\\"#52__600\\">5.2 动态代理</a></li>\\n<li><a href=\\"#53CGLIB_668\\">5.3.CGLIB动态代理</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li><a href=\\"#8_733\\">8.建造者模式</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#1_734\\">1.什么是建造者模式</a></li>\\n<li><a href=\\"#2_749\\">2.建造者模式的使用场景</a></li>\\n<li><a href=\\"#3_758\\">3.代码案例</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#9_842\\">9.模板方法模式</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#1_843\\">1.什么是模板方法</a></li>\\n<li><a href=\\"#2_847\\">2.什么时候使用模板方法</a></li>\\n<li><a href=\\"#3_850\\">3.实际开发中应用场景哪里用到了模板方法</a></li>\\n<li><a href=\\"#4_854\\">4.现实生活中的模板方法</a></li>\\n<li><a href=\\"#5_859\\">5.代码实现模板方法模式</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#10_923\\">10.外观模式</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#1_924\\">1.什么是外观模式</a></li>\\n<li><a href=\\"#2_929\\">2.外观模式例子</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#11_1017\\">11.原型模式</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#1_1018\\">1.什么是原型模式</a></li>\\n<li><a href=\\"#2_1023\\">2.原型模式的应用场景</a></li>\\n<li><a href=\\"#3_1032\\">3.原型模式的使用方式</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#31__1040\\">3.1 原型模式分为浅复制和深复制</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#4_1044\\">4.代码演示</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#12_1099\\">12.策略模式</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#1_1100\\">1.什么是策略模式</a></li>\\n<li><a href=\\"#2_1105\\">2.策略模式应用场景</a></li>\\n<li><a href=\\"#3_1112\\">3.策略模式的优点和缺点</a></li>\\n<li><a href=\\"#4_1116\\">4.代码演示</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#13_1186\\">13.观察者模式</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#1__1187\\">1. 什么是观察者模式</a></li>\\n<li><a href=\\"#2__1193\\">2. 模式的职责</a></li>\\n<li><a href=\\"#3__1201\\">3. 观察者模式应用场景</a></li>\\n<li><a href=\\"#4_1205\\">4.代码实现观察者模式</a></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{l as data};
