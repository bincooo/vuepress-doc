import{_ as e,E as l,Z as p,$ as o,a0 as a,a3 as n,a1 as t,a4 as i}from"./framework-e0d053a9.js";const r={},c=i(`<h3 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h3><ul><li><a href="#MyBatis_1">一、MyBatis简介</a></li><li><ul><li><a href="#1_MyBatis_2">1. MyBatis是什么？</a></li><li><a href="#2_Mybatis_9">2. Mybatis优缺点</a></li><li><a href="#3_Hibernate__MyBatis__27">3. Hibernate 和 MyBatis 的区别</a></li><li><a href="#4_MybatisORM_50">4. 为什么说Mybatis是半自动ORM映射工具？它与全自动的区别在哪里？</a></li><li><a href="#5_JDBC_56">5. 传统JDBC开发存在什么问题？</a></li><li><a href="#6_JDBCMyBatis_65">6. JDBC编程有哪些不足之处，MyBatis是如何解决的？</a></li><li><a href="#7_MyBatisHibernate_79">7. MyBatis和Hibernate的适用场景?</a></li></ul></li><li><a href="#MyBatis_95">二、MyBatis的架构</a></li><li><ul><li><a href="#8_MyBatis_96">8. MyBatis编程步骤是什么样的？</a></li><li><a href="#9_MyBatis_103">9. 请说说MyBatis的工作原理</a></li><li><a href="#10_MyBatis_123">10. MyBatis的功能架构是怎样的</a></li><li><a href="#11_MyBatis_134">11. MyBatis的框架架构设计是怎么样的</a></li><li><a href="#12_DBMS_148">12. 什么是DBMS</a></li><li><a href="#13__157">13. 为什么需要预编译</a></li><li><a href="#14_MybatisExecutor_170">14. Mybatis都有哪些Executor执行器？它们之间的区别是什么？</a></li><li><a href="#15_MybatisExecutor_184">15. Mybatis中如何指定使用哪一种Executor执行器？</a></li><li><a href="#16_Mybatis_191">16. Mybatis是否支持延迟加载？如果支持，它的实现原理是什么？</a></li></ul></li><li><a href="#_203">三、映射器</a></li><li><ul><li><a href="#17__204">17. #{}和\${}的区别</a></li><li><a href="#18_like_211">18. 模糊查询like语句该怎么写</a></li><li><a href="#19_mapper_224">19. 在mapper中如何传递多个参数</a></li><li><a href="#20_Mybatis_270">20. Mybatis如何执行批量操作</a></li><li><a href="#21__361">21. 如何获取生成的主键</a></li><li><a href="#22___371">22. 当实体类中的属性名和表中的字段名不一样 ，怎么办</a></li><li><a href="#23_Mapper__393">23. Mapper 编写有哪几种方式？</a></li><li><a href="#24_MyBatis_447">24. 什么是MyBatis的接口绑定？有哪些实现方式？</a></li><li><a href="#25_MyBatismapper_457">25. 使用MyBatis的mapper接口调用时有哪些要求？</a></li><li><a href="#26_DaoDao_464">26. 这个Dao接口的工作原理是什么？Dao接口里的方法，参数不同时，方法能重载吗？</a></li><li><a href="#27_MybatisXmlXmlid_470">27. Mybatis的Xml映射文件中，不同的Xml映射文件，id是否可以重复？</a></li><li><a href="#28_MybatisXmlMybatis_477">28. 简述Mybatis的Xml映射文件和Mybatis内部数据结构之间的映射关系？</a></li><li><a href="#29_Mybatissql_484">29. Mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？</a></li><li><a href="#30_Xmlselectinsertupdaedelete_492">30. Xml映射文件中，除了常见的select|insert|updae|delete标签之外，还有哪些标签？</a></li><li><a href="#31_MybatisAincludeBBAA_498">31. Mybatis映射文件中，如果A标签通过include引用了B标签的内容，请问，B标签能否定义在A标签的后面，还是说必须定义在A标签的前面？</a></li><li><a href="#32_Mybatis_506">32. Mybatis能执行一对多，一对一的联系查询吗，有哪些实现方法</a></li><li><a href="#33_MybatisEnum_514">33. Mybatis是否可以映射Enum枚举类？</a></li><li><a href="#34_Mybatissqlsqlsql_521">34. Mybatis动态sql是做什么的？都有哪些动态sql？能简述一下动态sql的执行原理吗？</a></li><li><a href="#35_Mybatis_528">35. Mybatis是如何进行分页的？分页插件的原理是什么？</a></li><li><a href="#36_Mybatis_536">36. 简述Mybatis的插件运行原理，以及如何编写一个插件。</a></li><li><a href="#37_Mybatis_544">37. Mybatis的一级、二级缓存</a></li></ul></li></ul><h2 id="一、mybatis简介" tabindex="-1"><a class="header-anchor" href="#一、mybatis简介" aria-hidden="true">#</a> 一、MyBatis简介</h2><h2 id="_1-mybatis是什么" tabindex="-1"><a class="header-anchor" href="#_1-mybatis是什么" aria-hidden="true">#</a> 1. MyBatis是什么？</h2><ul><li>Mybatis 是一个半 ORM（对象关系映射）框架，它内部封装了 JDBC，开发时只需要关注 SQL 语<br> 句本身，不需要花费精力去处理加载驱动、创建连接、创建statement 等繁杂的过程。程序员直<br> 接编写原生态 sql，可以严格控制 sql 执行性能，灵活度高。</li><li>MyBatis 可以使用 XML 或注解来配置和映射原生信息，将 POJO 映射成数据库中的记录，避免了<br> 几乎所有的 JDBC 代码和手动设置参数以及获取结果集。</li></ul><h2 id="_2-mybatis优缺点" tabindex="-1"><a class="header-anchor" href="#_2-mybatis优缺点" aria-hidden="true">#</a> 2. Mybatis优缺点</h2><p><strong>优点</strong><br> 与传统的数据库访问技术相比，ORM有以下优点：</p><ul><li>基于SQL语句编程，相当灵活，不会对应用程序或者数据库的现有设计造成任何影响，SQL写在<br> XML里，解除sql与程序代码的耦合，便于统一管理；提供XML标签，支持编写动态SQL语句，并<br> 可重用</li><li>与JDBC相比，减少了50%以上的代码量，消除了JDBC大量冗余的代码，不需要手动开关连接</li><li>很好的与各种数据库兼容（因为MyBatis使用JDBC来连接数据库，所以只要JDBC支持的数据库<br> MyBatis都支持）</li><li>提供映射标签，支持对象与数据库的ORM字段关系映射；提供对象关系映射标签，支持对象关系<br> 组件维护</li><li>能够与Spring很好的集成</li></ul><p><strong>缺点</strong></p><ul><li>SQL语句的编写工作量较大，尤其当字段多、关联表多时，对开发人员编写SQL语句的功底有一定<br> 要求</li><li>SQL语句依赖于数据库，导致数据库移植性差，不能随意更换数据库</li></ul><h2 id="_3-hibernate-和-mybatis-的区别" tabindex="-1"><a class="header-anchor" href="#_3-hibernate-和-mybatis-的区别" aria-hidden="true">#</a> 3. Hibernate 和 MyBatis 的区别</h2><p><strong>相同点</strong></p><ul><li>都是对jdbc的封装，都是持久层的框架，都用于dao层的开发。</li></ul><p><strong>不同点</strong></p><ul><li>映射关系 <ul><li>MyBatis 是一个半自动映射的框架，配置Java对象与sql语句执行结果的对应关系，多表关联<br> 关系配置简单</li><li>Hibernate 是一个全表映射的框架，配置Java对象与数据库表的对应关系，多表关联关系配<br> 置复杂</li></ul></li></ul><p><strong>SQL优化和移植性</strong></p><ul><li>Hibernate 对SQL语句封装，提供了日志、缓存、级联（级联比 MyBatis 强大）等特性，此外还提<br> 供 HQL（Hibernate Query Language）操作数据库，数据库无关性支持好，但会多消耗性能。如<br> 果项目需要支持多种数据库，代码开发量少，但SQL语句优化困难。</li><li>MyBatis 需要手动编写 SQL，支持动态 SQL、处理列表、动态生成表名、支持存储过程。开发工<br> 作量相对大些。直接使用SQL语句操作数据库，不支持数据库无关性，但sql语句优化容易。</li></ul><p><strong>ORM是什么</strong></p><ul><li>ORM（Object Relational Mapping），对象关系映射，是一种为了解决关系型数据库数据与简单<br> Java对象（POJO）的映射关系的技术。简单的说，ORM是通过使用描述对象和数据库之间映射的<br> 元数据，将程序中的对象自动持久化到关系型数据库中。</li></ul><h2 id="_4-为什么说mybatis是半自动orm映射工具-它与全自动的区别在哪里" tabindex="-1"><a class="header-anchor" href="#_4-为什么说mybatis是半自动orm映射工具-它与全自动的区别在哪里" aria-hidden="true">#</a> 4. 为什么说Mybatis是半自动ORM映射工具？它与全自动的区别在哪里？</h2><ul><li>Hibernate属于全自动ORM映射工具，使用Hibernate查询关联对象或者关联集合对象时，可以根<br> 据对象关系模型直接获取，所以它是全自动的。</li><li>而Mybatis在查询关联对象或关联集合对象时，需要手动编写sql来完成，所以，称之为半自动<br> ORM映射工具。</li></ul><h2 id="_5-传统jdbc开发存在什么问题" tabindex="-1"><a class="header-anchor" href="#_5-传统jdbc开发存在什么问题" aria-hidden="true">#</a> 5. 传统JDBC开发存在什么问题？</h2><ul><li>频繁创建数据库连接对象、释放，容易造成系统资源浪费，影响系统性能。可以使用连接池解决这<br> 个问题。但是使用jdbc需要自己实现连接池。</li><li>sql语句定义、参数设置、结果集处理存在硬编码。实际项目中sql语句变化的可能性较大，一旦发<br> 生变化，需要修改java代码，系统需要重新编译，重新发布。不好维护。</li><li>使用preparedStatement向占有位符号传参数存在硬编码，因为sql语句的where条件不一定，可<br> 能多也可能少，修改sql还要修改代码，系统不易维护。</li><li>结果集处理存在重复代码，处理麻烦。如果可以映射成Java对象会比较方便。</li></ul><h2 id="_6-jdbc编程有哪些不足之处-mybatis是如何解决的" tabindex="-1"><a class="header-anchor" href="#_6-jdbc编程有哪些不足之处-mybatis是如何解决的" aria-hidden="true">#</a> 6. JDBC编程有哪些不足之处，MyBatis是如何解决的？</h2><p>1、数据库链接创建、释放频繁造成系统资源浪费从而影响系统性能，如果使用数据库连接池可解<br> 决此问题。<br> 解决：在mybatis-config.xml中配置数据链接池，使用连接池管理数据库连接。<br> 2、Sql语句写在代码中造成代码不易维护，实际应用sql变化的可能较大，sql变动需要改变java代<br> 码。-<br> 解决：将Sql语句配置在XXXXmapper.xml文件中与java代码分离。<br> 3、向sql语句传参数麻烦，因为sql语句的where条件不一定，可能多也可能少，占位符需要和参<br> 数一一对应。<br> 解决： Mybatis自动将java对象映射至sql语句。<br> 4、对结果集解析麻烦，sql变化导致解析代码变化，且解析前需要遍历，如果能将数据库记录封装<br> 成pojo对象解析比较方便。<br> 解决：Mybatis自动将sql执行结果映射至java对象。</p><h2 id="_7-mybatis和hibernate的适用场景" tabindex="-1"><a class="header-anchor" href="#_7-mybatis和hibernate的适用场景" aria-hidden="true">#</a> 7. MyBatis和Hibernate的适用场景?</h2><ul><li>MyBatis专注于SQL本身，是一个足够灵活的DAO层解决方案。</li><li>对性能的要求很高，或者需求变化较多的项目，如互联网项目，MyBatis将是不错的选择。</li></ul><p><strong>开发难易程度和学习成本</strong></p><ul><li>Hibernate 是重量级框架，学习使用门槛高，适合于需求相对稳定，中小型的项目，比如：办公自<br> 动化系统</li><li>MyBatis 是轻量级框架，学习使用门槛低，适合于需求变化频繁，大型的项目，比如：互联网电子<br> 商务系统</li></ul><p><strong>总结</strong></p><ul><li>MyBatis 是一个小巧、方便、高效、简单、直接、半自动化的持久层框架，</li><li>Hibernate 是一个强大、方便、高效、复杂、间接、全自动化的持久层框架。</li></ul><hr><h2 id="二、mybatis的架构" tabindex="-1"><a class="header-anchor" href="#二、mybatis的架构" aria-hidden="true">#</a> 二、MyBatis的架构</h2><h2 id="_8-mybatis编程步骤是什么样的" tabindex="-1"><a class="header-anchor" href="#_8-mybatis编程步骤是什么样的" aria-hidden="true">#</a> 8. MyBatis编程步骤是什么样的？</h2><p>1、 创建SqlSessionFactory<br> 2、 通过SqlSessionFactory创建SqlSession<br> 3、 通过sqlsession执行数据库操作<br> 4、 调用session.commit()提交事务<br> 5、 调用session.close()关闭会话</p><h2 id="_9-请说说mybatis的工作原理" tabindex="-1"><a class="header-anchor" href="#_9-请说说mybatis的工作原理" aria-hidden="true">#</a> 9. 请说说MyBatis的工作原理</h2><ul><li>在学习 MyBatis 程序之前，需要了解一下 MyBatis 工作原理，以便于理解程序。MyBatis 的工作<br> 原理如下图<br><img src="https://img-blog.csdnimg.cn/63e13d91922d4b78a72d30daba24ea92.png" alt="在这里插入图片描述" loading="lazy"></li></ul><ol><li>读取 MyBatis 配置文件：mybatis-config.xml 为 MyBatis 的全局配置文件，配置了 MyBatis 的运<br> 行环境等信息，例如数据库连接信息。</li><li>加载映射文件。映射文件即 SQL 映射文件，该文件中配置了操作数据库的 SQL 语句，需要在<br> MyBatis 配置文件 mybatis-config.xml 中加载。mybatis-config.xml 文件可以加载多个映射文<br> 件，每个文件对应数据库中的一张表。</li><li>构造会话工厂：通过 MyBatis 的环境等配置信息构建会话工厂 SqlSessionFactory。</li><li>创建会话对象：由会话工厂创建 SqlSession 对象，该对象中包含了执行 SQL 语句的所有方法。</li><li>Executor 执行器：MyBatis 底层定义了一个 Executor 接口来操作数据库，它将根据 SqlSession<br> 传递的参数动态地生成需要执行的 SQL 语句，同时负责查询缓存的维护。</li><li>MappedStatement 对象：在 Executor 接口的执行方法中有一个 MappedStatement 类型的参<br> 数，该参数是对映射信息的封装，用于存储要映射的 SQL 语句的 id、参数等信息。</li><li>输入参数映射：输入参数类型可以是 Map、List 等集合类型，也可以是基本数据类型和 POJO 类<br> 型。输入参数映射过程类似于 JDBC 对 preparedStatement 对象设置参数的过程。</li><li>输出结果映射：输出结果类型可以是 Map、 List 等集合类型，也可以是基本数据类型和 POJO 类<br> 型。输出结果映射过程类似于 JDBC 对结果集的解析过程。</li></ol><h2 id="_10-mybatis的功能架构是怎样的" tabindex="-1"><a class="header-anchor" href="#_10-mybatis的功能架构是怎样的" aria-hidden="true">#</a> 10. MyBatis的功能架构是怎样的</h2><figure><img src="https://img-blog.csdnimg.cn/8d44ab6c91934eb986458647870bc4de.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><ul><li>我们把Mybatis的功能架构分为三层： <ul><li>API接口层：提供给外部使用的接口API，开发人员通过这些本地API来操纵数据库。接口层一<br> 接收到调用请求就会调用数据处理层来完成具体的数据处理。</li><li>数据处理层：负责具体的SQL查找、SQL解析、SQL执行和执行结果映射处理等。它主要的目<br> 的是根据调用的请求完成一次数据库操作。</li><li>基础支撑层：负责最基础的功能支撑，包括连接管理、事务管理、配置加载和缓存处理，这<br> 些都是共用的东西，将他们抽取出来作为最基础的组件。为上层的数据处理层提供最基础的<br> 支撑。</li></ul></li></ul><h2 id="_11-mybatis的框架架构设计是怎么样的" tabindex="-1"><a class="header-anchor" href="#_11-mybatis的框架架构设计是怎么样的" aria-hidden="true">#</a> 11. MyBatis的框架架构设计是怎么样的</h2><figure><img src="https://img-blog.csdnimg.cn/bfa052c973a34634baca758fb42c55fb.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><ul><li>这张图从上往下看。MyBatis的初始化，会从mybatis-config.xml配置文件，解析构造成<br> Configuration这个类，就是图中的红框。</li></ul><ol><li>加载配置：配置来源于两个地方，一处是配置文件，一处是Java代码的注解，将SQL的配置信息加<br> 载成为一个个MappedStatement对象（包括了传入参数映射配置、执行的SQL语句、结果映射配<br> 置），存储在内存中。</li><li>SQL解析：当API接口层接收到调用请求时，会接收到传入SQL的ID和传入对象（可以是Map、<br> JavaBean或者基本数据类型），Mybatis会根据SQL的ID找到对应的MappedStatement，然后根<br> 据传入参数对象对MappedStatement进行解析，解析后可以得到最终要执行的SQL语句和参数。</li><li>SQL执行：将最终得到的SQL和参数拿到数据库进行执行，得到操作数据库的结果。</li><li>结果映射：将操作数据库的结果按照映射的配置进行转换，可以转换成HashMap、JavaBean或者<br> 基本数据类型，并将最终结果返回。</li></ol><h2 id="_12-什么是dbms" tabindex="-1"><a class="header-anchor" href="#_12-什么是dbms" aria-hidden="true">#</a> 12. 什么是DBMS</h2><ul><li>DBMS：数据库管理系统(database management system)是一种操纵和管理数据库的大型软件，<br> 用于建立、使用和维护数zd据库，简称dbms。它对数据库进行统一的管理和控制，以保证数据库<br> 的安全性和完整性。用户通过dbms访问数据库中的数据，数据库管理员也通过dbms进行数据库<br> 的维护工作。它可使多个应用程序和用户用不同的方法在同时版或不同时刻去建立，修改和询问数<br> 据库。DBMS提供数据定义语言DDL（Data Definition Language）与数据操作语言DML（Data<br> Manipulation Language），供用户定义数据库的模式结构与权限约束，实现对数据的追加权、删<br> 除等操作。</li></ul><h2 id="_13-为什么需要预编译" tabindex="-1"><a class="header-anchor" href="#_13-为什么需要预编译" aria-hidden="true">#</a> 13. 为什么需要预编译</h2><ul><li>定义： <ul><li>SQL 预编译指的是数据库驱动在发送 SQL 语句和参数给 DBMS 之前对 SQL 语句进行编译，<br> 这样 DBMS 执行 SQL 时，就不需要重新编译。</li></ul></li><li>为什么需要预编译 <ul><li>JDBC 中使用对象 PreparedStatement 来抽象预编译语句，使用预编译。预编译阶段可以优<br> 化 SQL 的执行。预编译之后的 SQL 多数情况下可以直接执行，DBMS 不需要再次编译，越<br> 复杂的SQL，编译的复杂度将越大，预编译阶段可以合并多次操作为一个操作。同时预编译<br> 语句对象可以重复利用。把一个 SQL 预编译后产生的 PreparedStatement 对象缓存下来，<br> 下次对于同一个SQL，可以直接使用这个缓存的 PreparedState 对象。Mybatis默认情况下，<br> 将对所有的 SQL 进行预编译。</li><li>还有一个重要的原因，复制SQL注入</li></ul></li></ul><h2 id="_14-mybatis都有哪些executor执行器-它们之间的区别是什么" tabindex="-1"><a class="header-anchor" href="#_14-mybatis都有哪些executor执行器-它们之间的区别是什么" aria-hidden="true">#</a> 14. Mybatis都有哪些Executor执行器？它们之间的区别是什么？</h2><ul><li>Mybatis有三种基本的Executor执行器，SimpleExecutor、ReuseExecutor、BatchExecutor。</li><li>SimpleExecutor：每执行一次update或select，就开启一个Statement对象，用完立刻关闭<br> Statement对象。</li><li>ReuseExecutor：执行update或select，以sql作为key查找Statement对象，存在就使用，不存<br> 在就创建，用完后，不关闭Statement对象，而是放置于Map&lt;String, Statement&gt;内，供下一次<br> 使用。简言之，就是重复使用Statement对象。</li><li>BatchExecutor：执行update（没有select，JDBC批处理不支持select），将所有sql都添加到批<br> 处理中（addBatch()），等待统一执行（executeBatch()），它缓存了多个Statement对象，每个<br> Statement对象都是addBatch()完毕后，等待逐一执行executeBatch()批处理。与JDBC批处理相<br> 同。</li></ul><p>作用范围：Executor的这些特点，都严格限制在SqlSession生命周期范围内。</p><h2 id="_15-mybatis中如何指定使用哪一种executor执行器" tabindex="-1"><a class="header-anchor" href="#_15-mybatis中如何指定使用哪一种executor执行器" aria-hidden="true">#</a> 15. Mybatis中如何指定使用哪一种Executor执行器？</h2><ul><li>在Mybatis配置文件中，在设置（settings）可以指定默认的ExecutorType执行器类型，也可以手<br> 动给DefaultSqlSessionFactory的创建SqlSession的方法传递ExecutorType类型参数，如<br> SqlSession openSession(ExecutorType execType)。</li><li>配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared<br> statements）； BATCH 执行器将重用语句并执行批量更新。</li></ul><h2 id="_16-mybatis是否支持延迟加载-如果支持-它的实现原理是什么" tabindex="-1"><a class="header-anchor" href="#_16-mybatis是否支持延迟加载-如果支持-它的实现原理是什么" aria-hidden="true">#</a> 16. Mybatis是否支持延迟加载？如果支持，它的实现原理是什么？</h2><ul><li>Mybatis仅支持association关联对象和collection关联集合对象的延迟加载，association指的就是<br> 一对一，collection指的就是一对多查询。在Mybatis配置文件中，可以配置是否启用延迟加载<br> lazyLoadingEnabled=true|false。</li><li>它的原理是，使用CGLIB创建目标对象的代理对象，当调用目标方法时，进入拦截器方法，比如调<br> 用a.getB().getName()，拦截器invoke()方法发现a.getB()是null值，那么就会单独发送事先保存好<br> 的查询关联B对象的sql，把B查询上来，然后调用a.setB(b)，于是a的对象b属性就有值了，接着完<br> 成a.getB().getName()方法的调用。这就是延迟加载的基本原理。</li><li>当然了，不光是Mybatis，几乎所有的包括Hibernate，支持延迟加载的原理都是一样的。</li></ul><hr><h2 id="三、映射器" tabindex="-1"><a class="header-anchor" href="#三、映射器" aria-hidden="true">#</a> 三、映射器</h2><h2 id="_17-和-的区别" tabindex="-1"><a class="header-anchor" href="#_17-和-的区别" aria-hidden="true">#</a> 17. #{}和\${}的区别</h2><ul><li>#{}是占位符，预编译处理；\${}是拼接符，字符串替换，没有预编译处理。</li><li>Mybatis在处理#{}时，#{}传入参数是以字符串传入，会将SQL中的#{}替换为?号，调用<br> PreparedStatement的set方法来赋值。</li><li>#{} 可以有效的防止SQL注入，提高系统安全性；\${} 不能防止SQL 注入</li><li>#{} 的变量替换是在DBMS 中；\${} 的变量替换是在 DBMS 外</li></ul><h2 id="_18-模糊查询like语句该怎么写" tabindex="-1"><a class="header-anchor" href="#_18-模糊查询like语句该怎么写" aria-hidden="true">#</a> 18. 模糊查询like语句该怎么写</h2><p>1 ’%\${question}%’ 可能引起SQL注入，不推荐<br> 2 “%”#{question}“%” 注意：因为#{…}解析成sql语句时候，会在变量外侧自动加单引号’ &#39;，所以<br> 这里 % 需要使用双引号&quot; &quot;，不能使用单引号 ’ &#39;，不然会查不到任何结果。<br> 3 CONCAT(’%’,#{question},’%’) 使用CONCAT()函数，（推荐）<br> 4 使用bind标签（不推荐）</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>listUserLikeUsername<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.jourwon.pojo.User<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bind</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pattern<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&#39;</span>%&#39; + username + &#39;%&#39;<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
	select id,sex,age,username,password from person where username LIKE #{pattern}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_19-在mapper中如何传递多个参数" tabindex="-1"><a class="header-anchor" href="#_19-在mapper中如何传递多个参数" aria-hidden="true">#</a> 19. 在mapper中如何传递多个参数</h2><p><strong>方法1：顺序传参法</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> deptId<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">&quot;selectUser&quot;</span> resultMap<span class="token operator">=</span><span class="token string">&quot;UserResultMap&quot;</span><span class="token operator">&gt;</span>
		select <span class="token operator">*</span> from user where user_name <span class="token operator">=</span> #<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span> and dept_id <span class="token operator">=</span> #<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span>
	<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>#{}里面的数字代表传入参数的顺序。</li><li>这种方法不建议使用，sql层表达不直观，且一旦顺序调整容易出错。</li></ul><p><strong>方法2：@Param注解传参法</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;userName&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;deptId&quot;</span><span class="token punctuation">)</span> deptId<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">&quot;selectUser&quot;</span> resultMap<span class="token operator">=</span><span class="token string">&quot;UserResultMap&quot;</span><span class="token operator">&gt;</span>
		select <span class="token operator">*</span> from user where user_name <span class="token operator">=</span> #<span class="token punctuation">{</span>userName<span class="token punctuation">}</span> and dept_id <span class="token operator">=</span> #<span class="token punctuation">{</span>deptId<span class="token punctuation">}</span>
	<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>#{}里面的名称对应的是注解@Param括号里面修饰的名称。</li><li>这种方法在参数不多的情况还是比较直观的，（推荐使用）。</li></ul><p><strong>方法3：Map传参法</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">&quot;selectUser&quot;</span> parameterType<span class="token operator">=</span><span class="token string">&quot;java.util.Map&quot;</span> resultMap<span class="token operator">=</span><span class="token string">&quot;UserResultMap&quot;</span><span class="token operator">&gt;</span>
		select <span class="token operator">*</span> from user where user_name <span class="token operator">=</span> #<span class="token punctuation">{</span>userName<span class="token punctuation">}</span> and dept_id <span class="token operator">=</span> #<span class="token punctuation">{</span>deptId<span class="token punctuation">}</span>
	<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>#{}里面的名称对应的是Map里面的key名称。</li><li>这种方法适合传递多个参数，且参数易变能灵活传递的情况。（推荐使用）。</li></ul><p><strong>方法4：Java Bean传参法</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">&quot;selectUser&quot;</span> parameterType<span class="token operator">=</span><span class="token string">&quot;com.jourwon.pojo.User&quot;</span> resultMap<span class="token operator">=</span><span class="token string">&quot;UserResultMap&quot;</span><span class="token operator">&gt;</span>
		select <span class="token operator">*</span> from user where user_name <span class="token operator">=</span> #<span class="token punctuation">{</span>userName<span class="token punctuation">}</span> and dept_id <span class="token operator">=</span> #<span class="token punctuation">{</span>deptId<span class="token punctuation">}</span>
	<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>#{}里面的名称对应的是User类里面的成员属性。</li><li>这种方法直观，需要建一个实体类，扩展不容易，需要加属性，但代码可读性强，业务逻辑处理方<br> 便，推荐使用。（推荐使用）。</li></ul><h2 id="_20-mybatis如何执行批量操作" tabindex="-1"><a class="header-anchor" href="#_20-mybatis如何执行批量操作" aria-hidden="true">#</a> 20. Mybatis如何执行批量操作</h2><ul><li><p>使用foreach标签</p></li><li><p>foreach的主要用在构建in条件中，它可以在SQL语句中进行迭代一个集合。foreach标签的属性主<br> 要有item，index，collection，open，separator，close。</p><ul><li>item   表示集合中每一个元素进行迭代时的别名，随便起的变量名；</li><li>index   指定一个名字，用于表示在迭代过程中，每次迭代到的位置，不常用；</li><li>open   表示该语句以什么开始，常用“(”；</li><li>separator 表示在每次进行迭代之间以什么符号作为分隔符，常用“,”；</li><li>close   表示以什么结束，常用“)”。</li></ul></li><li><p>在使用foreach的时候最关键的也是最容易出错的就是collection属性，该属性是必须指定的，但是<br> 在不同情况下，该属性的值是不一样的，主要有一下3种情况：<br> 1.如果传入的是单参数且参数类型是一个List的时候，collection属性值为list<br> 2.如果传入的是单参数且参数类型是一个array数组的时候，collection的属性值为array<br> 3.如果传入的参数是多个的时候，我们就需要把它们封装成一个Map了，当然单参数也可以封<br> 装成map，实际上如果你在传入参数的时候，在MyBatis里面也是会把它封装成一个Map<br> 的，<br> map的key就是参数名，所以这个时候collection属性值就是传入的List或array对象在自己封<br> 装的map里面的key</p></li><li><p>具体用法如下：</p></li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>	<span class="token comment">&lt;!-- 批量保存(foreach插入多条数据两种方法)
	int addEmpsBatch(@Param(&quot;emps&quot;) List&lt;Employee&gt; emps); --&gt;</span>
	<span class="token comment">&lt;!-- MySQL下批量保存，可以foreach遍历 mysql支持values(),(),()语法 --&gt;</span> //推荐使用
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>addEmpsBatch<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
		INSERT INTO emp(ename,gender,email,did)
		VALUES
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>emps<span class="token punctuation">&quot;</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>emp<span class="token punctuation">&quot;</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>,<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
			(#{emp.eName},#{emp.gender},#{emp.email},#{emp.dept.id})
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>	<span class="token comment">&lt;!-- 这种方式需要数据库连接属性allowMutiQueries=true的支持
	如jdbc.url=jdbc:mysql://localhost:3306/mybatis?allowMultiQueries=true --&gt;</span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>addEmpsBatch<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>emps<span class="token punctuation">&quot;</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>emp<span class="token punctuation">&quot;</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
			INSERT INTO emp(ename,gender,email,did)
				VALUES(#{emp.eName},#{emp.gender},#{emp.email},#{emp.dept.id})
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用ExecutorType.BATCH <ul><li>Mybatis内置的ExecutorType有3种，默认为simple,该模式下它为每个语句的执行创建一个<br> 新的预处理语句，单条提交sql；而batch模式重复使用已经预处理的语句，并且批量执行所<br> 有更新语句，显然batch性能将更优； 但batch模式也有自己的问题，比如在Insert操作时，<br> 在事务没有提交之前，是没有办法获取到自增的id，这在某型情形下是不符合业务要求的</li><li>具体用法如下：</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token comment">//批量保存方法测试</span>
	<span class="token annotation punctuation">@Test</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">{</span>
		<span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> <span class="token function">getSqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//可以执行批量操作的sqlSession</span>
		<span class="token class-name">SqlSession</span> openSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token class-name">ExecutorType</span><span class="token punctuation">.</span><span class="token constant">BATCH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//批量保存执行前时间</span>
		<span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>
			<span class="token class-name">EmployeeMapper</span> mapper <span class="token operator">=</span> openSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">EmployeeMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				mapper<span class="token punctuation">.</span><span class="token function">addEmp</span><span class="token punctuation">(</span><span class="token keyword">new</span>
				<span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			openSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">//批量保存执行后的时间</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;执行时长&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">//批量 预编译sql一次==》设置参数==》10000次==》执行1次 677</span>
			<span class="token comment">//非批量 （预编译=设置参数=执行 ）==》10000次 1121</span>
		<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
			openSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>mapper和mapper.xml如下</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmployeeMapper</span> <span class="token punctuation">{</span>
		<span class="token comment">//批量保存员工</span>
		<span class="token class-name">Long</span> <span class="token function">addEmp</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> employee<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.jourwon.mapper.EmployeeMapper<span class="token punctuation">&quot;</span></span>
		<span class="token attr-name">&lt;!--批量保存员工</span> <span class="token attr-name">--</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>addEmp<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
			insert into employee(lastName,email,gender)
				values(#{lastName},#{email},#{gender})
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_21-如何获取生成的主键" tabindex="-1"><a class="header-anchor" href="#_21-如何获取生成的主键" aria-hidden="true">#</a> 21. 如何获取生成的主键</h2><ul><li>新增标签中添加：keyProperty=&quot; ID &quot; 即可</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>insert<span class="token punctuation">&quot;</span></span> <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userId<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>
		insert into user(user_name, user_password, create_time)
		values(#{userName}, #{userPassword} , #{createTime, jdbcType=TIMESTAMP})
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://img-blog.csdnimg.cn/4a845e6cf73248c688d43ac8a00bc069.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><h2 id="_22-当实体类中的属性名和表中的字段名不一样-怎么办" tabindex="-1"><a class="header-anchor" href="#_22-当实体类中的属性名和表中的字段名不一样-怎么办" aria-hidden="true">#</a> 22. 当实体类中的属性名和表中的字段名不一样 ，怎么办</h2><ul><li>第1种： 通过在查询的SQL语句中定义字段名的别名，让字段名的别名和实体类的属性名一致。</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>getOrder<span class="token punctuation">&quot;</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>int<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.jourwon.pojo.Order<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
		select order_id id, order_no orderno ,order_price price form orders
		where order_id=#{id};
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第2种： 通过 来映射字段名和实体类属性名的一一对应的关系。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">&quot;getOrder&quot;</span> parameterType<span class="token operator">=</span><span class="token string">&quot;int&quot;</span> resultMap<span class="token operator">=</span><span class="token string">&quot;orderResultMap&quot;</span><span class="token operator">&gt;</span>
		select <span class="token operator">*</span> from orders where order_id<span class="token operator">=</span>#<span class="token punctuation">{</span>id<span class="token punctuation">}</span>
	<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span>resultMap type<span class="token operator">=</span><span class="token string">&quot;com.jourwon.pojo.Order&quot;</span> id<span class="token operator">=</span><span class="token string">&quot;orderResultMap&quot;</span><span class="token operator">&gt;</span>
		<span class="token operator">&lt;</span><span class="token operator">!</span>–用id属性来映射主键字段–<span class="token operator">&gt;</span>
		<span class="token operator">&lt;</span>id property<span class="token operator">=</span><span class="token string">&quot;id&quot;</span> column<span class="token operator">=</span><span class="token string">&quot;order_id&quot;</span><span class="token operator">&gt;</span>
		<span class="token operator">&lt;</span><span class="token operator">!</span>–用result属性来映射非主键字段，property为实体类属性名，column为数据库表中的属性–<span class="token operator">&gt;</span>
		<span class="token operator">&lt;</span>result property <span class="token operator">=</span><span class="token string">&quot;orderno&quot;</span> column <span class="token operator">=</span><span class="token string">&quot;order_no&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
		<span class="token operator">&lt;</span>result property<span class="token operator">=</span><span class="token string">&quot;price&quot;</span> column<span class="token operator">=</span><span class="token string">&quot;order_price&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span><span class="token operator">/</span>reslutMap<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_23-mapper-编写有哪几种方式" tabindex="-1"><a class="header-anchor" href="#_23-mapper-编写有哪几种方式" aria-hidden="true">#</a> 23. Mapper 编写有哪几种方式？</h2><ul><li>第一种：接口实现类继承 SqlSessionDaoSupport：使用此种方法需要编写mapper 接口，<br> mapper 接口实现类、mapper.xml 文件。</li></ul><ol><li>在 sqlMapConfig.xml 中配置 mapper.xml 的位置</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mapper.xml 文件的地址<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mapper.xml 文件的地址<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>定义 mapper 接口</li><li>实现类集成 SqlSessionDaoSupport<br> mapper 方法中可以 this.getSqlSession()进行数据增删改查。</li><li>spring 配置</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span> <span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mapper 接口的实现<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sqlSessionFactory<span class="token punctuation">&quot;</span></span><span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sqlSessionFactory<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第二种：使用 org.mybatis.spring.mapper.MapperFactoryBean：</li></ul><ol><li>在 sqlMapConfig.xml 中配置 mapper.xml 的位置，如果 mapper.xml 和mappre 接口的名<br> 称相同且在同一个目录，这里可以不用配置</li><li>定义 mapper 接口：</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mapper.xml 文件的地址<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mapper.xml 文件的地址<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>mapper.xml 中的 namespace 为 mapper 接口的地址</li><li>mapper 接口中的方法名和 mapper.xml 中的定义的 statement 的 id 保持一致</li><li>Spring 中定义</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.mybatis.spring.mapper.MapperFactoryBean<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mapperInterface<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mapper 接口地址<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sqlSessionFactory<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sqlSessionFactory<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第三种：使用 mapper 扫描器：</li></ul><ol><li>mapper.xml 文件编写：<br> mapper.xml 中的 namespace 为 mapper 接口的地址；<br> mapper 接口中的方法名和 mapper.xml 中的定义的 statement 的 id 保持一致；<br> 如果将 mapper.xml 和 mapper 接口的名称保持一致则不用在 sqlMapConfig.xml中进行配置。</li><li>定义 mapper 接口：<br> 注意 mapper.xml 的文件名和 mapper 的接口名称保持一致，且放在同一个目录</li><li>配置 mapper 扫描器：</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>basePackage<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mapper 接口包地址<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sqlSessionFactoryBeanName<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sqlSessionFactory<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>使用扫描器后从 spring 容器中获取 mapper 的实现对象。</li></ol><h2 id="_24-什么是mybatis的接口绑定-有哪些实现方式" tabindex="-1"><a class="header-anchor" href="#_24-什么是mybatis的接口绑定-有哪些实现方式" aria-hidden="true">#</a> 24. 什么是MyBatis的接口绑定？有哪些实现方式？</h2><ul><li>接口绑定，就是在MyBatis中任意定义接口，然后把接口里面的方法和SQL语句绑定，我们直接调<br> 用接口方法就可以，这样比起原来了SqlSession提供的方法我们可以有更加灵活的选择和设置。</li><li>接口绑定有两种实现方式<br> 1.通过注解绑定，就是在接口的方法上面加上 @Select、@Update等注解，里面包含Sql语句来<br> 绑定；<br> 2.通过xml里面写SQL来绑定， 在这种情况下，要指定xml映射文件里面的namespace必须为<br> 接口的全路径名。当Sql语句比较简单时候，用注解绑定， 当SQL语句比较复杂时候，用xml<br> 绑定，一般用xml绑定的比较多。</li></ul><h2 id="_25-使用mybatis的mapper接口调用时有哪些要求" tabindex="-1"><a class="header-anchor" href="#_25-使用mybatis的mapper接口调用时有哪些要求" aria-hidden="true">#</a> 25. 使用MyBatis的mapper接口调用时有哪些要求？</h2><ol><li>Mapper接口方法名和mapper.xml中定义的每个sql的id相同。</li><li>Mapper接口方法的输入参数类型和mapper.xml中定义的每个sql 的parameterType的类型相<br> 同。</li><li>Mapper接口方法的输出参数类型和mapper.xml中定义的每个sql的resultType的类型相同。</li><li>Mapper.xml文件中的namespace即是mapper接口的类路径。</li></ol><h2 id="_26-这个dao接口的工作原理是什么-dao接口里的方法-参数不同时-方法能重载吗" tabindex="-1"><a class="header-anchor" href="#_26-这个dao接口的工作原理是什么-dao接口里的方法-参数不同时-方法能重载吗" aria-hidden="true">#</a> 26. 这个Dao接口的工作原理是什么？Dao接口里的方法，参数不同时，方法能重载吗？</h2><ul><li>Dao接口的工作原理是JDK动态代理，Mybatis运行时会使用JDK动态代理为Dao接口生成代理<br> proxy对象，代理对象proxy会拦截接口方法，转而执行MappedStatement所代表的sql，然后将<br> sql执行结果返回。</li><li>Dao接口里的方法，是不能重载的，因为是全限名+方法名的保存和寻找策略。</li></ul><h2 id="_27-mybatis的xml映射文件中-不同的xml映射文件-id是否可以重复" tabindex="-1"><a class="header-anchor" href="#_27-mybatis的xml映射文件中-不同的xml映射文件-id是否可以重复" aria-hidden="true">#</a> 27. Mybatis的Xml映射文件中，不同的Xml映射文件，id是否可以重复？</h2><ul><li>不同的Xml映射文件，如果配置了namespace，那么id可以重复；如果没有配置namespace，那<br> 么id不能重复；毕竟namespace不是必须的，只是最佳实践而已。</li><li>原因就是namespace+id是作为Map&lt;String, MappedStatement&gt;的key使用的，如果没有<br> namespace，就剩下id，那么，id重复会导致数据互相覆盖。有了namespace，自然id就可以重<br> 复，namespace不同，namespace+id自然也就不同。</li></ul><h2 id="_28-简述mybatis的xml映射文件和mybatis内部数据结构之间的映射关系" tabindex="-1"><a class="header-anchor" href="#_28-简述mybatis的xml映射文件和mybatis内部数据结构之间的映射关系" aria-hidden="true">#</a> 28. 简述Mybatis的Xml映射文件和Mybatis内部数据结构之间的映射关系？</h2><ul><li>答：Mybatis将所有Xml配置信息都封装到All-In-One重量级对象Configuration内部。在Xml映射<br> 文件中， 标签会被解析为ParameterMap对象，其每个子元素会被解析为<br> ParameterMapping对象。 标签会被解析为ResultMap对象，其每个子元素会被解<br> 析为ResultMapping对象。每一个 、 、 、 标签均会被<br> 解析为MappedStatement对象，标签内的sql会被解析为BoundSql对象。</li></ul><h2 id="_29-mybatis是如何将sql执行结果封装为目标对象并返回的-都有哪些映射形式" tabindex="-1"><a class="header-anchor" href="#_29-mybatis是如何将sql执行结果封装为目标对象并返回的-都有哪些映射形式" aria-hidden="true">#</a> 29. Mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？</h2><ul><li>第一种是使用 标签，逐一定义列名和对象属性名之间的映射关系。</li><li>第二种是使用sql列的别名功能，将列别名书写为对象属性名，比如T_NAME AS NAME，对象属性<br> 名一般是name，小写，但是列名不区分大小写，Mybatis会忽略列名大小写，智能找到与之对应<br> 对象属性名，你甚至可以写成T_NAME AS NaMe，Mybatis一样可以正常工作。</li></ul><p>有了列名与属性名的映射关系后，Mybatis通过反射创建对象，同时使用反射给对象的属性逐一赋值并返回，那些找不到映射关系的属性，是无法完成赋值的。</p><h2 id="_30-xml映射文件中-除了常见的select-insert-updae-delete标签之外-还有哪些标签" tabindex="-1"><a class="header-anchor" href="#_30-xml映射文件中-除了常见的select-insert-updae-delete标签之外-还有哪些标签" aria-hidden="true">#</a> 30. Xml映射文件中，除了常见的select|insert|updae|delete标签之外，还有哪些标签？</h2><ul><li>还有很多其他的标签， <code>&lt;resultMap&gt;</code> 、 <code>&lt;parameterMap&gt;</code> 、 <code>&lt;sql&gt;</code> 、 <code>&lt;include&gt;</code> 、<br><code>&lt;selectKey&gt;</code> ，加上动态sql的9个标签，<br> trim|where|set|foreach|if|choose|when|otherwise|bind等，其中 为sql片段标签，通<br> 过<code>&lt;include&gt;</code> 标签引入sql片段，<code>&lt;selectKey&gt;</code> 为不支持自增的主键生成策略标签。</li></ul><h2 id="_31-mybatis映射文件中-如果a标签通过include引用了b标签的内容-请问-b标签能否定义在a标签的后面-还是说必须定义在a标签的前面" tabindex="-1"><a class="header-anchor" href="#_31-mybatis映射文件中-如果a标签通过include引用了b标签的内容-请问-b标签能否定义在a标签的后面-还是说必须定义在a标签的前面" aria-hidden="true">#</a> 31. Mybatis映射文件中，如果A标签通过include引用了B标签的内容，请问，B标签能否定义在A标签的后面，还是说必须定义在A标签的前面？</h2><ul><li>虽然Mybatis解析Xml映射文件是按照顺序解析的，但是，被引用的B标签依然可以定义在任何地<br> 方，Mybatis都可以正确识别。</li><li>原理是，Mybatis解析A标签，发现A标签引用了B标签，但是B标签尚未解析到，尚不存在，此<br> 时，Mybatis会将A标签标记为未解析状态，然后继续解析余下的标签，包含B标签，待所有标签解<br> 析完毕，Mybatis会重新解析那些被标记为未解析的标签，此时再解析A标签时，B标签已经存在，<br> A标签也就可以正常解析完成了。</li></ul><h2 id="_32-mybatis能执行一对多-一对一的联系查询吗-有哪些实现方法" tabindex="-1"><a class="header-anchor" href="#_32-mybatis能执行一对多-一对一的联系查询吗-有哪些实现方法" aria-hidden="true">#</a> 32. Mybatis能执行一对多，一对一的联系查询吗，有哪些实现方法</h2><ul><li>能，不止可以一对多，一对一还可以多对多，一对多</li><li>实现方式：<br> 1.单独发送一个SQL去查询关联对象，赋给主对象，然后返回主对象<br> 2.使用嵌套查询，似JOIN查询，一部分是A对象的属性值，另一部分是关联对 象 B的属性值，<br> 好处是只要发送一个属性值，就可以把主对象和关联对象查出来<br> 3.子查询</li></ul><h2 id="_33-mybatis是否可以映射enum枚举类" tabindex="-1"><a class="header-anchor" href="#_33-mybatis是否可以映射enum枚举类" aria-hidden="true">#</a> 33. Mybatis是否可以映射Enum枚举类？</h2><ul><li>Mybatis可以映射枚举类，不单可以映射枚举类，Mybatis可以映射任何对象到表的一列上。映射<br> 方式为自定义一个TypeHandler，实现TypeHandler的setParameter()和getResult()接口方法。</li><li>TypeHandler有两个作用，一是完成从javaType至jdbcType的转换，二是完成jdbcType至<br> javaType的转换，体现为setParameter()和getResult()两个方法，分别代表设置sql问号占位符参<br> 数和获取列查询结果。</li></ul><h2 id="_34-mybatis动态sql是做什么的-都有哪些动态sql-能简述一下动态sql的执行原理吗" tabindex="-1"><a class="header-anchor" href="#_34-mybatis动态sql是做什么的-都有哪些动态sql-能简述一下动态sql的执行原理吗" aria-hidden="true">#</a> 34. Mybatis动态sql是做什么的？都有哪些动态sql？能简述一下动态sql的执行原理吗？</h2><ul><li>Mybatis动态sql可以让我们在Xml映射文件内，以标签的形式编写动态sql，完成逻辑判断和动态<br> 拼接sql的功能，Mybatis提供了9种动态sql标签<br> trim|where|set|foreach|if|choose|when|otherwise|bind。</li><li>其执行原理为，使用OGNL从sql参数对象中计算表达式的值，根据表达式的值动态拼接sql，以此<br> 来完成动态sql的功能。</li></ul><h2 id="_35-mybatis是如何进行分页的-分页插件的原理是什么" tabindex="-1"><a class="header-anchor" href="#_35-mybatis是如何进行分页的-分页插件的原理是什么" aria-hidden="true">#</a> 35. Mybatis是如何进行分页的？分页插件的原理是什么？</h2><ul><li>Mybatis使用RowBounds对象进行分页，它是针对ResultSet结果集执行的内存分页，而非物理分<br> 页，可以在sql内直接书写带有物理分页的参数来完成物理分页功能，也可以使用分页插件来完成<br> 物理分页。</li><li>分页插件的基本原理是使用Mybatis提供的插件接口，实现自定义插件，在插件的拦截方法内拦截<br> 待执行的sql，然后重写sql，根据dialect方言，添加对应的物理分页语句和物理分页参数。</li><li>举例：select * from student，拦截sql后重写为：select t.* from (select * from student) t limit 0, 10</li></ul><h2 id="_36-简述mybatis的插件运行原理-以及如何编写一个插件。" tabindex="-1"><a class="header-anchor" href="#_36-简述mybatis的插件运行原理-以及如何编写一个插件。" aria-hidden="true">#</a> 36. 简述Mybatis的插件运行原理，以及如何编写一个插件。</h2><ul><li>Mybatis仅可以编写针对ParameterHandler、ResultSetHandler、StatementHandler、<br> Executor这4种接口的插件，Mybatis使用JDK的动态代理，为需要拦截的接口生成代理对象以实现<br> 接口方法拦截功能，每当执行这4种接口对象的方法时，就会进入拦截方法，具体就是<br> InvocationHandler的invoke()方法，当然，只会拦截那些你指定需要拦截的方法。</li><li>实现Mybatis的Interceptor接口并复写intercept()方法，然后在给插件编写注解，指定要拦截哪一<br> 个接口的哪些方法即可，记住，别忘了在配置文件中配置你编写的插件。</li></ul><h2 id="_37-mybatis的一级、二级缓存" tabindex="-1"><a class="header-anchor" href="#_37-mybatis的一级、二级缓存" aria-hidden="true">#</a> 37. Mybatis的一级、二级缓存</h2><ol><li>一级缓存: 基于 PerpetualCache 的 HashMap 本地缓存，其存储作用域为 Session，当 Session<br> flush 或 close 之后，该 Session 中的所有 Cache 就将清空，默认打开一级缓存。</li><li>二级缓存与一级缓存其机制相同，默认也是采用 PerpetualCache，HashMap 存储，不同在于其<br> 存储作用域为 Mapper(Namespace)，并且可自定义存储源，如 Ehcache。默认不打开二级缓<br> 存，要开启二级缓存，使用二级缓存属性类需要实现Serializable序列化接口(可用来保存对象的状<br> 态),可在它的映射文件中配置</li><li>对于缓存数据更新机制，当某一个作用域(一级缓存 Session/二级缓存Namespaces)的进行了<br> C/U/D 操作后，默认该作用域下所有 select 中的缓存将被 clear。</li></ol><hr><p><strong>史上最全Java面试宝典，BAT大厂面试必备。整理不易，建议先关注点赞加收藏</strong></p>`,140),u=a("thead",null,[a("tr",null,[a("th",null,"序号"),a("th",null,"名称"),a("th",null,"地址")])],-1),d=a("td",null,"1",-1),k=a("td",null,"Java基础面试题（91道含答案）",-1),m={href:"https://blog.csdn.net/qq_30999361/article/details/124482581",target:"_blank",rel:"noopener noreferrer"},b=a("td",null,"2",-1),h=a("td",null,"Java并发编程面试题 （123道含答案）",-1),g={href:"https://blog.csdn.net/qq_30999361/article/details/124545403",target:"_blank",rel:"noopener noreferrer"},_=a("td",null,"3",-1),v=a("td",null,"Java异常面试题 （33道含答案）",-1),q={href:"https://blog.csdn.net/qq_30999361/article/details/124560006",target:"_blank",rel:"noopener noreferrer"},y=a("td",null,"4",-1),M=a("td",null,"Java虚拟机（JVM）面试题（51道含答案）",-1),f={href:"https://blog.csdn.net/qq_30999361/article/details/124532763",target:"_blank",rel:"noopener noreferrer"},x=a("td",null,"5",-1),S=a("td",null,"Java集合面试题（52道含答案）",-1),B={href:"https://blog.csdn.net/qq_30999361/article/details/124503952",target:"_blank",rel:"noopener noreferrer"},L=a("td",null,"6",-1),E=a("td",null,"Linux面试题（50道含答案）",-1),Q={href:"https://blog.csdn.net/qq_30999361/article/details/124575798",target:"_blank",rel:"noopener noreferrer"},D=a("td",null,"7",-1),j=a("td",null,"Memcache面试题（23道含答案）",-1),w={href:"https://blog.csdn.net/qq_30999361/article/details/124596870",target:"_blank",rel:"noopener noreferrer"},T=a("td",null,"8",-1),J=a("td",null,"Mybatiss面试题 （37道含答案）",-1),C={href:"https://blog.csdn.net/qq_30999361/article/details/124560907",target:"_blank",rel:"noopener noreferrer"},O=a("td",null,"9",-1),A=a("td",null,"MySQL面试题（40道含答案）",-1),I={href:"https://blog.csdn.net/qq_30999361/article/details/124506169",target:"_blank",rel:"noopener noreferrer"},N=a("td",null,"10",-1),P=a("td",null,"Netty面试题（49道含答案）",-1),R={href:"https://blog.csdn.net/qq_30999361/article/details/124617122",target:"_blank",rel:"noopener noreferrer"},U=a("td",null,"11",-1),H=a("td",null,"Nginx面试题（23道含答案）",-1),X={href:"https://blog.csdn.net/qq_30999361/article/details/124597174",target:"_blank",rel:"noopener noreferrer"},F=a("td",null,"12",-1),V=a("td",null,"RabbitMQ面试题（22道含答案）",-1),z={href:"https://blog.csdn.net/qq_30999361/article/details/124533998",target:"_blank",rel:"noopener noreferrer"},K=a("td",null,"13",-1),$=a("td",null,"Redis面试题（70道含答案）",-1),G={href:"https://blog.csdn.net/qq_30999361/article/details/124459566",target:"_blank",rel:"noopener noreferrer"},Z=a("td",null,"14",-1),W=a("td",null,"SpringBoot面试题（44道含答案）",-1),Y={href:"https://blog.csdn.net/qq_30999361/article/details/124461725",target:"_blank",rel:"noopener noreferrer"},aa=a("td",null,"15",-1),sa=a("td",null,"SpringCloud面试题（49道含答案）",-1),na={href:"https://blog.csdn.net/qq_30999361/article/details/124430712",target:"_blank",rel:"noopener noreferrer"},ta=a("td",null,"16",-1),ea=a("td",null,"SpringMVC面试题（29道含答案）",-1),la={href:"https://blog.csdn.net/qq_30999361/article/details/124519135",target:"_blank",rel:"noopener noreferrer"},pa=a("td",null,"17",-1),oa=a("td",null,"Spring面试题（75道含答案）",-1),ia={href:"https://blog.csdn.net/qq_30999361/article/details/124519472",target:"_blank",rel:"noopener noreferrer"},ra=a("td",null,"18",-1),ca=a("td",null,"TCP、UDP、Socket、Http网络编程面试题（47道含答案）",-1),ua={href:"https://blog.csdn.net/qq_30999361/article/details/124617792",target:"_blank",rel:"noopener noreferrer"},da=a("td",null,"19",-1),ka=a("td",null,"Tomcat面试题（15道含答案）",-1),ma={href:"https://blog.csdn.net/qq_30999361/article/details/124576964",target:"_blank",rel:"noopener noreferrer"},ba=a("td",null,"20",-1),ha=a("td",null,"Zookeeper面试题（28道含答案）",-1),ga={href:"https://blog.csdn.net/qq_30999361/article/details/124596208",target:"_blank",rel:"noopener noreferrer"},_a=a("td",null,"21",-1),va=a("td",null,"多线程面试题（60道含答案）",-1),qa={href:"https://blog.csdn.net/qq_30999361/article/details/124596462",target:"_blank",rel:"noopener noreferrer"},ya=a("td",null,"22",-1),Ma=a("td",null,"设计模式面试题（14道含答案）",-1),fa={href:"https://blog.csdn.net/qq_30999361/article/details/124637874",target:"_blank",rel:"noopener noreferrer"},xa=a("td",null,"23",-1),Sa=a("td",null,"BIO、NIO、AIO、Netty面试题（35道含答案）",-1),Ba={href:"https://blog.csdn.net/qq_30999361/article/details/124653616",target:"_blank",rel:"noopener noreferrer"},La=a("td",null,"24",-1),Ea=a("td",null,"Dubbo面试题（47道含答案）",-1),Qa={href:"https://blog.csdn.net/qq_30999361/article/details/124637288",target:"_blank",rel:"noopener noreferrer"},Da=a("td",null,"25",-1),ja=a("td",null,"ElasticSearch面试题（31道含答案）",-1),wa={href:"https://blog.csdn.net/qq_30999361/article/details/124619240",target:"_blank",rel:"noopener noreferrer"},Ta=a("td",null,"26",-1),Ja=a("td",null,"Git常用命令（63条）",-1),Ca={href:"https://blog.csdn.net/qq_30999361/article/details/124438420",target:"_blank",rel:"noopener noreferrer"};function Oa(Aa,Ia){const s=l("ExternalLinkIcon");return p(),o("div",null,[c,a("table",null,[u,a("tbody",null,[a("tr",null,[d,k,a("td",null,[a("a",m,[n("（点击查看）"),t(s)])])]),a("tr",null,[b,h,a("td",null,[a("a",g,[n("（点击查看）"),t(s)])])]),a("tr",null,[_,v,a("td",null,[a("a",q,[n("（点击查看）"),t(s)])])]),a("tr",null,[y,M,a("td",null,[a("a",f,[n("（点击查看）"),t(s)])])]),a("tr",null,[x,S,a("td",null,[a("a",B,[n("（点击查看）"),t(s)])])]),a("tr",null,[L,E,a("td",null,[a("a",Q,[n("（点击查看）"),t(s)])])]),a("tr",null,[D,j,a("td",null,[a("a",w,[n("（点击查看）"),t(s)])])]),a("tr",null,[T,J,a("td",null,[a("a",C,[n("（点击查看）"),t(s)])])]),a("tr",null,[O,A,a("td",null,[a("a",I,[n("（点击查看）"),t(s)])])]),a("tr",null,[N,P,a("td",null,[a("a",R,[n("（点击查看）"),t(s)])])]),a("tr",null,[U,H,a("td",null,[a("a",X,[n("（点击查看）"),t(s)])])]),a("tr",null,[F,V,a("td",null,[a("a",z,[n("（点击查看）"),t(s)])])]),a("tr",null,[K,$,a("td",null,[a("a",G,[n("（点击查看）"),t(s)])])]),a("tr",null,[Z,W,a("td",null,[a("a",Y,[n("（点击查看）"),t(s)])])]),a("tr",null,[aa,sa,a("td",null,[a("a",na,[n("（点击查看）"),t(s)])])]),a("tr",null,[ta,ea,a("td",null,[a("a",la,[n("（点击查看）"),t(s)])])]),a("tr",null,[pa,oa,a("td",null,[a("a",ia,[n("（点击查看）"),t(s)])])]),a("tr",null,[ra,ca,a("td",null,[a("a",ua,[n("（点击查看）"),t(s)])])]),a("tr",null,[da,ka,a("td",null,[a("a",ma,[n("（点击查看）"),t(s)])])]),a("tr",null,[ba,ha,a("td",null,[a("a",ga,[n("（点击查看）"),t(s)])])]),a("tr",null,[_a,va,a("td",null,[a("a",qa,[n("（点击查看）"),t(s)])])]),a("tr",null,[ya,Ma,a("td",null,[a("a",fa,[n("（点击查看）"),t(s)])])]),a("tr",null,[xa,Sa,a("td",null,[a("a",Ba,[n("（点击查看）"),t(s)])])]),a("tr",null,[La,Ea,a("td",null,[a("a",Qa,[n("（点击查看）"),t(s)])])]),a("tr",null,[Da,ja,a("td",null,[a("a",wa,[n("（点击查看）"),t(s)])])]),a("tr",null,[Ta,Ja,a("td",null,[a("a",Ca,[n("（点击查看）"),t(s)])])])])])])}const Pa=e(r,[["render",Oa],["__file","Mybatiss面试题 （37道含答案）.html.vue"]]);export{Pa as default};
