import{_ as r,E as t,Z as s,$ as l,a0 as n,a3 as e,a1 as i,a4 as p}from"./framework-e0d053a9.js";const o={},c=p(`<h3 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h3><ul><li><a href="#1_Spring_1">1. Spring概述</a></li><li><ul><li><a href="#11_spring_2">1.1 什么是spring?</a></li><li><a href="#12_Spring_17">1.2 Spring的俩大核心概念</a></li><li><a href="#13_Spring_30">1.3 Spring框架的设计目标，设计理念，和核心是什么</a></li><li><a href="#14_Spring_40">1.4 Spring的优缺点是什么？</a></li><li><a href="#15_Spring_62">1.5 Spring有哪些应用场景</a></li><li><a href="#16_Spring_70">1.6 Spring由哪些模块组成？</a></li><li><a href="#17_Spring__85">1.7 Spring 框架中都用到了哪些设计模式？</a></li><li><a href="#18_spring_context__93">1.8 详细讲解一下核心容器（spring context应用上下文) 模块</a></li><li><a href="#19_Spring_101">1.9 Spring框架中有哪些不同类型的事件</a></li><li><a href="#110_Spring__115">1.10 Spring 应用程序有哪些不同组件？</a></li><li><a href="#111__Spring__123">1.11 使用 Spring 有哪些方式？</a></li></ul></li><li><a href="#2_SpringIOC_132">2. Spring控制反转(IOC)</a></li><li><ul><li><a href="#21_Spring_IOC__133">2.1 什么是Spring IOC 容器？</a></li><li><a href="#25_Spring__IOC_188">2.5 Spring 的 IOC支持哪些功能</a></li><li><a href="#26_BeanFactory__ApplicationContext_194">2.6 BeanFactory 和 ApplicationContext有什么区别？</a></li><li><a href="#27_Spring_BeanFactoryApplicationContext_228">2.7 Spring 如何设计容器的，BeanFactory和ApplicationContext的关系详解</a></li><li><a href="#28_ApplicationContext_266">2.8 ApplicationContext通常的实现是什么？</a></li><li><a href="#29_Spring_274">2.9 什么是Spring的依赖注入？</a></li><li><a href="#210__281">2.10 依赖注入的基本原则</a></li><li><a href="#211__287">2.11 依赖注入有什么优势</a></li><li><a href="#212__295">2.12 有哪些不同类型的依赖注入实现方式？</a></li><li><a href="#213__Setter_304">2.13 构造器依赖注入和 Setter方法注入的区别</a></li></ul></li><li><a href="#3_Spring_Beans_317">3. Spring Beans</a></li><li><ul><li><a href="#31_Spring_beans_318">3.1 什么是Spring beans？</a></li><li><a href="#32__Spring_Bean___322">3.2 一个 Spring Bean 定义 包含什么？</a></li><li><a href="#33_Spring_Spring_326">3.3 如何给Spring 容器提供配置元数据？Spring有几种配置方式</a></li><li><a href="#34_Spring_332">3.4 Spring配置文件包含了哪些信息</a></li><li><a href="#35_Springxmlbean_335">3.5 Spring基于xml注入bean的几种方式</a></li><li><a href="#36__343">3.6 你怎样定义类的作用域？</a></li><li><a href="#37_Springbean_349">3.7 解释Spring支持的几种bean的作用域</a></li><li><a href="#38_Springbean_363">3.8 Spring框架中的单例bean是线程安全的吗？</a></li><li><a href="#39_Spring_373">3.9 Spring如何处理线程并发问题？</a></li><li><a href="#310Springbean_384">3.10解释Spring框架中bean的生命周期</a></li><li><a href="#311_bean__415">3.11 哪些是重要的bean生命周期方法？ 你能重载它们吗？</a></li><li><a href="#312_SpringbeanSpring_inner_beans_421">3.12 什么是Spring的内部bean？什么是Spring inner beans？</a></li><li><a href="#313_bean_426">3.13 什么是bean装配？</a></li><li><a href="#314_bean_430">3.14 什么是bean的自动装配？</a></li><li><a href="#315_spring__bean__436">3.15 解释不同方式的自动装配，spring 自动装配 bean 有哪些方式？</a></li><li><a href="#316_Autowired_448">3.16 使用@Autowired注解自动装配的过程是怎样的？</a></li><li><a href="#317__458">3.17 自动装配有哪些局限性？</a></li><li><a href="#318_Springnull__464">3.18 你可以在Spring中注入一个null 和一个空字符串吗？</a></li></ul></li><li><a href="#4Spring_469">4.Spring注解</a></li><li><ul><li><a href="#41_JavaSpring__470">4.1 什么是基于Java的Spring注解配置? 给一些注解的例子</a></li><li><a href="#42__486">4.2 怎样开启注解装配？</a></li><li><a href="#43_Component_Controller_Repository_Service__490">4.3 @Component, @Controller, @Repository, @Service 有何区别？</a></li><li><a href="#44_Required__501">4.4 @Required 注解有什么作用</a></li><li><a href="#45_Autowired__518">4.5 @Autowired 注解有什么作用</a></li><li><a href="#46_AutowiredResource_536">4.6 @Autowired和@Resource之间的区别</a></li><li><a href="#47_Qualifier__544">4.7 @Qualifier 注解有什么作用</a></li><li><a href="#48_RequestMapping__548">4.8 @RequestMapping 注解有什么用？</a></li></ul></li><li><a href="#5Spring_556">5.Spring数据访问</a></li><li><ul><li><a href="#51__557">5.1 解释对象/关系映射集成模块</a></li><li><a href="#52_SpringJDBC_562">5.2 在Spring框架中如何更有效地使用JDBC？</a></li><li><a href="#53_JDBCDAO_567">5.3 解释JDBC抽象和DAO模块</a></li><li><a href="#54_spring_DAO__572">5.4 spring DAO 有什么用？</a></li><li><a href="#55_spring_JDBC_API__577">5.5 spring JDBC API 中存在哪些类？</a></li><li><a href="#56_JdbcTemplate_584">5.6 JdbcTemplate是什么</a></li><li><a href="#57_SpringHibernate_Spring_Hibernate__588">5.7 使用Spring通过什么方式访问Hibernate？使用 Spring 访问Hibernate 的方法有哪些？</a></li><li><a href="#58_HibernateDaoSupportSpringHibernate_593">5.8 如何通过HibernateDaoSupport将Spring和Hibernate结合起来？</a></li><li><a href="#59_Spring_spring__599">5.9 Spring支持的事务管理类型， spring 事务实现方式有哪些？</a></li><li><a href="#510_Spring_604">5.10 Spring事务的实现方式和实现原理</a></li><li><a href="#511_Spring_608">5.11 说一下Spring的事务传播行为</a></li><li><a href="#512__spring__619">5.12 说一下 spring 的事务隔离？</a></li><li><a href="#513_Spring_640">5.13 Spring框架的事务管理有哪些优点？</a></li><li><a href="#514__646">5.14 你更倾向用那种事务管理类型？</a></li></ul></li><li><a href="#6SpringAOP_654">6.Spring面向切面编程(AOP)</a></li><li><ul><li><a href="#61_AOP_655">6.1 什么是AOP</a></li><li><a href="#62_Spring_AOP_and_AspectJ_AOP_AOP__663">6.2 Spring AOP and AspectJ AOP 有什么区别？AOP 有哪些实现方式？</a></li><li><a href="#64_Spring_AOP_691">6.4 解释一下Spring AOP里面的几个名词</a></li><li><a href="#65_Spring_714">6.5 Spring在运行时通知对象</a></li><li><a href="#66_Spring_722">6.6 Spring只支持方法级别的连接点</a></li><li><a href="#67_Spring_AOP__springaop__concern__crosscutting_concern__726">6.7 在Spring AOP 中，关注点和横切关注的区别是什么？在 springaop 中 concern 和 cross-cutting concern 的不同之处</a></li><li><a href="#68_Spring_733">6.8 Spring通知有哪些类型？</a></li><li><a href="#69__Aspect_742">6.9 什么是切面 Aspect？</a></li><li><a href="#610_XML_Schema_752">6.10 解释基于XML Schema方式的切面实现</a></li><li><a href="#611_754">6.11解释基于注解的切面实现</a></li></ul></li></ul><h2 id="_1-spring概述" tabindex="-1"><a class="header-anchor" href="#_1-spring概述" aria-hidden="true">#</a> 1. Spring概述</h2><h2 id="_1-1-什么是spring" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是spring" aria-hidden="true">#</a> 1.1 什么是spring?</h2><ul><li>Spring是一个轻量级Java开发框架，最早有Rod Johnson创建，目的是为了解决企业级应用开发<br> 的业务逻辑层和其他各层的耦合问题。它是一个分层的JavaSE/JavaEE full-stack（一站式）轻量级<br> 开源框架，为开发Java应用程序提供全面的基础架构支持。Spring负责基础架构，因此Java开发者<br> 可以专注于应用程序的开发。</li><li>Spring最根本的使命是解决企业级应用开发的复杂性，即简化Java开发。</li><li>Spring可以做很多事情，它为企业级开发提供给了丰富的功能，但是这些功能的底层都依赖于它的<br> 两个核心特性，也就是依赖注入（dependency injection，DI）和面向切面编程（aspectoriented programming，AOP）。<br> 为了降低Java开发的复杂性，Spring采取了以下4种关键策略**</li><li>基于POJO的轻量级和最小侵入性编程；</li><li>通过依赖注入和面向接口实现松耦合；</li><li>基于切面和惯例进行声明式编程；</li><li>通过切面和模板减少样板式代码。</li></ul><h2 id="_1-2-spring的俩大核心概念" tabindex="-1"><a class="header-anchor" href="#_1-2-spring的俩大核心概念" aria-hidden="true">#</a> 1.2 Spring的俩大核心概念</h2><ul><li>IOC（控制翻转）：<br> 控制翻转，也叫依赖注入，他就是不会直接创建对象，只是把对象声明出来，在代码 中不直<br> 接与对象和服务进行连接，但是在配置文件中描述了哪一项组件需要哪一项服 务，容器将他<br> 们组件起来。在一般的IOC场景中容器创建了所有的对象，并设置了必 要的属性将他们联系<br> 在一起，等到需要使用的时候才把他们声明出来，使用注解就跟 方便了，容器会自动根据注<br> 解把对象组合起来</li><li>AOP（面对切面编程）<br> 面对切面编程，这是一种编程模式，他允许程序员通过自定义的横切点进行模块 化，将那些<br> 影响多个类的行为封装到课重用的模块中。 例子：比如日志输出，不使用AOP的话就需要把<br> 日志的输出语句放在所有类中，方法 中，但是有了AOP就可以把日志输出语句封装一个可重<br> 用模块，在以声明的方式将他 们放在类中，每次使用类就自动完成了日志输出。</li></ul><h2 id="_1-3-spring框架的设计目标-设计理念-和核心是什么" tabindex="-1"><a class="header-anchor" href="#_1-3-spring框架的设计目标-设计理念-和核心是什么" aria-hidden="true">#</a> 1.3 Spring框架的设计目标，设计理念，和核心是什么</h2><ul><li>Spring设计目标：Spring为开发者提供一个一站式轻量级应用开发平台；</li><li>Spring设计理念：在JavaEE开发中，支持POJO和JavaBean开发方式，使应用面向接口开发，充分<br> 支持OOP（面向对象）设计方法；Spring通过IOC容器实现对象耦合关系的管理，并实现依赖反<br> 转，将对象之间的依赖关系交给IOC容器，实现解耦；</li><li>Spring框架的核心：IOC容器和AOP模块。通过IOC容器管理POJO对象以及他们之间的耦合关系；<br> 通过AOP以动态非侵入的方式增强服务。</li><li>IOC让相互协作的组件保持松散的耦合，而AOP编程允许你把遍布于应用各层的功能分离出来形成<br> 可重用的功能组件。</li></ul><h2 id="_1-4-spring的优缺点是什么" tabindex="-1"><a class="header-anchor" href="#_1-4-spring的优缺点是什么" aria-hidden="true">#</a> 1.4 Spring的优缺点是什么？</h2><p>优点</p><ul><li>方便解耦，简化开发<br> Spring就是一个大工厂，可以将所有对象的创建和依赖关系的维护，交给Spring管理。</li><li>AOP编程的支持<br> Spring提供面向切面编程，可以方便的实现对程序进行权限拦截、运行监控等功能。</li><li>声明式事务的支持<br> 只需要通过配置就可以完成对事务的管理，而无需手动编程。</li><li>方便程序的测试<br> Spring对Junit4支持，可以通过注解方便的测试Spring程序。</li><li>方便集成各种优秀框架<br> Spring不排斥各种优秀的开源框架，其内部提供了对各种优秀框架的直接支持（如：Struts、<br> Hibernate、MyBatis等）。</li><li>降低JavaEE API的使用难度<br> Spring对JavaEE开发中非常难用的一些API（JDBC、JavaMail、远程调用等），都提供了封装，使<br> 这些API应用难度大大降低。</li></ul><p>缺点</p><ul><li>Spring明明一个很轻量级的框架，却给人感觉大而全</li><li>Spring依赖反射，反射影响性能</li><li>使用门槛升高，入门Spring需要较长时间</li></ul><h2 id="_1-5-spring有哪些应用场景" tabindex="-1"><a class="header-anchor" href="#_1-5-spring有哪些应用场景" aria-hidden="true">#</a> 1.5 Spring有哪些应用场景</h2><ul><li>应用场景：JavaEE企业应用开发，包括SSH、SSM等</li></ul><p>Spring价值：</p><ul><li>Spring是非侵入式的框架，目标是使应用程序代码对框架依赖最小化；</li><li>Spring提供一个一致的编程模型，使应用直接使用POJO开发，与运行环境隔离开来；</li><li>Spring推动应用设计风格向面向对象和面向接口开发转变，提高了代码的重用性和可测试性；</li></ul><h2 id="_1-6-spring由哪些模块组成" tabindex="-1"><a class="header-anchor" href="#_1-6-spring由哪些模块组成" aria-hidden="true">#</a> 1.6 Spring由哪些模块组成？</h2><p>Spring 总共大约有 20 个模块， 由 1300 多个不同的文件构成。 而这些组件被分别整合在 核心容<br> 器（Core Container） 、 AOP（Aspect Oriented Programming）和设备支持<br> （Instrmentation） 、 数据访问与集成（Data Access/Integeration） 、 Web 、 消息<br> （Messaging） 、 Test 等 6 个模块中。 以下是 Spring 5 的模块结构图：<br><img src="https://img-blog.csdnimg.cn/aebeb40b1a5e4044ae07060c2e40a448.png" alt="在这里插入图片描述" loading="lazy"></p><ul><li>spring core：提供了框架的基本组成部分，包括控制反转（Inversion of Control，IOC）和依赖<br> 注入（Dependency Injection，DI）功能。</li><li>spring beans：提供了BeanFactory，是工厂模式的一个经典实现，Spring将管理对象称为Bean。</li><li>spring context：构建于 core 封装包基础上的 context 封装包，提供了一种框架式的对象访问方法。</li><li>spring jdbc：提供了一个JDBC的抽象层，消除了烦琐的JDBC编码和数据库厂商特有的错误代码解析， 用于简化JDBC。</li><li>spring aop：提供了面向切面的编程实现，让你可以自定义拦截器、切点等。</li><li>spring Web：提供了针对 Web 开发的集成特性，例如文件上传，利用 servlet listeners 进行 ioc容器初始化和针对 Web 的 ApplicationContext。</li><li>spring test：主要为测试提供支持的，支持使用JUnit或TestNG对Spring组件进行单元测试和集成测试。</li></ul><h2 id="_1-7-spring-框架中都用到了哪些设计模式" tabindex="-1"><a class="header-anchor" href="#_1-7-spring-框架中都用到了哪些设计模式" aria-hidden="true">#</a> 1.7 Spring 框架中都用到了哪些设计模式？</h2><ol><li>工厂模式：BeanFactory就是简单工厂模式的体现，用来创建对象的实例；</li><li>单例模式：Bean默认为单例模式。</li><li>代理模式：Spring的AOP功能用到了JDK的动态代理和CGLIB字节码生成技术；</li><li>模板方法：用来解决代码重复的问题。比如. RestTemplate, JmsTemplate, JpaTemplate。</li><li>观察者模式：定义对象键一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的<br> 对象都会得到通知被制动更新，如Spring中listener的实现–ApplicationListener。</li></ol><h2 id="_1-8-详细讲解一下核心容器-spring-context应用上下文-模块" tabindex="-1"><a class="header-anchor" href="#_1-8-详细讲解一下核心容器-spring-context应用上下文-模块" aria-hidden="true">#</a> 1.8 详细讲解一下核心容器（spring context应用上下文) 模块</h2><p>这是基本的Spring模块，提供spring 框架的基础功能，BeanFactory 是 任何以spring为基础的应<br> 用的核心。Spring 框架建立在此模块之上，它使Spring成为一个容器。<br> Bean 工厂是工厂模式的一个实现，提供了控制反转功能，用来把应用的配置和依赖从真正的应用<br> 代码中分离。最常用的就是org.springframework.beans.factory.xml.XmlBeanFactory ，它根据<br> XML文件中的定义加载beans。该容器从XML 文件读取配置元数据并用它去创建一个完全配置的<br> 系统或应用。</p><h2 id="_1-9-spring框架中有哪些不同类型的事件" tabindex="-1"><a class="header-anchor" href="#_1-9-spring框架中有哪些不同类型的事件" aria-hidden="true">#</a> 1.9 Spring框架中有哪些不同类型的事件</h2><p>Spring 提供了以下5种标准的事件：</p><ol><li>上下文更新事件（ContextRefreshedEvent）：在调用ConfigurableApplicationContext 接<br> 口中的refresh()方法时被触发。</li><li>上下文开始事件（ContextStartedEvent）：当容器调用ConfigurableApplicationContext的<br> Start()方法开始/重新开始容器时触发该事件。</li><li>上下文停止事件（ContextStoppedEvent）：当容器调用ConfigurableApplicationContext<br> 的Stop()方法停止容器时触发该事件。</li><li>上下文关闭事件（ContextClosedEvent）：当ApplicationContext被关闭时触发该事件。容<br> 器被关闭时，其管理的所有单例Bean都被销毁。</li><li>请求处理事件（RequestHandledEvent）：在Web应用中，当一个http请求（request）结<br> 束触发该事件。如果一个bean实现了ApplicationListener接口，当一个ApplicationEvent 被<br> 发布以后，bean会自动被通知。</li></ol><h2 id="_1-10-spring-应用程序有哪些不同组件" tabindex="-1"><a class="header-anchor" href="#_1-10-spring-应用程序有哪些不同组件" aria-hidden="true">#</a> 1.10 Spring 应用程序有哪些不同组件？</h2><p>Spring 应用一般有以下组件：</p><ul><li>接口 - 定义功能。</li><li>Bean 类 - 它包含属性，setter 和 getter 方法，函数等。</li><li>Bean 配置文件 - 包含类的信息以及如何配置它们。</li><li>Spring 面向切面编程（AOP） - 提供面向切面编程的功能。</li><li>用户程序 - 它使用接口。</li></ul><h2 id="_1-11-使用-spring-有哪些方式" tabindex="-1"><a class="header-anchor" href="#_1-11-使用-spring-有哪些方式" aria-hidden="true">#</a> 1.11 使用 Spring 有哪些方式？</h2><p>使用 Spring 有以下方式：</p><ul><li>作为一个成熟的 Spring Web 应用程序。</li><li>作为第三方 Web 框架，使用 Spring Frameworks 中间层。</li><li>作为企业级 Java Bean，它可以包装现有的 POJO（Plain Old Java Objects）。</li><li>用于远程使用。</li></ul><hr><h2 id="_2-spring控制反转-ioc" tabindex="-1"><a class="header-anchor" href="#_2-spring控制反转-ioc" aria-hidden="true">#</a> 2. Spring控制反转(IOC)</h2><h2 id="_2-1-什么是spring-ioc-容器" tabindex="-1"><a class="header-anchor" href="#_2-1-什么是spring-ioc-容器" aria-hidden="true">#</a> 2.1 什么是Spring IOC 容器？</h2><p>控制反转即IOC (Inversion of Control)，它把传统上由程序代码直接操控的对象的调用权交给容<br> 器，通过容器来实现对象组件的装配和管理。所谓的“控制反转”概念就是对组件对象控制权的转<br> 移，从程序代码本身转移到了外部容器。<br> Spring IOC 负责创建对象，管理对象（通过依赖注入（DI），装配对象，配置对象，并且管理这<br> 些对象的整个生命周期。<br> 2.2 控制反转(IOC)有什么作用<br> 管理对象的创建和依赖关系的维护。对象的创建并不是一件简单的事，在对象关系比较复杂时，如<br> 果依赖关系需要程序猿来维护的话，那是相当头疼的<br> 解耦，由容器去维护具体的对象<br> 托管了类的产生过程，比如我们需要在类的产生过程中做一些处理，最直接的例子就是代理，如果<br> 有容器程序可以把这部分处理交给容器，应用程序则无需去关心类是如何完成代理的<br> 2.3 IOC的优点是什么？<br> IOC 或 依赖注入把应用的代码量降到最低。<br> 它使应用容易测试，单元测试不再需要单例和JNDI查找机制。<br> 最小的代价和最小的侵入性使松散耦合得以实现。<br> IOC容器支持加载服务时的饿汉式初始化和懒加载。<br> 2.4 Spring IOC 的实现机制</p><ul><li>Spring 中的 IOC 的实现原理就是工厂模式加反射机制。</li><li>示例：</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">Fruit</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Apple</span> <span class="token keyword">implements</span> <span class="token class-name">Fruit</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Orange</span> <span class="token keyword">implements</span> <span class="token class-name">Fruit</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Orange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Factory</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Fruit</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token class-name">ClassName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">Fruit</span> f<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>
			f<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">Fruit</span><span class="token punctuation">)</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token class-name">ClassName</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> f<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">Fruit</span> f<span class="token operator">=</span><span class="token class-name">Factory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;io.github.dunwu.spring.Apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			f<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-5-spring-的-ioc支持哪些功能" tabindex="-1"><a class="header-anchor" href="#_2-5-spring-的-ioc支持哪些功能" aria-hidden="true">#</a> 2.5 Spring 的 IOC支持哪些功能</h2><ul><li>Spring 的 IOC 设计支持以下功能：</li><li>其中，最重要的就是依赖注入，从 XML 的配置上说，即 ref 标签。对应 Spring<br> RuntimeBeanReference 对象。</li><li>对于 IOC 来说，最重要的就是容器。容器管理着 Bean 的生命周期，控制着 Bean 的依赖注入。</li></ul><h2 id="_2-6-beanfactory-和-applicationcontext有什么区别" tabindex="-1"><a class="header-anchor" href="#_2-6-beanfactory-和-applicationcontext有什么区别" aria-hidden="true">#</a> 2.6 BeanFactory 和 ApplicationContext有什么区别？</h2><ul><li>BeanFactory和ApplicationContext是Spring的两大核心接口，都可以当做Spring的容器。其中<br> ApplicationContext是BeanFactory的子接口。</li><li>依赖关系 <ul><li>BeanFactory：是Spring里面最底层的接口，包含了各种Bean的定义，读取bean配置文档，<br> 管理bean的加载、实例化，控制bean的生命周期，维护bean之间的依赖关系。</li></ul></li><li>ApplicationContext接口作为BeanFactory的派生，除了提供BeanFactory所具有的功能外，还提<br> 供了更完整的框架功能： <ul><li>继承MessageSource，因此支持国际化。</li><li>统一的资源文件访问方式。</li><li>提供在监听器中注册bean的事件。</li><li>同时加载多个配置文件。</li><li>载入多个（有继承关系）上下文 ，使得每一个上下文都专注于一个特定的层次，比如应用的<br> web层。</li></ul></li><li>加载方式 <ul><li>BeanFactroy采用的是延迟加载形式来注入Bean的，即只有在使用到某个Bean时(调用<br> getBean())，才对该Bean进行加载实例化。这样，我们就不能发现一些存在的Spring的配置<br> 问题。如果Bean的某一个属性没有注入，BeanFacotry加载后，直至第一次使用调用<br> getBean方法才会抛出异常。</li><li>ApplicationContext，它是在容器启动时，一次性创建了所有的Bean。这样，在容器启动<br> 时，我们就可以发现Spring中存在的配置错误，这样有利于检查所依赖属性是否注入。<br> ApplicationContext启动后预载入所有的单实例Bean，通过预载入单实例bean ,确保当你需<br> 要的时候，你就不用等待，因为它们已经创建好了。</li></ul></li></ul><p>相对于基本的BeanFactory，ApplicationContext 唯一的不足是占用内存空间。当应用程序配置Bean较多<br> 时，程序启动较慢。</p><ul><li>创建方式 <ul><li>BeanFactory通常以编程的方式被创建，ApplicationContext还能以声明的方式创建，如使用<br> ContextLoader。</li></ul></li><li>注册方式</li><li>BeanFactory和ApplicationContext都支持BeanPostProcessor、<br> BeanFactoryPostProcessor的使用，但两者之间的区别是：BeanFactory需要手动注册，而<br> ApplicationContext则是自动注册。</li></ul><h2 id="_2-7-spring-如何设计容器的-beanfactory和applicationcontext的关系详解" tabindex="-1"><a class="header-anchor" href="#_2-7-spring-如何设计容器的-beanfactory和applicationcontext的关系详解" aria-hidden="true">#</a> 2.7 Spring 如何设计容器的，BeanFactory和ApplicationContext的关系详解</h2><ul><li>Spring 作者 Rod Johnson 设计了两个接口用以表示容器。 <ul><li>BeanFactory <ul><li>ApplicationContext</li></ul></li></ul></li><li>BeanFactory 简单粗暴，可以理解为就是个 HashMap，Key 是 BeanName，Value 是 Bean 实<br> 例。通常只提供注册（put），获取（get）这两个功能。我们可以称之为 “低级容器”。</li><li>ApplicationContext 可以称之为 “高级容器”。因为他比 BeanFactory 多了更多的功能。他继承了<br> 多个接口。因此具备了更多的功能。例如资源的获取，支持多种消息（例如 JSP tag 的支持），对<br> BeanFactory 多了工具级别的支持等待。所以你看他的名字，已经不是 BeanFactory 之类的工厂<br> 了，而是 “应用上下文”， 代表着整个大容器的所有功能。该接口定义了一个 refresh 方法，此方<br> 法是所有阅读 Spring 源码的人的最熟悉的方法，用于刷新整个容器，即重新加载/刷新所有的<br> bean。</li><li>当然，除了这两个大接口，还有其他的辅助接口，这里就不介绍他们了。</li><li>BeanFactory和ApplicationContext的关系</li><li>为了更直观的展示 “低级容器” 和 “高级容器” 的关系，这里通过常用的<br> ClassPathXmlApplicationContext 类来展示整个容器的层级 UML 关系。<br><img src="https://img-blog.csdnimg.cn/0cc7e37661b7465e98e9c6e43604f0a8.png" alt="在这里插入图片描述" loading="lazy"></li><li>有点复杂？ 先不要慌，我来解释一下。</li><li>最上面的是 BeanFactory，下面的 3 个绿色的，都是功能扩展接口，这里就不展开讲。</li><li>看下面的隶属 ApplicationContext 粉红色的 “高级容器”，依赖着 “低级容器”，这里说的是依赖，<br> 不是继承哦。他依赖着 “低级容器” 的 getBean 功能。而高级容器有更多的功能：支持不同的信息<br> 源头，可以访问文件资源，支持应用事件（Observer 模式）。</li><li>通常用户看到的就是 “高级容器”。 但 BeanFactory 也非常够用啦！</li><li>左边灰色区域的是 “低级容器”， 只负载加载 Bean，获取 Bean。容器其他的高级功能是没有的。<br> 例如上图画的 refresh 刷新 Bean 工厂所有配置，生命周期事件回调等。</li></ul><p><strong>小结</strong></p><ul><li>说了这么多，不知道你有没有理解Spring IOC？ 这里小结一下：IOC 在 Spring 里，只需要低级容<br> 器就可以实现，2 个步骤：</li></ul><ol><li>加载配置文件，解析成 BeanDefinition 放在 Map 里。</li><li>调用 getBean 的时候，从 BeanDefinition 所属的 Map 里，拿出 Class 对象进行实例化，同时，<br> 如果有依赖关系，将递归调用 getBean 方法 —— 完成依赖注入。</li></ol><ul><li>上面就是 Spring 低级容器（BeanFactory）的 IOC。</li><li>至于高级容器 ApplicationContext，他包含了低级容器的功能，当他执行 refresh 模板方法的时<br> 候，将刷新整个容器的 Bean。同时其作为高级容器，包含了太多的功能。一句话，他不仅仅是<br> IOC。他支持不同信息源头，支持 BeanFactory 工具类，支持层级容器，支持访问文件资源，支<br> 持事件发布通知，支持接口回调等等。</li></ul><h2 id="_2-8-applicationcontext通常的实现是什么" tabindex="-1"><a class="header-anchor" href="#_2-8-applicationcontext通常的实现是什么" aria-hidden="true">#</a> 2.8 ApplicationContext通常的实现是什么？</h2><ul><li>FileSystemXmlApplicationContext ：此容器从一个XML文件中加载beans的定义，XML Bean<br> 配置文件的全路径名必须提供给它的构造函数。</li><li>ClassPathXmlApplicationContext：此容器也从一个XML文件中加载beans的定义，这里，你<br> 需要正确设置classpath因为这个容器将在classpath里找bean配置。</li><li>WebXmlApplicationContext：此容器加载一个XML文件，此文件定义了一个WEB应用的所有<br> bean。</li></ul><h2 id="_2-9-什么是spring的依赖注入" tabindex="-1"><a class="header-anchor" href="#_2-9-什么是spring的依赖注入" aria-hidden="true">#</a> 2.9 什么是Spring的依赖注入？</h2><ul><li>控制反转IOC是一个很大的概念，可以用不同的方式来实现。其主要实现方式有两种：依赖注入和<br> 依赖查找依赖注入：相对于IOC而言，依赖注入(DI)更加准确地描述了IOC的设计理念。所谓依赖注<br> 入（Dependency Injection），即组件之间的依赖关系由容器在应用系统运行期来决定，也就是<br> 由容器动态地将某种依赖关系的目标对象实例注入到应用系统中的各个关联的组件之中。组件不做<br> 定位查询，只提供普通的Java方法让容器去决定依赖关系。</li></ul><h2 id="_2-10-依赖注入的基本原则" tabindex="-1"><a class="header-anchor" href="#_2-10-依赖注入的基本原则" aria-hidden="true">#</a> 2.10 依赖注入的基本原则</h2><ul><li>依赖注入的基本原则是：应用组件不应该负责查找资源或者其他依赖的协作对象。配置对象的工作<br> 应该由IOC容器负责，“查找资源”的逻辑应该从应用组件的代码中抽取出来，交给IOC容器负责。<br> 容器全权负责组件的装配，它会把符合依赖关系的对象通过属性（JavaBean中的setter）或者是构<br> 造器传递给需要的对象。</li></ul><h2 id="_2-11-依赖注入有什么优势" tabindex="-1"><a class="header-anchor" href="#_2-11-依赖注入有什么优势" aria-hidden="true">#</a> 2.11 依赖注入有什么优势</h2><ul><li>依赖注入之所以更流行是因为它是一种更可取的方式：让容器全权负责依赖查询，受管组件只需要<br> 暴露JavaBean的setter方法或者带参数的构造器或者接口，使容器可以在初始化时组装对象的依赖<br> 关系。其与依赖查找方式相比，主要优势为： <ul><li>查找定位操作与应用代码完全无关。</li><li>不依赖于容器的API，可以很容易地在任何容器以外使用应用对象。</li><li>不需要特殊的接口，绝大多数对象可以做到完全不必依赖容器。</li></ul></li></ul><h2 id="_2-12-有哪些不同类型的依赖注入实现方式" tabindex="-1"><a class="header-anchor" href="#_2-12-有哪些不同类型的依赖注入实现方式" aria-hidden="true">#</a> 2.12 有哪些不同类型的依赖注入实现方式？</h2><ul><li>依赖注入是时下最流行的IOC实现方式，依赖注入分为接口注入（Interface Injection），Setter方<br> 法注入（Setter Injection）和构造器注入（Constructor Injection）三种方式。其中接口注入由于<br> 在灵活性和易用性比较差，现在从Spring4开始已被废弃。</li><li>构造器依赖注入：构造器依赖注入通过容器触发一个类的构造器来实现的，该类有一系列参数，每<br> 个参数代表一个对其他类的依赖。</li><li>Setter方法注入：Setter方法注入是容器通过调用无参构造器或无参static工厂 方法实例化bean之<br> 后，调用该bean的setter方法，即实现了基于setter的依赖注入。</li></ul><h2 id="_2-13-构造器依赖注入和-setter方法注入的区别" tabindex="-1"><a class="header-anchor" href="#_2-13-构造器依赖注入和-setter方法注入的区别" aria-hidden="true">#</a> 2.13 构造器依赖注入和 Setter方法注入的区别</h2><table><thead><tr><th>构造函数注入</th><th>setter 注入</th></tr></thead><tbody><tr><td>没有部分注入</td><td>有部分注入</td></tr><tr><td>不会覆盖 setter 属性</td><td>会覆盖 setter 属性</td></tr><tr><td>任意修改都会创建一个新实例</td><td>任意修改不会创建一个新实例</td></tr><tr><td>适用于设置很多属性</td><td>适用于设置少量属性</td></tr></tbody></table><ul><li>两种依赖方式都可以使用，构造器注入和Setter方法注入。最好的解决方案是用构造器参数实现强<br> 制依赖，setter方法实现可选依赖。</li></ul><hr><h2 id="_3-spring-beans" tabindex="-1"><a class="header-anchor" href="#_3-spring-beans" aria-hidden="true">#</a> 3. Spring Beans</h2><h2 id="_3-1-什么是spring-beans" tabindex="-1"><a class="header-anchor" href="#_3-1-什么是spring-beans" aria-hidden="true">#</a> 3.1 什么是Spring beans？</h2><ul><li>Spring beans 是那些形成Spring应用的主干的java对象。它们被Spring IOC容器初始化，装配，<br> 和管理。这些beans通过容器中配置的元数据创建。比如，以XML文件中 的形式定义。</li></ul><h2 id="_3-2-一个-spring-bean-定义-包含什么" tabindex="-1"><a class="header-anchor" href="#_3-2-一个-spring-bean-定义-包含什么" aria-hidden="true">#</a> 3.2 一个 Spring Bean 定义 包含什么？</h2><ul><li>一个Spring Bean 的定义包含容器必知的所有配置元数据，包括如何创建一个bean，它的生命周<br> 期详情及它的依赖。</li></ul><h2 id="_3-3-如何给spring-容器提供配置元数据-spring有几种配置方式" tabindex="-1"><a class="header-anchor" href="#_3-3-如何给spring-容器提供配置元数据-spring有几种配置方式" aria-hidden="true">#</a> 3.3 如何给Spring 容器提供配置元数据？Spring有几种配置方式</h2><ul><li>这里有三种重要的方法给Spring 容器提供配置元数据。 <ul><li>XML配置文件。</li><li>基于注解的配置。</li><li>基于java的配置。</li></ul></li></ul><h2 id="_3-4-spring配置文件包含了哪些信息" tabindex="-1"><a class="header-anchor" href="#_3-4-spring配置文件包含了哪些信息" aria-hidden="true">#</a> 3.4 Spring配置文件包含了哪些信息</h2><ul><li>Spring配置文件是个XML 文件，这个文件包含了类信息，描述了如何配置它们，以及如何相互调用。</li></ul><h2 id="_3-5-spring基于xml注入bean的几种方式" tabindex="-1"><a class="header-anchor" href="#_3-5-spring基于xml注入bean的几种方式" aria-hidden="true">#</a> 3.5 Spring基于xml注入bean的几种方式</h2><ol><li>Set方法注入；</li><li>构造器注入：</li><li>通过index设置参数的位置；</li><li>通过type设置参数类型；</li><li>静态工厂注入；</li><li>实例工厂；</li></ol><h2 id="_3-6-你怎样定义类的作用域" tabindex="-1"><a class="header-anchor" href="#_3-6-你怎样定义类的作用域" aria-hidden="true">#</a> 3.6 你怎样定义类的作用域？</h2><ul><li>当定义一个 在Spring里，我们还能给这个bean声明一个作用域。它可以通过bean 定义中的scope<br> 属性来定义。如，当Spring要在需要的时候每次生产一个新的bean实例，bean的scope属性被指<br> 定为prototype。另一方面，一个bean每次使用的时候必须返回同一个实例，这个bean的scope<br> 属性 必须设为 singleton。</li></ul><h2 id="_3-7-解释spring支持的几种bean的作用域" tabindex="-1"><a class="header-anchor" href="#_3-7-解释spring支持的几种bean的作用域" aria-hidden="true">#</a> 3.7 解释Spring支持的几种bean的作用域</h2><p>Spring框架支持以下五种bean的作用域：</p><ul><li>singleton : bean在每个Spring ioc 容器中只有一个实例。</li><li>prototype：一个bean的定义可以有多个实例。</li><li>request：每次http请求都会创建一个bean，该作用域仅在基于web的Spring<br> ApplicationContext情形下有效。</li><li>session：在一个HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的<br> Spring ApplicationContext情形下有效。</li><li>global-session：在一个全局的HTTP Session中，一个bean定义对应一个实例。该作用域仅在基<br> 于web的Spring ApplicationContext情形下有效。</li></ul><p><strong>注意</strong>： 缺省的Spring bean 的作用域是Singleton。使用 prototype 作用域需要慎重的思考，因为频繁<br> 创建和销毁 bean 会带来很大的性能开销。</p><h2 id="_3-8-spring框架中的单例bean是线程安全的吗" tabindex="-1"><a class="header-anchor" href="#_3-8-spring框架中的单例bean是线程安全的吗" aria-hidden="true">#</a> 3.8 Spring框架中的单例bean是线程安全的吗？</h2><ul><li>不是，Spring框架中的单例bean不是线程安全的。</li><li>spring 中的 bean 默认是单例模式，spring 框架并没有对单例 bean 进行多线程的封装处理。</li><li>实际上大部分时候 spring bean 无状态的（比如 dao 类），所有某种程度上来说 bean 也是安全<br> 的，但如果 bean 有状态的话（比如 view model 对象），那就要开发者自己去保证线程安全了，<br> 最简单的就是改变 bean 的作用域，把“singleton”变更为“prototype”，这样请求 bean 相当于<br> new Bean()了，所以就可以保证线程安全了。 <ul><li>有状态就是有数据存储功能。</li><li>无状态就是不会保存数据。</li></ul></li></ul><h2 id="_3-9-spring如何处理线程并发问题" tabindex="-1"><a class="header-anchor" href="#_3-9-spring如何处理线程并发问题" aria-hidden="true">#</a> 3.9 Spring如何处理线程并发问题？</h2><ul><li>在一般情况下，只有无状态的Bean才可以在多线程环境下共享，在Spring中，绝大部分Bean都可<br> 以声明为singleton作用域，因为Spring对一些Bean中非线程安全状态采用ThreadLocal进行处<br> 理，解决线程安全问题。</li><li>ThreadLocal和线程同步机制都是为了解决多线程中相同变量的访问冲突问题。同步机制采用了<br> “时间换空间”的方式，仅提供一份变量，不同的线程在访问前需要获取锁，没获得锁的线程则需要<br> 排队。而ThreadLocal采用了“空间换时间”的方式。</li><li>ThreadLocal会为每一个线程提供一个独立的变量副本，从而隔离了多个线程对数据的访问冲突。<br> 因为每一个线程都拥有自己的变量副本，从而也就没有必要对该变量进行同步了。ThreadLocal提<br> 供了线程安全的共享对象，在编写多线程代码时，可以把不安全的变量封装进ThreadLocal。</li></ul><h2 id="_3-10解释spring框架中bean的生命周期" tabindex="-1"><a class="header-anchor" href="#_3-10解释spring框架中bean的生命周期" aria-hidden="true">#</a> 3.10解释Spring框架中bean的生命周期</h2><ul><li>在传统的Java应用中，bean的生命周期很简单。使用Java关键字new进行bean实例化，然后该<br> bean就可以使用了。一旦该bean不再被使用，则由Java自动进行垃圾回收。相比之下，Spring容<br> 器中的bean的生命周期就显得相对复杂多了。正确理解Spring bean的生命周期非常重要，因为你<br> 或许要利用Spring提供的扩展点来自定义bean的创建过程。下图展示了bean装载到Spring应用上<br> 下文中的一个典型的生命周期过程。<br><img src="https://img-blog.csdnimg.cn/9f48e414e5694de1882717d3da5c0d26.png" alt="在这里插入图片描述" loading="lazy"></li><li>bean在Spring容器中从创建到销毁经历了若干阶段，每一阶段都可以针对Spring如何管理bean进<br> 行个性化定制。</li><li>正如你所见，在bean准备就绪之前，bean工厂执行了若干启动步骤。</li></ul><p><strong>我们对上图进行详细描述：</strong></p><ul><li>Spring对bean进行实例化；</li><li>Spring将值和bean的引用注入到bean对应的属性中；</li><li>如果bean实现了BeanNameAware接口，Spring将bean的ID传递给setBean-Name()方法；</li><li>如果bean实现了BeanFactoryAware接口，Spring将调用setBeanFactory()方法，将BeanFactory<br> 容器实例传入；</li><li>如果bean实现了ApplicationContextAware接口，Spring将调用setApplicationContext()方法，将<br> bean所在的应用上下文的引用传入进来；</li><li>如果bean实现了BeanPostProcessor接口，Spring将调用它们的postProcessBeforeInitialization()方法；</li><li>如果bean实现了InitializingBean接口，Spring将调用它们的after-PropertiesSet()方法。类似地，</li><li>如果bean使用initmethod声明了初始化方法，该方法也会被调用；</li><li>如果bean实现了BeanPostProcessor接口，Spring将调用它们的post-ProcessAfterInitialization()<br> 方法；</li><li>此时，bean已经准备就绪，可以被应用程序使用了，它们将一直驻留在应用上下文中，直到该应<br> 用上下文被销毁；</li><li>如果bean实现了DisposableBean接口，Spring将调用它的destroy()接口方法。同样，如果bean<br> 使用destroy-method声明了销毁方法，该方法也会被调用。</li></ul><p><code>现在你已经了解了如何创建和加载一个Spring容器。但是一个空的容器并没有太大的价值，在你把东西放进去之前，它里面什么都没有。为了从Spring的DI(依赖注入)中受益，我们必须将应用对象装配进Spring容器中。</code></p><h2 id="_3-11-哪些是重要的bean生命周期方法-你能重载它们吗" tabindex="-1"><a class="header-anchor" href="#_3-11-哪些是重要的bean生命周期方法-你能重载它们吗" aria-hidden="true">#</a> 3.11 哪些是重要的bean生命周期方法？ 你能重载它们吗？</h2><ul><li>有两个重要的bean 生命周期方法，第一个是setup ， 它是在容器加载bean的时候被调用。第二<br> 个方法是 teardown 它是在容器卸载类的时候被调用。</li><li>bean 标签有两个重要的属性（init-method和destroy-method）。用它们你可以自己定制初始化<br> 和注销方法。它们也有相应的注解（@PostConstruct和@PreDestroy）。</li></ul><h2 id="_3-12-什么是spring的内部bean-什么是spring-inner-beans" tabindex="-1"><a class="header-anchor" href="#_3-12-什么是spring的内部bean-什么是spring-inner-beans" aria-hidden="true">#</a> 3.12 什么是Spring的内部bean？什么是Spring inner beans？</h2><ul><li>在Spring框架中，当一个bean仅被用作另一个bean的属性时，它能被声明为一个内部bean。内<br> 部bean可以用setter注入“属性”和构造方法注入“构造参数”的方式来实现，内部bean通常是匿名<br> 的，它们的Scope一般是prototype。</li></ul><h2 id="_3-13-什么是bean装配" tabindex="-1"><a class="header-anchor" href="#_3-13-什么是bean装配" aria-hidden="true">#</a> 3.13 什么是bean装配？</h2><ul><li>装配，或bean 装配是指在Spring 容器中把bean组装到一起，前提是容器需要知道bean的依赖关<br> 系，如何通过依赖注入来把它们装配到一起。</li></ul><h2 id="_3-14-什么是bean的自动装配" tabindex="-1"><a class="header-anchor" href="#_3-14-什么是bean的自动装配" aria-hidden="true">#</a> 3.14 什么是bean的自动装配？</h2><ul><li>在Spring框架中，在配置文件中设定bean的依赖关系是一个很好的机制，Spring 容器能够自动装<br> 配相互合作的bean，这意味着容器不需要和配置，能通过Bean工厂自动处理bean之间的协作。<br> 这意味着 Spring可以通过向Bean Factory中注入的方式自动搞定bean之间的依赖关系。自动装配<br> 可以设置在每个bean上，也可以设定在特定的bean上。</li></ul><h2 id="_3-15-解释不同方式的自动装配-spring-自动装配-bean-有哪些方式" tabindex="-1"><a class="header-anchor" href="#_3-15-解释不同方式的自动装配-spring-自动装配-bean-有哪些方式" aria-hidden="true">#</a> 3.15 解释不同方式的自动装配，spring 自动装配 bean 有哪些方式？</h2><ul><li>在spring中，对象无需自己查找或创建与其关联的其他对象，由容器负责把需要相互协作的对象引<br> 用赋予各个对象，使用autowire来配置自动装载模式。</li><li>在Spring框架xml配置中共有5种自动装配：<br> no：默认的方式是不进行自动装配的，通过手工设置ref属性来进行装配bean。</li><li>byName：通过bean的名称进行自动装配，如果一个bean的 property 与另一bean 的name 相<br> 同，就进行自动装配。<br> byType：通过参数的数据类型进行自动装配。</li><li>constructor：利用构造函数进行装配，并且构造函数的参数通过byType进行装配。</li><li>autodetect：自动探测，如果有构造方法，通过 construct的方式自动装配，否则使用<br> byType的方式自动装配。</li></ul><h2 id="_3-16-使用-autowired注解自动装配的过程是怎样的" tabindex="-1"><a class="header-anchor" href="#_3-16-使用-autowired注解自动装配的过程是怎样的" aria-hidden="true">#</a> 3.16 使用@Autowired注解自动装配的过程是怎样的？</h2><ul><li>使用@Autowired注解来自动装配指定的bean。在使用@Autowired注解之前需要在Spring配置文<br> 件进行配置，&lt;context:annotation-config /&gt;。</li><li>在启动spring IOC时，容器自动装载了一个AutowiredAnnotationBeanPostProcessor后置处理<br> 器，当容器扫描到@Autowied、@Resource或@Inject时，就会在IOC容器自动查找需要的bean，<br> 并装配给该对象的属性。在使用@Autowired时，首先在容器中查询对应类型的bean： <ul><li>如果查询结果刚好为一个，就将该bean装配给@Autowired指定的数据；</li></ul></li><li>如果查询的结果不止一个，那么@Autowired会根据名称来查找； <ul><li>如果上述查找的结果为空，那么会抛出异常。解决方法时，使用required=false。</li></ul></li></ul><h2 id="_3-17-自动装配有哪些局限性" tabindex="-1"><a class="header-anchor" href="#_3-17-自动装配有哪些局限性" aria-hidden="true">#</a> 3.17 自动装配有哪些局限性？</h2><ul><li>自动装配的局限性是： <ul><li>重写：你仍需用 和 配置来定义依赖，意味着总要重写自动装配。</li></ul></li><li>基本数据类型：你不能自动装配简单的属性，如基本数据类型，String字符串，和类。 <ul><li>模糊特性：自动装配不如显式装配精确，如果有可能，建议使用显式装配。</li></ul></li></ul><h2 id="_3-18-你可以在spring中注入一个null-和一个空字符串吗" tabindex="-1"><a class="header-anchor" href="#_3-18-你可以在spring中注入一个null-和一个空字符串吗" aria-hidden="true">#</a> 3.18 你可以在Spring中注入一个null 和一个空字符串吗？</h2><p>可以。</p><hr><h2 id="_4-spring注解" tabindex="-1"><a class="header-anchor" href="#_4-spring注解" aria-hidden="true">#</a> 4.Spring注解</h2><h2 id="_4-1-什么是基于java的spring注解配置-给一些注解的例子" tabindex="-1"><a class="header-anchor" href="#_4-1-什么是基于java的spring注解配置-给一些注解的例子" aria-hidden="true">#</a> 4.1 什么是基于Java的Spring注解配置? 给一些注解的例子</h2><ul><li>基于Java的配置，允许你在少量的Java注解的帮助下，进行你的大部分Spring配置而非通过XML文<br> 件。</li><li>以@Configuration 注解为例，它用来标记类可以当做一个bean的定义，被Spring IOC容器使用。</li><li>另一个例子是@Bean注解，它表示此方法将要返回一个对象，作为一个bean注册进Spring应用上<br> 下文。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@Configuration</span>
	<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentConfig</span> <span class="token punctuation">{</span>
		<span class="token annotation punctuation">@Bean</span>
		<span class="token keyword">public</span> <span class="token class-name">StudentBean</span> <span class="token function">myStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StudentBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-2-怎样开启注解装配" tabindex="-1"><a class="header-anchor" href="#_4-2-怎样开启注解装配" aria-hidden="true">#</a> 4.2 怎样开启注解装配？</h2><ul><li>注解装配在默认情况下是不开启的，为了使用注解装配，我们必须在Spring配置文件中配置<br> context:annotation-config/ 元素。</li></ul><h2 id="_4-3-component-controller-repository-service-有何区别" tabindex="-1"><a class="header-anchor" href="#_4-3-component-controller-repository-service-有何区别" aria-hidden="true">#</a> 4.3 @Component, @Controller, @Repository, @Service 有何区别？</h2><ul><li>@Component：这将 java 类标记为 bean。它是任何 Spring 管理组件的通用构造型。spring 的<br> 组件扫描机制现在可以将其拾取并将其拉入应用程序环境中。</li><li>@Controller：这将一个类标记为 Spring Web MVC 控制器。标有它的 Bean 会自动导入到 IOC 容<br> 器中。</li><li>@Service：此注解是组件注解的特化。它不会对 @Component 注解提供任何其他行为。您可以<br> 在服务层类中使用 @Service 而不是 @Component，因为它以更好的方式指定了意图。</li><li>@Repository：这个注解是具有类似用途和功能的 @Component 注解的特化。它为 DAO 提供了<br> 额外的好处。它将 DAO 导入 IOC 容器，并使未经检查的异常有资格转换为 Spring<br> DataAccessException。</li></ul><h2 id="_4-4-required-注解有什么作用" tabindex="-1"><a class="header-anchor" href="#_4-4-required-注解有什么作用" aria-hidden="true">#</a> 4.4 @Required 注解有什么作用</h2><ul><li>这个注解表明bean的属性必须在配置的时候设置，通过一个bean定义的显式的属性值或通过自动<br> 装配，若@Required注解的bean属性未被设置，容器将抛出BeanInitializationException。示<br> 例：</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>
		<span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
		<span class="token annotation punctuation">@Required</span>
		<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">public</span> string <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token keyword">return</span> name<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-5-autowired-注解有什么作用" tabindex="-1"><a class="header-anchor" href="#_4-5-autowired-注解有什么作用" aria-hidden="true">#</a> 4.5 @Autowired 注解有什么作用</h2><ul><li>@Autowired默认是按照类型装配注入的，默认情况下它要求依赖对象必须存在（可以设置它<br> required属性为false）。@Autowired 注解提供了更细粒度的控制，包括在何处以及如何完成自<br> 动装配。它的用法和@Required一样，修饰setter方法、构造器、属性或者具有任意名称和/或多<br> 个参数的PN方法。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>
		<span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
		<span class="token annotation punctuation">@Autowired</span>
		<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">public</span> string <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token keyword">return</span> name<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-6-autowired和-resource之间的区别" tabindex="-1"><a class="header-anchor" href="#_4-6-autowired和-resource之间的区别" aria-hidden="true">#</a> 4.6 @Autowired和@Resource之间的区别</h2><ul><li>@Autowired和@Resource可用于：构造函数、成员变量、Setter方法</li><li>@Autowired和@Resource之间的区别在于 <ul><li>@Autowired默认是按照类型装配注入的，默认情况下它要求依赖对象必须存在（可以设置它<br> required属性为false）。</li><li>@Resource默认是按照名称来装配注入的，只有当找不到与名称匹配的bean才会按照类型来<br> 装配注入。</li></ul></li></ul><h2 id="_4-7-qualifier-注解有什么作用" tabindex="-1"><a class="header-anchor" href="#_4-7-qualifier-注解有什么作用" aria-hidden="true">#</a> 4.7 @Qualifier 注解有什么作用</h2><ul><li>当您创建多个相同类型的 bean 并希望仅使用属性装配其中一个 bean 时，您可以使用@Qualifier<br> 注解和 @Autowired 通过指定应该装配哪个确切的 bean 来消除歧义。</li></ul><h2 id="_4-8-requestmapping-注解有什么用" tabindex="-1"><a class="header-anchor" href="#_4-8-requestmapping-注解有什么用" aria-hidden="true">#</a> 4.8 @RequestMapping 注解有什么用？</h2><ul><li>@RequestMapping 注解用于将特定 HTTP 请求方法映射到将处理相应请求的控制器中的特定类/<br> 方法。此注释可应用于两个级别： <ul><li>类级别：映射请求的 URL <ul><li>方法级别：映射 URL 以及 HTTP 请求方法</li></ul></li></ul></li></ul><hr><h2 id="_5-spring数据访问" tabindex="-1"><a class="header-anchor" href="#_5-spring数据访问" aria-hidden="true">#</a> 5.Spring数据访问</h2><h2 id="_5-1-解释对象-关系映射集成模块" tabindex="-1"><a class="header-anchor" href="#_5-1-解释对象-关系映射集成模块" aria-hidden="true">#</a> 5.1 解释对象/关系映射集成模块</h2><p>Spring 通过提供ORM模块，支持我们在直接JDBC之上使用一个对象/关系映射映射(ORM)工具，<br> Spring 支持集成主流的ORM框架，如Hiberate，JDO和 MyBatis，JPA，TopLink，JDO，OJB等待<br> 。Spring的事务管理同样支持以上所有ORM框架及JDBC。</p><h2 id="_5-2-在spring框架中如何更有效地使用jdbc" tabindex="-1"><a class="header-anchor" href="#_5-2-在spring框架中如何更有效地使用jdbc" aria-hidden="true">#</a> 5.2 在Spring框架中如何更有效地使用JDBC？</h2><ul><li>使用Spring JDBC 框架，资源管理和错误处理的代价都会被减轻。所以开发者只需写statements<br> 和 queries从数据存取数据，JDBC也可以在Spring框架提供的模板类的帮助下更有效地被使用，<br> 这个模板叫JdbcTemplate</li></ul><h2 id="_5-3-解释jdbc抽象和dao模块" tabindex="-1"><a class="header-anchor" href="#_5-3-解释jdbc抽象和dao模块" aria-hidden="true">#</a> 5.3 解释JDBC抽象和DAO模块</h2><ul><li>通过使用JDBC抽象和DAO模块，保证数据库代码的简洁，并能避免数据库资源错误关闭导致的问<br> 题，它在各种不同的数据库的错误信息之上，提供了一个统一的异常访问层。它还利用Spring的<br> AOP 模块给Spring应用中的对象提供事务管理服务。</li></ul><h2 id="_5-4-spring-dao-有什么用" tabindex="-1"><a class="header-anchor" href="#_5-4-spring-dao-有什么用" aria-hidden="true">#</a> 5.4 spring DAO 有什么用？</h2><p>Spring DAO（数据访问对象） 使得 JDBC，Hibernate 或 JDO 这样的数据访问技术更容易以一种<br> 统一的方式工作。这使得用户容易在持久性技术之间切换。它还允许您在编写代码时，无需考虑捕<br> 获每种技术不同的异常。</p><h2 id="_5-5-spring-jdbc-api-中存在哪些类" tabindex="-1"><a class="header-anchor" href="#_5-5-spring-jdbc-api-中存在哪些类" aria-hidden="true">#</a> 5.5 spring JDBC API 中存在哪些类？</h2><ul><li>JdbcTemplate</li><li>SimpleJdbcTemplate</li><li>NamedParameterJdbcTemplate</li><li>SimpleJdbcInsert</li><li>SimpleJdbcCall</li></ul><h2 id="_5-6-jdbctemplate是什么" tabindex="-1"><a class="header-anchor" href="#_5-6-jdbctemplate是什么" aria-hidden="true">#</a> 5.6 JdbcTemplate是什么</h2><ul><li>JdbcTemplate 类提供了很多便利的方法解决诸如把数据库数据转变成基本数据类型或对象，执行<br> 写好的或可调用的数据库操作语句，提供自定义的数据错误处理。</li></ul><h2 id="_5-7-使用spring通过什么方式访问hibernate-使用-spring-访问hibernate-的方法有哪些" tabindex="-1"><a class="header-anchor" href="#_5-7-使用spring通过什么方式访问hibernate-使用-spring-访问hibernate-的方法有哪些" aria-hidden="true">#</a> 5.7 使用Spring通过什么方式访问Hibernate？使用 Spring 访问Hibernate 的方法有哪些？</h2><ul><li>在Spring中有两种方式访问Hibernate： <ul><li>使用 Hibernate 模板和回调进行控制反转</li><li>扩展 HibernateDAOSupport 并应用 AOP 拦截器节点</li></ul></li></ul><h2 id="_5-8-如何通过hibernatedaosupport将spring和hibernate结合起来" tabindex="-1"><a class="header-anchor" href="#_5-8-如何通过hibernatedaosupport将spring和hibernate结合起来" aria-hidden="true">#</a> 5.8 如何通过HibernateDaoSupport将Spring和Hibernate结合起来？</h2><ul><li>用Spring的 SessionFactory 调用 LocalSessionFactory。集成过程分三步： <ul><li>配置the Hibernate SessionFactory</li><li>继承HibernateDaoSupport实现一个DAO</li><li>在AOP支持的事务中装配</li></ul></li></ul><h2 id="_5-9-spring支持的事务管理类型-spring-事务实现方式有哪些" tabindex="-1"><a class="header-anchor" href="#_5-9-spring支持的事务管理类型-spring-事务实现方式有哪些" aria-hidden="true">#</a> 5.9 Spring支持的事务管理类型， spring 事务实现方式有哪些？</h2><ul><li>Spring支持两种类型的事务管理： <ul><li>编程式事务管理：这意味你通过编程的方式管理事务，给你带来极大的灵活性，但是难维护。</li><li>声明式事务管理：这意味着你可以将业务代码和事务管理分离，你只需用注解和XML配置来管理事务。</li></ul></li></ul><h2 id="_5-10-spring事务的实现方式和实现原理" tabindex="-1"><a class="header-anchor" href="#_5-10-spring事务的实现方式和实现原理" aria-hidden="true">#</a> 5.10 Spring事务的实现方式和实现原理</h2><ul><li>Spring事务的本质其实就是数据库对事务的支持，没有数据库的事务支持，spring是无法提供事务<br> 功能的。真正的数据库层的事务提交和回滚是通过binlog或者redo log实现的。</li></ul><h2 id="_5-11-说一下spring的事务传播行为" tabindex="-1"><a class="header-anchor" href="#_5-11-说一下spring的事务传播行为" aria-hidden="true">#</a> 5.11 说一下Spring的事务传播行为</h2><p>spring事务的传播行为说的是，当多个事务同时存在的时候，spring如何处理这些事务的行为。</p><blockquote><p>① PROPAGATION_REQUIRED：如果当前没有事务，就创建一个新事务，如果当前存在事务，就 加入该事务，该设置是最常用的设置。<br> ② PROPAGATION_SUPPORTS：支持当前事务，如果当前存在事务，就加入该事务，如果当前不 存在事务，就以非事务执行。<br> ③ PROPAGATION_MANDATORY：支持当前事务，如果当前存在事务，就加入该事务，如果当前 不存在事务，就抛出异常。<br> ④ PROPAGATION_REQUIRES_NEW：创建新事务，无论当前存不存在事务，都创建新事务。<br> ⑤ PROPAGATION_NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前 事务挂起。<br> ⑥ PROPAGATION_NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。<br> ⑦ PROPAGATION_NESTED：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则 按REQUIRED属性执行。</p></blockquote><h2 id="_5-12-说一下-spring-的事务隔离" tabindex="-1"><a class="header-anchor" href="#_5-12-说一下-spring-的事务隔离" aria-hidden="true">#</a> 5.12 说一下 spring 的事务隔离？</h2><ul><li>spring 有五大隔离级别，默认值为 ISOLATION_DEFAULT（使用数据库的设置），其他四个隔离<br> 级别和数据库的隔离级别一致：<br> 1.ISOLATION_DEFAULT：用底层数据库的设置隔离级别，数据库设置的是什么我就用什么；<br> 2.ISOLATION_READ_UNCOMMITTED：未提交读，最低隔离级别、事务未提交前，就可被其<br> 他事务读取（会出现幻读、脏读、不可重复读）；<br> 3.ISOLATION_READ_COMMITTED：提交读，一个事务提交后才能被其他事务读取到（会造成<br> 幻读、不可重复读），SQL server 的默认级别；<br> 4.ISOLATION_REPEATABLE_READ：可重复读，保证多次读取同一个数据时，其值都和事务开<br> 始时候的内容是一致，禁止读取到别的事务未提交的数据（会造成幻读），MySQL 的默认级<br> 别；<br> 5.ISOLATION_SERIALIZABLE：序列化，代价最高最可靠的隔离级别，该隔离级别能防止脏<br> 读、不可重复读、幻读。</li><li>脏读 ：表示一个事务能够读取另一个事务中还未提交的数据。比如，某个事务尝试插入记录 A，<br> 此时该事务还未提交，然后另一个事务尝试读取到了记录 A。</li><li>不可重复读 ：是指在一个事务内，多次读同一数据。</li><li>幻读 ：指同一个事务内多次查询返回的结果集不一样。比如同一个事务 A 第一次查询时候有 n 条</li><li>记录，但是第二次同等条件下查询却有 n+1 条记录，这就好像产生了幻觉。发生幻读的原因也是<br> 另外一个事务新增或者删除或者修改了第一个事务结果集里面的数据，同一个记录的数据内容被修<br> 改了，所有数据行的记录就变多或者变少了。</li></ul><h2 id="_5-13-spring框架的事务管理有哪些优点" tabindex="-1"><a class="header-anchor" href="#_5-13-spring框架的事务管理有哪些优点" aria-hidden="true">#</a> 5.13 Spring框架的事务管理有哪些优点？</h2><ul><li>为不同的事务API 如 JTA，JDBC，Hibernate，JPA 和JDO，提供一个不变的编程模式。</li><li>为编程式事务管理提供了一套简单的API而不是一些复杂的事务API</li><li>支持声明式事务管理。</li><li>和Spring各种数据访问抽象层很好得集成。</li></ul><h2 id="_5-14-你更倾向用那种事务管理类型" tabindex="-1"><a class="header-anchor" href="#_5-14-你更倾向用那种事务管理类型" aria-hidden="true">#</a> 5.14 你更倾向用那种事务管理类型？</h2><ul><li>大多数Spring框架的用户选择声明式事务管理，因为它对应用代码的影响最小，因此更符合一个无<br> 侵入的轻量级容器的思想。声明式事务管理要优于编程式事务管理，虽然比编程式事务管理（这种<br> 方式允许你通过代码控制事务）少了一点灵活性。唯一不足地方是，最细粒度只能作用到方法级<br> 别，无法做到像编程式事务那样可以作用到代码块级别。</li></ul><hr><h2 id="_6-spring面向切面编程-aop" tabindex="-1"><a class="header-anchor" href="#_6-spring面向切面编程-aop" aria-hidden="true">#</a> 6.Spring面向切面编程(AOP)</h2><h2 id="_6-1-什么是aop" tabindex="-1"><a class="header-anchor" href="#_6-1-什么是aop" aria-hidden="true">#</a> 6.1 什么是AOP</h2><ul><li>OOP(Object-Oriented Programming)面向对象编程，允许开发者定义纵向的关系，但并适用于定<br> 义横向的关系，导致了大量代码的重复，而不利于各个模块的重用。</li><li>AOP(Aspect-Oriented Programming)，一般称为面向切面编程，作为面向对象的一种补充，用于<br> 将那些与业务无关，但却对多个对象产生影响的公共行为和逻辑，抽取并封装为一个可重用的模<br> 块，这个模块被命名为“切面”（Aspect），减少系统中的重复代码，降低了模块间的耦合度，同时<br> 提高了系统的可维护性。可用于权限认证、日志、事务处理等。</li></ul><h2 id="_6-2-spring-aop-and-aspectj-aop-有什么区别-aop-有哪些实现方式" tabindex="-1"><a class="header-anchor" href="#_6-2-spring-aop-and-aspectj-aop-有什么区别-aop-有哪些实现方式" aria-hidden="true">#</a> 6.2 Spring AOP and AspectJ AOP 有什么区别？AOP 有哪些实现方式？</h2><ul><li><p>AOP实现的关键在于 代理模式，AOP代理主要分为静态代理和动态代理。静态代理的代表为<br> AspectJ；动态代理则以Spring AOP为代表。<br> （1）AspectJ是静态代理的增强，所谓静态代理，就是AOP框架会在编译阶段生成AOP代理<br> 类，因此也称为编译时增强，他会在编译阶段将AspectJ(切面)织入到Java字节码中，运行的<br> 时候就是增强之后的AOP对象。<br> （2）Spring AOP使用的动态代理，所谓的动态代理就是说AOP框架不会去修改字节码，而是每次<br> 运行时在内存中临时为方法生成一个AOP对象，这个AOP对象包含了目标对象的全部方法，并且在<br> 特定的切点做了增强处理，并回调原对象的方法。</p></li><li><p>6.3 JDK动态代理和CGLIB动态代理的区别</p></li><li><p>Spring AOP中的动态代理主要有两种方式，JDK动态代理和CGLIB动态代理：</p><ul><li>JDK动态代理只提供接口的代理，不支持类的代理。核心InvocationHandler接口和Proxy<br> 类，InvocationHandler 通过invoke()方法反射来调用目标类中的代码，动态地将横切逻辑和<br> 业务编织在一起；接着，Proxy利用 InvocationHandler动态创建一个符合某一接口的的实<br> 例, 生成目标类的代理对象。</li><li>如果代理类没有实现 InvocationHandler 接口，那么Spring AOP会选择使用CGLIB来动态代<br> 理目标类。CGLIB（Code Generation Library），是一个代码生成的类库，可以在运行时动<br> 态的生成指定类的一个子类对象，并覆盖其中特定方法并添加增强代码，从而实现AOP。<br> CGLIB是通过继承的方式做的动态代理，因此如果某个类被标记为final，那么它是无法使用<br> CGLIB做动态代理的。</li></ul></li><li><p>静态代理与动态代理区别在于生成AOP代理对象的时机不同，相对来说AspectJ的静态代理方式具<br> 有更好的性能，但是AspectJ需要特定的编译器进行处理，而Spring AOP则无需特定的编译器处<br> 理。<br> InvocationHandler 的 invoke(Object proxy,Method method,Object[] args)：proxy是最终生成<br> 的代理实例; method 是被代理目标实例的某个具体方法; args 是被代理目标实例某个方法的具体<br> 入参, 在方法反射调用时使用。</p></li></ul><h2 id="_6-4-解释一下spring-aop里面的几个名词" tabindex="-1"><a class="header-anchor" href="#_6-4-解释一下spring-aop里面的几个名词" aria-hidden="true">#</a> 6.4 解释一下Spring AOP里面的几个名词</h2><p>（1）切面（Aspect）：切面是通知和切点的结合。通知和切点共同定义了切面的全部内容。 在<br> Spring AOP中，切面可以使用通用类（基于模式的风格） 或者在普通类中以 @AspectJ 注解来实<br> 现。<br> （2）连接点（Join point）：指方法，在Spring AOP中，一个连接点 总是 代表一个方法的执行。<br> 应用可能有数以千计的时机应用通知。这些时机被称为连接点。连接点是在应用执行过程中能够插<br> 入切面的一个点。这个点可以是调用方法时、抛出异常时、甚至修改一个字段时。切面代码可以利<br> 用这些点插入到应用的正常流程之中，并添加新的行为。<br> （3）通知（Advice）：在AOP术语中，切面的工作被称为通知。<br> （4）切入点（Pointcut）：切点的定义会匹配通知所要织入的一个或多个连接点。我们通常使用<br> 明确的类和方法名称，或是利用正则表达式定义所匹配的类和方法名称来指定这些切点。<br> （5）引入（Introduction）：引入允许我们向现有类添加新方法或属性。<br> （6）目标对象（Target Object）： 被一个或者多个切面（aspect）所通知（advise）的对象。<br> 它通常是一个代理对象。也有人把它叫做 被通知（adviced） 对象。 既然Spring AOP是通过运行<br> 时代理实现的，这个对象永远是一个 被代理（proxied） 对象。<br> （7）织入（Weaving）：织入是把切面应用到目标对象并创建新的代理对象的过程。在目标对象<br> 的生命周期里有多少个点可以进行织入：</p><ul><li>编译期：切面在目标类编译时被织入。AspectJ的织入编译器是以这种方式织入切面的。</li><li>类加载期：切面在目标类加载到JVM时被织入。需要特殊的类加载器，它可以在目标类被引<br> 入应用之前增强该目标类的字节码。AspectJ5的加载时织入就支持以这种方式织入切面。</li><li>运行期：切面在应用运行的某个时刻被织入。一般情况下，在织入切面时，AOP容器会为目<br> 标对象动态地创建一个代理对象。SpringAOP就是以这种方式织入切面。</li></ul><h2 id="_6-5-spring在运行时通知对象" tabindex="-1"><a class="header-anchor" href="#_6-5-spring在运行时通知对象" aria-hidden="true">#</a> 6.5 Spring在运行时通知对象</h2><ul><li>通过在代理类中包裹切面，Spring在运行期把切面织入到Spring管理的bean中。代理封装了目标<br> 类，并拦截被通知方法的调用，再把调用转发给真正的目标bean。当代理拦截到方法调用时，在<br> 调用目标bean方法之前，会执行切面逻辑。</li><li>直到应用需要被代理的bean时，Spring才创建代理对象。如果使用的是ApplicationContext的<br> 话，在ApplicationContext从BeanFactory中加载所有bean的时候，Spring才会创建被代理的对<br> 象。因为Spring运行时才创建代理对象，所以我们不需要特殊的编译器来织入SpringAOP的切面。</li></ul><h2 id="_6-6-spring只支持方法级别的连接点" tabindex="-1"><a class="header-anchor" href="#_6-6-spring只支持方法级别的连接点" aria-hidden="true">#</a> 6.6 Spring只支持方法级别的连接点</h2><ul><li>因为Spring基于动态代理，所以Spring只支持方法连接点。Spring缺少对字段连接点的支持，而且<br> 它不支持构造器连接点。方法之外的连接点拦截功能，我们可以利用Aspect来补充。</li></ul><h2 id="_6-7-在spring-aop-中-关注点和横切关注的区别是什么-在-springaop-中-concern-和-cross-cutting-concern-的不同之处" tabindex="-1"><a class="header-anchor" href="#_6-7-在spring-aop-中-关注点和横切关注的区别是什么-在-springaop-中-concern-和-cross-cutting-concern-的不同之处" aria-hidden="true">#</a> 6.7 在Spring AOP 中，关注点和横切关注的区别是什么？在 springaop 中 concern 和 cross-cutting concern 的不同之处</h2><ul><li>关注点（concern）是应用中一个模块的行为，一个关注点可能会被定义成一个我们想实现的一个<br> 功能。</li><li>横切关注点（cross-cutting concern）是一个关注点，此关注点是整个应用都会使用的功能，并影<br> 响整个应用，比如日志，安全和数据传输，几乎应用的每个模块都需要的功能。因此这些都属于横<br> 切关注点。</li></ul><h2 id="_6-8-spring通知有哪些类型" tabindex="-1"><a class="header-anchor" href="#_6-8-spring通知有哪些类型" aria-hidden="true">#</a> 6.8 Spring通知有哪些类型？</h2><p>在AOP术语中，切面的工作被称为通知，实际上是程序执行时要通过SpringAOP框架触发的代码段。<br> Spring切面可以应用5种类型的通知：</p><ol><li>前置通知（Before）：在目标方法被调用之前调用通知功能；</li><li>后置通知（After）：在目标方法完成之后调用通知，此时不会关心方法的输出是什么；</li><li>返回通知（After-returning ）：在目标方法成功执行之后调用通知；</li><li>异常通知（After-throwing）：在目标方法抛出异常后调用通知；</li><li>环绕通知（Around）：通知包裹了被通知的方法，在被通知的方法调用之前和调用之后执行自定义的行为。</li></ol><h2 id="_6-9-什么是切面-aspect" tabindex="-1"><a class="header-anchor" href="#_6-9-什么是切面-aspect" aria-hidden="true">#</a> 6.9 什么是切面 Aspect？</h2><ul><li>aspect 由 pointcount 和 advice 组成，切面是通知和切点的结合。 它既包含了横切逻辑的定义,<br> 也包括了连接点的定义. Spring AOP 就是负责实施切面的框架, 它将切面所定义的横切逻辑编织到<br> 切面所指定的连接点中. AOP 的工作重心在于如何将增强编织目标对象的连接点上, 这里包含两个<br> 工作: <ul><li>如何通过 pointcut 和 advice 定位到特定的 joinpoint 上</li><li>如何在 advice 中编写切面代码.</li></ul></li><li>可以简单地认为, 使用 @Aspect 注解的类就是切面<br><img src="https://img-blog.csdnimg.cn/ee3c26246b0a4a7d959ca092bb97127a.png" alt="在这里插入图片描述" loading="lazy"></li></ul><h2 id="_6-10-解释基于xml-schema方式的切面实现" tabindex="-1"><a class="header-anchor" href="#_6-10-解释基于xml-schema方式的切面实现" aria-hidden="true">#</a> 6.10 解释基于XML Schema方式的切面实现</h2><ul><li>在这种情况下，切面由常规类以及基于XML的配置实现。</li></ul><h2 id="_6-11解释基于注解的切面实现" tabindex="-1"><a class="header-anchor" href="#_6-11解释基于注解的切面实现" aria-hidden="true">#</a> 6.11解释基于注解的切面实现</h2><ul><li>在这种情况下(基于@AspectJ的实现)，涉及到的切面声明的风格与带有java5标注的普通java类一<br> 致</li></ul><hr><p><strong>史上最全Java面试宝典，BAT大厂面试必备。整理不易，建议先关注点赞加收藏</strong></p>`,186),d=n("thead",null,[n("tr",null,[n("th",null,"序号"),n("th",null,"名称"),n("th",null,"地址")])],-1),u=n("td",null,"1",-1),h=n("td",null,"Java基础面试题（91道含答案）",-1),b={href:"https://blog.csdn.net/qq_30999361/article/details/124482581",target:"_blank",rel:"noopener noreferrer"},_=n("td",null,"2",-1),g=n("td",null,"Java并发编程面试题 （123道含答案）",-1),S={href:"https://blog.csdn.net/qq_30999361/article/details/124545403",target:"_blank",rel:"noopener noreferrer"},k=n("td",null,"3",-1),f=n("td",null,"Java异常面试题 （33道含答案）",-1),v={href:"https://blog.csdn.net/qq_30999361/article/details/124560006",target:"_blank",rel:"noopener noreferrer"},m=n("td",null,"4",-1),A=n("td",null,"Java虚拟机（JVM）面试题（51道含答案）",-1),O={href:"https://blog.csdn.net/qq_30999361/article/details/124532763",target:"_blank",rel:"noopener noreferrer"},x=n("td",null,"5",-1),C=n("td",null,"Java集合面试题（52道含答案）",-1),y={href:"https://blog.csdn.net/qq_30999361/article/details/124503952",target:"_blank",rel:"noopener noreferrer"},B=n("td",null,"6",-1),P=n("td",null,"Linux面试题（50道含答案）",-1),I={href:"https://blog.csdn.net/qq_30999361/article/details/124575798",target:"_blank",rel:"noopener noreferrer"},J=n("td",null,"7",-1),w=n("td",null,"Memcache面试题（23道含答案）",-1),q={href:"https://blog.csdn.net/qq_30999361/article/details/124596870",target:"_blank",rel:"noopener noreferrer"},D=n("td",null,"8",-1),T=n("td",null,"Mybatiss面试题 （37道含答案）",-1),R={href:"https://blog.csdn.net/qq_30999361/article/details/124560907",target:"_blank",rel:"noopener noreferrer"},L=n("td",null,"9",-1),F=n("td",null,"MySQL面试题（40道含答案）",-1),E={href:"https://blog.csdn.net/qq_30999361/article/details/124506169",target:"_blank",rel:"noopener noreferrer"},M=n("td",null,"10",-1),j=n("td",null,"Netty面试题（49道含答案）",-1),N={href:"https://blog.csdn.net/qq_30999361/article/details/124617122",target:"_blank",rel:"noopener noreferrer"},H=n("td",null,"11",-1),X=n("td",null,"Nginx面试题（23道含答案）",-1),G={href:"https://blog.csdn.net/qq_30999361/article/details/124597174",target:"_blank",rel:"noopener noreferrer"},U=n("td",null,"12",-1),W=n("td",null,"RabbitMQ面试题（22道含答案）",-1),Q={href:"https://blog.csdn.net/qq_30999361/article/details/124533998",target:"_blank",rel:"noopener noreferrer"},V=n("td",null,"13",-1),z=n("td",null,"Redis面试题（70道含答案）",-1),K={href:"https://blog.csdn.net/qq_30999361/article/details/124459566",target:"_blank",rel:"noopener noreferrer"},Z=n("td",null,"14",-1),Y=n("td",null,"SpringBoot面试题（44道含答案）",-1),$={href:"https://blog.csdn.net/qq_30999361/article/details/124461725",target:"_blank",rel:"noopener noreferrer"},nn=n("td",null,"15",-1),an=n("td",null,"SpringCloud面试题（49道含答案）",-1),en={href:"https://blog.csdn.net/qq_30999361/article/details/124430712",target:"_blank",rel:"noopener noreferrer"},rn=n("td",null,"16",-1),tn=n("td",null,"SpringMVC面试题（29道含答案）",-1),sn={href:"https://blog.csdn.net/qq_30999361/article/details/124519135",target:"_blank",rel:"noopener noreferrer"},ln=n("td",null,"17",-1),pn=n("td",null,"Spring面试题（75道含答案）",-1),on={href:"https://blog.csdn.net/qq_30999361/article/details/124519472",target:"_blank",rel:"noopener noreferrer"},cn=n("td",null,"18",-1),dn=n("td",null,"TCP、UDP、Socket、Http网络编程面试题（47道含答案）",-1),un={href:"https://blog.csdn.net/qq_30999361/article/details/124617792",target:"_blank",rel:"noopener noreferrer"},hn=n("td",null,"19",-1),bn=n("td",null,"Tomcat面试题（15道含答案）",-1),_n={href:"https://blog.csdn.net/qq_30999361/article/details/124576964",target:"_blank",rel:"noopener noreferrer"},gn=n("td",null,"20",-1),Sn=n("td",null,"Zookeeper面试题（28道含答案）",-1),kn={href:"https://blog.csdn.net/qq_30999361/article/details/124596208",target:"_blank",rel:"noopener noreferrer"},fn=n("td",null,"21",-1),vn=n("td",null,"多线程面试题（60道含答案）",-1),mn={href:"https://blog.csdn.net/qq_30999361/article/details/124596462",target:"_blank",rel:"noopener noreferrer"},An=n("td",null,"22",-1),On=n("td",null,"设计模式面试题（14道含答案）",-1),xn={href:"https://blog.csdn.net/qq_30999361/article/details/124637874",target:"_blank",rel:"noopener noreferrer"},Cn=n("td",null,"23",-1),yn=n("td",null,"BIO、NIO、AIO、Netty面试题（35道含答案）",-1),Bn={href:"https://blog.csdn.net/qq_30999361/article/details/124653616",target:"_blank",rel:"noopener noreferrer"},Pn=n("td",null,"24",-1),In=n("td",null,"Dubbo面试题（47道含答案）",-1),Jn={href:"https://blog.csdn.net/qq_30999361/article/details/124637288",target:"_blank",rel:"noopener noreferrer"},wn=n("td",null,"25",-1),qn=n("td",null,"ElasticSearch面试题（31道含答案）",-1),Dn={href:"https://blog.csdn.net/qq_30999361/article/details/124619240",target:"_blank",rel:"noopener noreferrer"},Tn=n("td",null,"26",-1),Rn=n("td",null,"Git常用命令（63条）",-1),Ln={href:"https://blog.csdn.net/qq_30999361/article/details/124438420",target:"_blank",rel:"noopener noreferrer"};function Fn(En,Mn){const a=t("ExternalLinkIcon");return s(),l("div",null,[c,n("table",null,[d,n("tbody",null,[n("tr",null,[u,h,n("td",null,[n("a",b,[e("（点击查看）"),i(a)])])]),n("tr",null,[_,g,n("td",null,[n("a",S,[e("（点击查看）"),i(a)])])]),n("tr",null,[k,f,n("td",null,[n("a",v,[e("（点击查看）"),i(a)])])]),n("tr",null,[m,A,n("td",null,[n("a",O,[e("（点击查看）"),i(a)])])]),n("tr",null,[x,C,n("td",null,[n("a",y,[e("（点击查看）"),i(a)])])]),n("tr",null,[B,P,n("td",null,[n("a",I,[e("（点击查看）"),i(a)])])]),n("tr",null,[J,w,n("td",null,[n("a",q,[e("（点击查看）"),i(a)])])]),n("tr",null,[D,T,n("td",null,[n("a",R,[e("（点击查看）"),i(a)])])]),n("tr",null,[L,F,n("td",null,[n("a",E,[e("（点击查看）"),i(a)])])]),n("tr",null,[M,j,n("td",null,[n("a",N,[e("（点击查看）"),i(a)])])]),n("tr",null,[H,X,n("td",null,[n("a",G,[e("（点击查看）"),i(a)])])]),n("tr",null,[U,W,n("td",null,[n("a",Q,[e("（点击查看）"),i(a)])])]),n("tr",null,[V,z,n("td",null,[n("a",K,[e("（点击查看）"),i(a)])])]),n("tr",null,[Z,Y,n("td",null,[n("a",$,[e("（点击查看）"),i(a)])])]),n("tr",null,[nn,an,n("td",null,[n("a",en,[e("（点击查看）"),i(a)])])]),n("tr",null,[rn,tn,n("td",null,[n("a",sn,[e("（点击查看）"),i(a)])])]),n("tr",null,[ln,pn,n("td",null,[n("a",on,[e("（点击查看）"),i(a)])])]),n("tr",null,[cn,dn,n("td",null,[n("a",un,[e("（点击查看）"),i(a)])])]),n("tr",null,[hn,bn,n("td",null,[n("a",_n,[e("（点击查看）"),i(a)])])]),n("tr",null,[gn,Sn,n("td",null,[n("a",kn,[e("（点击查看）"),i(a)])])]),n("tr",null,[fn,vn,n("td",null,[n("a",mn,[e("（点击查看）"),i(a)])])]),n("tr",null,[An,On,n("td",null,[n("a",xn,[e("（点击查看）"),i(a)])])]),n("tr",null,[Cn,yn,n("td",null,[n("a",Bn,[e("（点击查看）"),i(a)])])]),n("tr",null,[Pn,In,n("td",null,[n("a",Jn,[e("（点击查看）"),i(a)])])]),n("tr",null,[wn,qn,n("td",null,[n("a",Dn,[e("（点击查看）"),i(a)])])]),n("tr",null,[Tn,Rn,n("td",null,[n("a",Ln,[e("（点击查看）"),i(a)])])])])])])}const Nn=r(o,[["render",Fn],["__file","Spring面试题（75道含答案）.html.vue"]]);export{Nn as default};
