const i=JSON.parse('{"key":"v-378a697f","path":"/guide/markdown/Java%E9%9D%A2%E8%AF%95%E5%AE%9D%E5%85%B8/Spring%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8875%E9%81%93%E5%90%AB%E7%AD%94%E6%A1%88%EF%BC%89.html","title":"","lang":"zh-CN","frontmatter":{"description":"目录 1. Spring概述 1.1 什么是spring? 1.2 Spring的俩大核心概念 1.3 Spring框架的设计目标，设计理念，和核心是什么 1.4 Spring的优缺点是什么？ 1.5 Spring有哪些应用场景 1.6 Spring由哪些模块组成？ 1.7 Spring 框架中都用到了哪些设计模式？ 1.8 详细讲解一下核心容器（spring context应用上下文) 模块 1.9 Spring框架中有哪些不同类型的事件 1.10 Spring 应用程序有哪些不同组件？ 1.11 使用 Spring 有哪些方式？ 2. Spring控制反转(IOC) 2.1 什么是Spring IOC 容器？ 2.5 Spring 的 IOC支持哪些功能 2.6 BeanFactory 和 ApplicationContext有什么区别？ 2.7 Spring 如何设计容器的，BeanFactory和ApplicationContext的关系详解 2.8 ApplicationContext通常的实现是什么？ 2.9 什么是Spring的依赖注入？ 2.10 依赖注入的基本原则 2.11 依赖注入有什么优势 2.12 有哪些不同类型的依赖注入实现方式？ 2.13 构造器依赖注入和 Setter方法注入的区别 3. Spring Beans 3.1 什么是Spring beans？ 3.2 一个 Spring Bean 定义 包含什么？ 3.3 如何给Spring 容器提供配置元数据？Spring有几种配置方式 3.4 Spring配置文件包含了哪些信息 3.5 Spring基于xml注入bean的几种方式 3.6 你怎样定义类的作用域？ 3.7 解释Spring支持的几种bean的作用域 3.8 Spring框架中的单例bean是线程安全的吗？ 3.9 Spring如何处理线程并发问题？ 3.10解释Spring框架中bean的生命周期 3.11 哪些是重要的bean生命周期方法？ 你能重载它们吗？ 3.12 什么是Spring的内部bean？什么是Spring inner beans？ 3.13 什么是bean装配？ 3.14 什么是bean的自动装配？ 3.15 解释不同方式的自动装配，spring 自动装配 bean 有哪些方式？ 3.16 使用@Autowired注解自动装配的过程是怎样的？ 3.17 自动装配有哪些局限性？ 3.18 你可以在Spring中注入一个null 和一个空字符串吗？ 4.Spring注解 4.1 什么是基于Java的Spring注解配置? 给一些注解的例子 4.2 怎样开启注解装配？ 4.3 @Component, @Controller, @Repository, @Service 有何区别？ 4.4 @Required 注解有什么作用 4.5 @Autowired 注解有什么作用 4.6 @Autowired和@Resource之间的区别 4.7 @Qualifier 注解有什么作用 4.8 @RequestMapping 注解有什么用？ 5.Spring数据访问 5.1 解释对象/关系映射集成模块 5.2 在Spring框架中如何更有效地使用JDBC？ 5.3 解释JDBC抽象和DAO模块 5.4 spring DAO 有什么用？ 5.5 spring JDBC API 中存在哪些类？ 5.6 JdbcTemplate是什么 5.7 使用Spring通过什么方式访问Hibernate？使用 Spring 访问Hibernate 的方法有哪些？ 5.8 如何通过HibernateDaoSupport将Spring和Hibernate结合起来？ 5.9 Spring支持的事务管理类型， spring 事务实现方式有哪些？ 5.10 Spring事务的实现方式和实现原理 5.11 说一下Spring的事务传播行为 5.12 说一下 spring 的事务隔离？ 5.13 Spring框架的事务管理有哪些优点？ 5.14 你更倾向用那种事务管理类型？ 6.Spring面向切面编程(AOP) 6.1 什么是AOP 6.2 Spring AOP and AspectJ AOP 有什么区别？AOP 有哪些实现方式？ 6.4 解释一下Spring AOP里面的几个名词 6.5 Spring在运行时通知对象 6.6 Spring只支持方法级别的连接点 6.7 在Spring AOP 中，关注点和横切关注的区别是什么？在 springaop 中 concern 和 cross-cutting concern 的不同之处 6.8 Spring通知有哪些类型？ 6.9 什么是切面 Aspect？ 6.10 解释基于XML Schema方式的切面实现 6.11解释基于注解的切面实现","head":[["meta",{"property":"og:url","content":"https://www.icu-web.tk/vuepress-doc/guide/markdown/Java%E9%9D%A2%E8%AF%95%E5%AE%9D%E5%85%B8/Spring%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8875%E9%81%93%E5%90%AB%E7%AD%94%E6%A1%88%EF%BC%89.html"}],["meta",{"property":"og:site_name","content":"折戟沉沙、丿"}],["meta",{"property":"og:description","content":"目录 1. Spring概述 1.1 什么是spring? 1.2 Spring的俩大核心概念 1.3 Spring框架的设计目标，设计理念，和核心是什么 1.4 Spring的优缺点是什么？ 1.5 Spring有哪些应用场景 1.6 Spring由哪些模块组成？ 1.7 Spring 框架中都用到了哪些设计模式？ 1.8 详细讲解一下核心容器（spring context应用上下文) 模块 1.9 Spring框架中有哪些不同类型的事件 1.10 Spring 应用程序有哪些不同组件？ 1.11 使用 Spring 有哪些方式？ 2. Spring控制反转(IOC) 2.1 什么是Spring IOC 容器？ 2.5 Spring 的 IOC支持哪些功能 2.6 BeanFactory 和 ApplicationContext有什么区别？ 2.7 Spring 如何设计容器的，BeanFactory和ApplicationContext的关系详解 2.8 ApplicationContext通常的实现是什么？ 2.9 什么是Spring的依赖注入？ 2.10 依赖注入的基本原则 2.11 依赖注入有什么优势 2.12 有哪些不同类型的依赖注入实现方式？ 2.13 构造器依赖注入和 Setter方法注入的区别 3. Spring Beans 3.1 什么是Spring beans？ 3.2 一个 Spring Bean 定义 包含什么？ 3.3 如何给Spring 容器提供配置元数据？Spring有几种配置方式 3.4 Spring配置文件包含了哪些信息 3.5 Spring基于xml注入bean的几种方式 3.6 你怎样定义类的作用域？ 3.7 解释Spring支持的几种bean的作用域 3.8 Spring框架中的单例bean是线程安全的吗？ 3.9 Spring如何处理线程并发问题？ 3.10解释Spring框架中bean的生命周期 3.11 哪些是重要的bean生命周期方法？ 你能重载它们吗？ 3.12 什么是Spring的内部bean？什么是Spring inner beans？ 3.13 什么是bean装配？ 3.14 什么是bean的自动装配？ 3.15 解释不同方式的自动装配，spring 自动装配 bean 有哪些方式？ 3.16 使用@Autowired注解自动装配的过程是怎样的？ 3.17 自动装配有哪些局限性？ 3.18 你可以在Spring中注入一个null 和一个空字符串吗？ 4.Spring注解 4.1 什么是基于Java的Spring注解配置? 给一些注解的例子 4.2 怎样开启注解装配？ 4.3 @Component, @Controller, @Repository, @Service 有何区别？ 4.4 @Required 注解有什么作用 4.5 @Autowired 注解有什么作用 4.6 @Autowired和@Resource之间的区别 4.7 @Qualifier 注解有什么作用 4.8 @RequestMapping 注解有什么用？ 5.Spring数据访问 5.1 解释对象/关系映射集成模块 5.2 在Spring框架中如何更有效地使用JDBC？ 5.3 解释JDBC抽象和DAO模块 5.4 spring DAO 有什么用？ 5.5 spring JDBC API 中存在哪些类？ 5.6 JdbcTemplate是什么 5.7 使用Spring通过什么方式访问Hibernate？使用 Spring 访问Hibernate 的方法有哪些？ 5.8 如何通过HibernateDaoSupport将Spring和Hibernate结合起来？ 5.9 Spring支持的事务管理类型， spring 事务实现方式有哪些？ 5.10 Spring事务的实现方式和实现原理 5.11 说一下Spring的事务传播行为 5.12 说一下 spring 的事务隔离？ 5.13 Spring框架的事务管理有哪些优点？ 5.14 你更倾向用那种事务管理类型？ 6.Spring面向切面编程(AOP) 6.1 什么是AOP 6.2 Spring AOP and AspectJ AOP 有什么区别？AOP 有哪些实现方式？ 6.4 解释一下Spring AOP里面的几个名词 6.5 Spring在运行时通知对象 6.6 Spring只支持方法级别的连接点 6.7 在Spring AOP 中，关注点和横切关注的区别是什么？在 springaop 中 concern 和 cross-cutting concern 的不同之处 6.8 Spring通知有哪些类型？ 6.9 什么是切面 Aspect？ 6.10 解释基于XML Schema方式的切面实现 6.11解释基于注解的切面实现"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-05T14:04:17.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-05T14:04:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-05T14:04:17.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":2,"title":"1. Spring概述","slug":"_1-spring概述","link":"#_1-spring概述","children":[]},{"level":2,"title":"1.1 什么是spring?","slug":"_1-1-什么是spring","link":"#_1-1-什么是spring","children":[]},{"level":2,"title":"1.2 Spring的俩大核心概念","slug":"_1-2-spring的俩大核心概念","link":"#_1-2-spring的俩大核心概念","children":[]},{"level":2,"title":"1.3 Spring框架的设计目标，设计理念，和核心是什么","slug":"_1-3-spring框架的设计目标-设计理念-和核心是什么","link":"#_1-3-spring框架的设计目标-设计理念-和核心是什么","children":[]},{"level":2,"title":"1.4 Spring的优缺点是什么？","slug":"_1-4-spring的优缺点是什么","link":"#_1-4-spring的优缺点是什么","children":[]},{"level":2,"title":"1.5 Spring有哪些应用场景","slug":"_1-5-spring有哪些应用场景","link":"#_1-5-spring有哪些应用场景","children":[]},{"level":2,"title":"1.6 Spring由哪些模块组成？","slug":"_1-6-spring由哪些模块组成","link":"#_1-6-spring由哪些模块组成","children":[]},{"level":2,"title":"1.7 Spring 框架中都用到了哪些设计模式？","slug":"_1-7-spring-框架中都用到了哪些设计模式","link":"#_1-7-spring-框架中都用到了哪些设计模式","children":[]},{"level":2,"title":"1.8 详细讲解一下核心容器（spring context应用上下文) 模块","slug":"_1-8-详细讲解一下核心容器-spring-context应用上下文-模块","link":"#_1-8-详细讲解一下核心容器-spring-context应用上下文-模块","children":[]},{"level":2,"title":"1.9 Spring框架中有哪些不同类型的事件","slug":"_1-9-spring框架中有哪些不同类型的事件","link":"#_1-9-spring框架中有哪些不同类型的事件","children":[]},{"level":2,"title":"1.10 Spring 应用程序有哪些不同组件？","slug":"_1-10-spring-应用程序有哪些不同组件","link":"#_1-10-spring-应用程序有哪些不同组件","children":[]},{"level":2,"title":"1.11 使用 Spring 有哪些方式？","slug":"_1-11-使用-spring-有哪些方式","link":"#_1-11-使用-spring-有哪些方式","children":[]},{"level":2,"title":"2. Spring控制反转(IOC)","slug":"_2-spring控制反转-ioc","link":"#_2-spring控制反转-ioc","children":[]},{"level":2,"title":"2.1 什么是Spring IOC 容器？","slug":"_2-1-什么是spring-ioc-容器","link":"#_2-1-什么是spring-ioc-容器","children":[]},{"level":2,"title":"2.5 Spring 的 IOC支持哪些功能","slug":"_2-5-spring-的-ioc支持哪些功能","link":"#_2-5-spring-的-ioc支持哪些功能","children":[]},{"level":2,"title":"2.6 BeanFactory 和 ApplicationContext有什么区别？","slug":"_2-6-beanfactory-和-applicationcontext有什么区别","link":"#_2-6-beanfactory-和-applicationcontext有什么区别","children":[]},{"level":2,"title":"2.7 Spring 如何设计容器的，BeanFactory和ApplicationContext的关系详解","slug":"_2-7-spring-如何设计容器的-beanfactory和applicationcontext的关系详解","link":"#_2-7-spring-如何设计容器的-beanfactory和applicationcontext的关系详解","children":[]},{"level":2,"title":"2.8 ApplicationContext通常的实现是什么？","slug":"_2-8-applicationcontext通常的实现是什么","link":"#_2-8-applicationcontext通常的实现是什么","children":[]},{"level":2,"title":"2.9 什么是Spring的依赖注入？","slug":"_2-9-什么是spring的依赖注入","link":"#_2-9-什么是spring的依赖注入","children":[]},{"level":2,"title":"2.10 依赖注入的基本原则","slug":"_2-10-依赖注入的基本原则","link":"#_2-10-依赖注入的基本原则","children":[]},{"level":2,"title":"2.11 依赖注入有什么优势","slug":"_2-11-依赖注入有什么优势","link":"#_2-11-依赖注入有什么优势","children":[]},{"level":2,"title":"2.12 有哪些不同类型的依赖注入实现方式？","slug":"_2-12-有哪些不同类型的依赖注入实现方式","link":"#_2-12-有哪些不同类型的依赖注入实现方式","children":[]},{"level":2,"title":"2.13 构造器依赖注入和 Setter方法注入的区别","slug":"_2-13-构造器依赖注入和-setter方法注入的区别","link":"#_2-13-构造器依赖注入和-setter方法注入的区别","children":[]},{"level":2,"title":"3. Spring Beans","slug":"_3-spring-beans","link":"#_3-spring-beans","children":[]},{"level":2,"title":"3.1 什么是Spring beans？","slug":"_3-1-什么是spring-beans","link":"#_3-1-什么是spring-beans","children":[]},{"level":2,"title":"3.2 一个 Spring Bean 定义 包含什么？","slug":"_3-2-一个-spring-bean-定义-包含什么","link":"#_3-2-一个-spring-bean-定义-包含什么","children":[]},{"level":2,"title":"3.3 如何给Spring 容器提供配置元数据？Spring有几种配置方式","slug":"_3-3-如何给spring-容器提供配置元数据-spring有几种配置方式","link":"#_3-3-如何给spring-容器提供配置元数据-spring有几种配置方式","children":[]},{"level":2,"title":"3.4 Spring配置文件包含了哪些信息","slug":"_3-4-spring配置文件包含了哪些信息","link":"#_3-4-spring配置文件包含了哪些信息","children":[]},{"level":2,"title":"3.5 Spring基于xml注入bean的几种方式","slug":"_3-5-spring基于xml注入bean的几种方式","link":"#_3-5-spring基于xml注入bean的几种方式","children":[]},{"level":2,"title":"3.6 你怎样定义类的作用域？","slug":"_3-6-你怎样定义类的作用域","link":"#_3-6-你怎样定义类的作用域","children":[]},{"level":2,"title":"3.7 解释Spring支持的几种bean的作用域","slug":"_3-7-解释spring支持的几种bean的作用域","link":"#_3-7-解释spring支持的几种bean的作用域","children":[]},{"level":2,"title":"3.8 Spring框架中的单例bean是线程安全的吗？","slug":"_3-8-spring框架中的单例bean是线程安全的吗","link":"#_3-8-spring框架中的单例bean是线程安全的吗","children":[]},{"level":2,"title":"3.9 Spring如何处理线程并发问题？","slug":"_3-9-spring如何处理线程并发问题","link":"#_3-9-spring如何处理线程并发问题","children":[]},{"level":2,"title":"3.10解释Spring框架中bean的生命周期","slug":"_3-10解释spring框架中bean的生命周期","link":"#_3-10解释spring框架中bean的生命周期","children":[]},{"level":2,"title":"3.11 哪些是重要的bean生命周期方法？ 你能重载它们吗？","slug":"_3-11-哪些是重要的bean生命周期方法-你能重载它们吗","link":"#_3-11-哪些是重要的bean生命周期方法-你能重载它们吗","children":[]},{"level":2,"title":"3.12 什么是Spring的内部bean？什么是Spring inner beans？","slug":"_3-12-什么是spring的内部bean-什么是spring-inner-beans","link":"#_3-12-什么是spring的内部bean-什么是spring-inner-beans","children":[]},{"level":2,"title":"3.13 什么是bean装配？","slug":"_3-13-什么是bean装配","link":"#_3-13-什么是bean装配","children":[]},{"level":2,"title":"3.14 什么是bean的自动装配？","slug":"_3-14-什么是bean的自动装配","link":"#_3-14-什么是bean的自动装配","children":[]},{"level":2,"title":"3.15 解释不同方式的自动装配，spring 自动装配 bean 有哪些方式？","slug":"_3-15-解释不同方式的自动装配-spring-自动装配-bean-有哪些方式","link":"#_3-15-解释不同方式的自动装配-spring-自动装配-bean-有哪些方式","children":[]},{"level":2,"title":"3.16 使用@Autowired注解自动装配的过程是怎样的？","slug":"_3-16-使用-autowired注解自动装配的过程是怎样的","link":"#_3-16-使用-autowired注解自动装配的过程是怎样的","children":[]},{"level":2,"title":"3.17 自动装配有哪些局限性？","slug":"_3-17-自动装配有哪些局限性","link":"#_3-17-自动装配有哪些局限性","children":[]},{"level":2,"title":"3.18 你可以在Spring中注入一个null 和一个空字符串吗？","slug":"_3-18-你可以在spring中注入一个null-和一个空字符串吗","link":"#_3-18-你可以在spring中注入一个null-和一个空字符串吗","children":[]},{"level":2,"title":"4.Spring注解","slug":"_4-spring注解","link":"#_4-spring注解","children":[]},{"level":2,"title":"4.1 什么是基于Java的Spring注解配置? 给一些注解的例子","slug":"_4-1-什么是基于java的spring注解配置-给一些注解的例子","link":"#_4-1-什么是基于java的spring注解配置-给一些注解的例子","children":[]},{"level":2,"title":"4.2 怎样开启注解装配？","slug":"_4-2-怎样开启注解装配","link":"#_4-2-怎样开启注解装配","children":[]},{"level":2,"title":"4.3 @Component, @Controller, @Repository, @Service 有何区别？","slug":"_4-3-component-controller-repository-service-有何区别","link":"#_4-3-component-controller-repository-service-有何区别","children":[]},{"level":2,"title":"4.4 @Required 注解有什么作用","slug":"_4-4-required-注解有什么作用","link":"#_4-4-required-注解有什么作用","children":[]},{"level":2,"title":"4.5 @Autowired 注解有什么作用","slug":"_4-5-autowired-注解有什么作用","link":"#_4-5-autowired-注解有什么作用","children":[]},{"level":2,"title":"4.6 @Autowired和@Resource之间的区别","slug":"_4-6-autowired和-resource之间的区别","link":"#_4-6-autowired和-resource之间的区别","children":[]},{"level":2,"title":"4.7 @Qualifier 注解有什么作用","slug":"_4-7-qualifier-注解有什么作用","link":"#_4-7-qualifier-注解有什么作用","children":[]},{"level":2,"title":"4.8 @RequestMapping 注解有什么用？","slug":"_4-8-requestmapping-注解有什么用","link":"#_4-8-requestmapping-注解有什么用","children":[]},{"level":2,"title":"5.Spring数据访问","slug":"_5-spring数据访问","link":"#_5-spring数据访问","children":[]},{"level":2,"title":"5.1 解释对象/关系映射集成模块","slug":"_5-1-解释对象-关系映射集成模块","link":"#_5-1-解释对象-关系映射集成模块","children":[]},{"level":2,"title":"5.2 在Spring框架中如何更有效地使用JDBC？","slug":"_5-2-在spring框架中如何更有效地使用jdbc","link":"#_5-2-在spring框架中如何更有效地使用jdbc","children":[]},{"level":2,"title":"5.3 解释JDBC抽象和DAO模块","slug":"_5-3-解释jdbc抽象和dao模块","link":"#_5-3-解释jdbc抽象和dao模块","children":[]},{"level":2,"title":"5.4 spring DAO 有什么用？","slug":"_5-4-spring-dao-有什么用","link":"#_5-4-spring-dao-有什么用","children":[]},{"level":2,"title":"5.5 spring JDBC API 中存在哪些类？","slug":"_5-5-spring-jdbc-api-中存在哪些类","link":"#_5-5-spring-jdbc-api-中存在哪些类","children":[]},{"level":2,"title":"5.6 JdbcTemplate是什么","slug":"_5-6-jdbctemplate是什么","link":"#_5-6-jdbctemplate是什么","children":[]},{"level":2,"title":"5.7 使用Spring通过什么方式访问Hibernate？使用 Spring 访问Hibernate 的方法有哪些？","slug":"_5-7-使用spring通过什么方式访问hibernate-使用-spring-访问hibernate-的方法有哪些","link":"#_5-7-使用spring通过什么方式访问hibernate-使用-spring-访问hibernate-的方法有哪些","children":[]},{"level":2,"title":"5.8 如何通过HibernateDaoSupport将Spring和Hibernate结合起来？","slug":"_5-8-如何通过hibernatedaosupport将spring和hibernate结合起来","link":"#_5-8-如何通过hibernatedaosupport将spring和hibernate结合起来","children":[]},{"level":2,"title":"5.9 Spring支持的事务管理类型， spring 事务实现方式有哪些？","slug":"_5-9-spring支持的事务管理类型-spring-事务实现方式有哪些","link":"#_5-9-spring支持的事务管理类型-spring-事务实现方式有哪些","children":[]},{"level":2,"title":"5.10 Spring事务的实现方式和实现原理","slug":"_5-10-spring事务的实现方式和实现原理","link":"#_5-10-spring事务的实现方式和实现原理","children":[]},{"level":2,"title":"5.11 说一下Spring的事务传播行为","slug":"_5-11-说一下spring的事务传播行为","link":"#_5-11-说一下spring的事务传播行为","children":[]},{"level":2,"title":"5.12 说一下 spring 的事务隔离？","slug":"_5-12-说一下-spring-的事务隔离","link":"#_5-12-说一下-spring-的事务隔离","children":[]},{"level":2,"title":"5.13 Spring框架的事务管理有哪些优点？","slug":"_5-13-spring框架的事务管理有哪些优点","link":"#_5-13-spring框架的事务管理有哪些优点","children":[]},{"level":2,"title":"5.14 你更倾向用那种事务管理类型？","slug":"_5-14-你更倾向用那种事务管理类型","link":"#_5-14-你更倾向用那种事务管理类型","children":[]},{"level":2,"title":"6.Spring面向切面编程(AOP)","slug":"_6-spring面向切面编程-aop","link":"#_6-spring面向切面编程-aop","children":[]},{"level":2,"title":"6.1 什么是AOP","slug":"_6-1-什么是aop","link":"#_6-1-什么是aop","children":[]},{"level":2,"title":"6.2 Spring AOP and AspectJ AOP 有什么区别？AOP 有哪些实现方式？","slug":"_6-2-spring-aop-and-aspectj-aop-有什么区别-aop-有哪些实现方式","link":"#_6-2-spring-aop-and-aspectj-aop-有什么区别-aop-有哪些实现方式","children":[]},{"level":2,"title":"6.4 解释一下Spring AOP里面的几个名词","slug":"_6-4-解释一下spring-aop里面的几个名词","link":"#_6-4-解释一下spring-aop里面的几个名词","children":[]},{"level":2,"title":"6.5 Spring在运行时通知对象","slug":"_6-5-spring在运行时通知对象","link":"#_6-5-spring在运行时通知对象","children":[]},{"level":2,"title":"6.6 Spring只支持方法级别的连接点","slug":"_6-6-spring只支持方法级别的连接点","link":"#_6-6-spring只支持方法级别的连接点","children":[]},{"level":2,"title":"6.7 在Spring AOP 中，关注点和横切关注的区别是什么？在 springaop 中 concern 和 cross-cutting concern 的不同之处","slug":"_6-7-在spring-aop-中-关注点和横切关注的区别是什么-在-springaop-中-concern-和-cross-cutting-concern-的不同之处","link":"#_6-7-在spring-aop-中-关注点和横切关注的区别是什么-在-springaop-中-concern-和-cross-cutting-concern-的不同之处","children":[]},{"level":2,"title":"6.8 Spring通知有哪些类型？","slug":"_6-8-spring通知有哪些类型","link":"#_6-8-spring通知有哪些类型","children":[]},{"level":2,"title":"6.9 什么是切面 Aspect？","slug":"_6-9-什么是切面-aspect","link":"#_6-9-什么是切面-aspect","children":[]},{"level":2,"title":"6.10 解释基于XML Schema方式的切面实现","slug":"_6-10-解释基于xml-schema方式的切面实现","link":"#_6-10-解释基于xml-schema方式的切面实现","children":[]},{"level":2,"title":"6.11解释基于注解的切面实现","slug":"_6-11解释基于注解的切面实现","link":"#_6-11解释基于注解的切面实现","children":[]}],"git":{"createdTime":1693922657000,"updatedTime":1693922657000,"contributors":[{"name":"bincooo","email":"admin@bincooodeiMac.local","commits":1}]},"readingTime":{"minutes":47.82,"words":14346},"filePathRelative":"guide/markdown/Java面试宝典/Spring面试题（75道含答案）.md","localizedDate":"2023年9月5日","excerpt":"<h3> 目录</h3>\\n<ul>\\n<li><a href=\\"#1_Spring_1\\">1. Spring概述</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#11_spring_2\\">1.1 什么是spring?</a></li>\\n<li><a href=\\"#12_Spring_17\\">1.2 Spring的俩大核心概念</a></li>\\n<li><a href=\\"#13_Spring_30\\">1.3 Spring框架的设计目标，设计理念，和核心是什么</a></li>\\n<li><a href=\\"#14_Spring_40\\">1.4 Spring的优缺点是什么？</a></li>\\n<li><a href=\\"#15_Spring_62\\">1.5 Spring有哪些应用场景</a></li>\\n<li><a href=\\"#16_Spring_70\\">1.6 Spring由哪些模块组成？</a></li>\\n<li><a href=\\"#17_Spring__85\\">1.7 Spring 框架中都用到了哪些设计模式？</a></li>\\n<li><a href=\\"#18_spring_context__93\\">1.8 详细讲解一下核心容器（spring context应用上下文) 模块</a></li>\\n<li><a href=\\"#19_Spring_101\\">1.9 Spring框架中有哪些不同类型的事件</a></li>\\n<li><a href=\\"#110_Spring__115\\">1.10 Spring 应用程序有哪些不同组件？</a></li>\\n<li><a href=\\"#111__Spring__123\\">1.11 使用 Spring 有哪些方式？</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#2_SpringIOC_132\\">2. Spring控制反转(IOC)</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#21_Spring_IOC__133\\">2.1 什么是Spring IOC 容器？</a></li>\\n<li><a href=\\"#25_Spring__IOC_188\\">2.5 Spring 的 IOC支持哪些功能</a></li>\\n<li><a href=\\"#26_BeanFactory__ApplicationContext_194\\">2.6 BeanFactory 和 ApplicationContext有什么区别？</a></li>\\n<li><a href=\\"#27_Spring_BeanFactoryApplicationContext_228\\">2.7 Spring 如何设计容器的，BeanFactory和ApplicationContext的关系详解</a></li>\\n<li><a href=\\"#28_ApplicationContext_266\\">2.8 ApplicationContext通常的实现是什么？</a></li>\\n<li><a href=\\"#29_Spring_274\\">2.9 什么是Spring的依赖注入？</a></li>\\n<li><a href=\\"#210__281\\">2.10 依赖注入的基本原则</a></li>\\n<li><a href=\\"#211__287\\">2.11 依赖注入有什么优势</a></li>\\n<li><a href=\\"#212__295\\">2.12 有哪些不同类型的依赖注入实现方式？</a></li>\\n<li><a href=\\"#213__Setter_304\\">2.13 构造器依赖注入和 Setter方法注入的区别</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#3_Spring_Beans_317\\">3. Spring Beans</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#31_Spring_beans_318\\">3.1 什么是Spring beans？</a></li>\\n<li><a href=\\"#32__Spring_Bean___322\\">3.2 一个 Spring Bean 定义 包含什么？</a></li>\\n<li><a href=\\"#33_Spring_Spring_326\\">3.3 如何给Spring 容器提供配置元数据？Spring有几种配置方式</a></li>\\n<li><a href=\\"#34_Spring_332\\">3.4 Spring配置文件包含了哪些信息</a></li>\\n<li><a href=\\"#35_Springxmlbean_335\\">3.5 Spring基于xml注入bean的几种方式</a></li>\\n<li><a href=\\"#36__343\\">3.6 你怎样定义类的作用域？</a></li>\\n<li><a href=\\"#37_Springbean_349\\">3.7 解释Spring支持的几种bean的作用域</a></li>\\n<li><a href=\\"#38_Springbean_363\\">3.8 Spring框架中的单例bean是线程安全的吗？</a></li>\\n<li><a href=\\"#39_Spring_373\\">3.9 Spring如何处理线程并发问题？</a></li>\\n<li><a href=\\"#310Springbean_384\\">3.10解释Spring框架中bean的生命周期</a></li>\\n<li><a href=\\"#311_bean__415\\">3.11 哪些是重要的bean生命周期方法？ 你能重载它们吗？</a></li>\\n<li><a href=\\"#312_SpringbeanSpring_inner_beans_421\\">3.12 什么是Spring的内部bean？什么是Spring inner beans？</a></li>\\n<li><a href=\\"#313_bean_426\\">3.13 什么是bean装配？</a></li>\\n<li><a href=\\"#314_bean_430\\">3.14 什么是bean的自动装配？</a></li>\\n<li><a href=\\"#315_spring__bean__436\\">3.15 解释不同方式的自动装配，spring 自动装配 bean 有哪些方式？</a></li>\\n<li><a href=\\"#316_Autowired_448\\">3.16 使用@Autowired注解自动装配的过程是怎样的？</a></li>\\n<li><a href=\\"#317__458\\">3.17 自动装配有哪些局限性？</a></li>\\n<li><a href=\\"#318_Springnull__464\\">3.18 你可以在Spring中注入一个null 和一个空字符串吗？</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#4Spring_469\\">4.Spring注解</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#41_JavaSpring__470\\">4.1 什么是基于Java的Spring注解配置? 给一些注解的例子</a></li>\\n<li><a href=\\"#42__486\\">4.2 怎样开启注解装配？</a></li>\\n<li><a href=\\"#43_Component_Controller_Repository_Service__490\\">4.3 @Component, @Controller, @Repository, @Service 有何区别？</a></li>\\n<li><a href=\\"#44_Required__501\\">4.4 @Required 注解有什么作用</a></li>\\n<li><a href=\\"#45_Autowired__518\\">4.5 @Autowired 注解有什么作用</a></li>\\n<li><a href=\\"#46_AutowiredResource_536\\">4.6 @Autowired和@Resource之间的区别</a></li>\\n<li><a href=\\"#47_Qualifier__544\\">4.7 @Qualifier 注解有什么作用</a></li>\\n<li><a href=\\"#48_RequestMapping__548\\">4.8 @RequestMapping 注解有什么用？</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#5Spring_556\\">5.Spring数据访问</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#51__557\\">5.1 解释对象/关系映射集成模块</a></li>\\n<li><a href=\\"#52_SpringJDBC_562\\">5.2 在Spring框架中如何更有效地使用JDBC？</a></li>\\n<li><a href=\\"#53_JDBCDAO_567\\">5.3 解释JDBC抽象和DAO模块</a></li>\\n<li><a href=\\"#54_spring_DAO__572\\">5.4 spring DAO 有什么用？</a></li>\\n<li><a href=\\"#55_spring_JDBC_API__577\\">5.5 spring JDBC API 中存在哪些类？</a></li>\\n<li><a href=\\"#56_JdbcTemplate_584\\">5.6 JdbcTemplate是什么</a></li>\\n<li><a href=\\"#57_SpringHibernate_Spring_Hibernate__588\\">5.7 使用Spring通过什么方式访问Hibernate？使用 Spring 访问Hibernate 的方法有哪些？</a></li>\\n<li><a href=\\"#58_HibernateDaoSupportSpringHibernate_593\\">5.8 如何通过HibernateDaoSupport将Spring和Hibernate结合起来？</a></li>\\n<li><a href=\\"#59_Spring_spring__599\\">5.9 Spring支持的事务管理类型， spring 事务实现方式有哪些？</a></li>\\n<li><a href=\\"#510_Spring_604\\">5.10 Spring事务的实现方式和实现原理</a></li>\\n<li><a href=\\"#511_Spring_608\\">5.11 说一下Spring的事务传播行为</a></li>\\n<li><a href=\\"#512__spring__619\\">5.12 说一下 spring 的事务隔离？</a></li>\\n<li><a href=\\"#513_Spring_640\\">5.13 Spring框架的事务管理有哪些优点？</a></li>\\n<li><a href=\\"#514__646\\">5.14 你更倾向用那种事务管理类型？</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#6SpringAOP_654\\">6.Spring面向切面编程(AOP)</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#61_AOP_655\\">6.1 什么是AOP</a></li>\\n<li><a href=\\"#62_Spring_AOP_and_AspectJ_AOP_AOP__663\\">6.2 Spring AOP and AspectJ AOP 有什么区别？AOP 有哪些实现方式？</a></li>\\n<li><a href=\\"#64_Spring_AOP_691\\">6.4 解释一下Spring AOP里面的几个名词</a></li>\\n<li><a href=\\"#65_Spring_714\\">6.5 Spring在运行时通知对象</a></li>\\n<li><a href=\\"#66_Spring_722\\">6.6 Spring只支持方法级别的连接点</a></li>\\n<li><a href=\\"#67_Spring_AOP__springaop__concern__crosscutting_concern__726\\">6.7 在Spring AOP 中，关注点和横切关注的区别是什么？在 springaop 中 concern 和 cross-cutting concern 的不同之处</a></li>\\n<li><a href=\\"#68_Spring_733\\">6.8 Spring通知有哪些类型？</a></li>\\n<li><a href=\\"#69__Aspect_742\\">6.9 什么是切面 Aspect？</a></li>\\n<li><a href=\\"#610_XML_Schema_752\\">6.10 解释基于XML Schema方式的切面实现</a></li>\\n<li><a href=\\"#611_754\\">6.11解释基于注解的切面实现</a></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{i as data};
