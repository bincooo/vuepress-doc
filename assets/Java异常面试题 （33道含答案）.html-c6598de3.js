const l=JSON.parse('{"key":"v-0358bc48","path":"/guide/markdown/Java%E9%9D%A2%E8%AF%95%E5%AE%9D%E5%85%B8/Java%E5%BC%82%E5%B8%B8%E9%9D%A2%E8%AF%95%E9%A2%98%20%EF%BC%8833%E9%81%93%E5%90%AB%E7%AD%94%E6%A1%88%EF%BC%89.html","title":"","lang":"zh-CN","frontmatter":{"description":"目录 一、Java异常架构与异常关键字 1. Java异常简介 2. Java异常架构 1.Throwable 2. Error（错误） 3. Exception（异常） 运行时异常 编译时异常 3. Java异常关键字 二、Java异常处理 1. 声明异常 2. 抛出异常 3. 捕获异常 4. 如何选择异常类型 5. 常见异常处理方式 直接抛出异常 封装异常再抛出 捕获异常 自定义异常 try-catch-finally try-with-resource 三、Java异常常见面试题 1. Error 和 Exception 区别是什么？ 2. 运行时异常和一般异常(受检异常)区别是什么？ 3. JVM 是如何处理异常的？ 4. throw 和 throws 的区别是什么？ 5. final、finally、finalize 有什么区别？ 6. NoClassDefFoundError 和 ClassNotFoundException 区别？ 7. try-catch-finally 中哪个部分可以省略？ 8. try-catch-finally 中，如果 catch 中 return 了，finally 还会执行吗？ 9. 类 ExampleA 继承 Exception，类 ExampleB 继承ExampleA。 10. 常见的 RuntimeException 有哪些？ 11. Java常见异常有哪些 四、Java异常处理最佳实践 1. 在 finally 块中清理资源或者使用 try-with-resource 语句 2. 优先明确的异常 3. 对异常进行文档说明 4. 使用描述性消息抛出异常 5. 优先捕获最具体的异常 6. 不要捕获 Throwable 类 7. 不要忽略异常 8. 不要记录并抛出异常 9. 包装异常时不要抛弃原始的异常 10. 不要使用异常控制程序的流程 11. 使用标准异常 12. 异常会影响性能 13. 总结 五、异常处理-阿里巴巴Java开发手册","head":[["meta",{"property":"og:url","content":"https://www.icu-web.tk/vuepress-doc/guide/markdown/Java%E9%9D%A2%E8%AF%95%E5%AE%9D%E5%85%B8/Java%E5%BC%82%E5%B8%B8%E9%9D%A2%E8%AF%95%E9%A2%98%20%EF%BC%8833%E9%81%93%E5%90%AB%E7%AD%94%E6%A1%88%EF%BC%89.html"}],["meta",{"property":"og:site_name","content":"折戟沉沙、丿"}],["meta",{"property":"og:description","content":"目录 一、Java异常架构与异常关键字 1. Java异常简介 2. Java异常架构 1.Throwable 2. Error（错误） 3. Exception（异常） 运行时异常 编译时异常 3. Java异常关键字 二、Java异常处理 1. 声明异常 2. 抛出异常 3. 捕获异常 4. 如何选择异常类型 5. 常见异常处理方式 直接抛出异常 封装异常再抛出 捕获异常 自定义异常 try-catch-finally try-with-resource 三、Java异常常见面试题 1. Error 和 Exception 区别是什么？ 2. 运行时异常和一般异常(受检异常)区别是什么？ 3. JVM 是如何处理异常的？ 4. throw 和 throws 的区别是什么？ 5. final、finally、finalize 有什么区别？ 6. NoClassDefFoundError 和 ClassNotFoundException 区别？ 7. try-catch-finally 中哪个部分可以省略？ 8. try-catch-finally 中，如果 catch 中 return 了，finally 还会执行吗？ 9. 类 ExampleA 继承 Exception，类 ExampleB 继承ExampleA。 10. 常见的 RuntimeException 有哪些？ 11. Java常见异常有哪些 四、Java异常处理最佳实践 1. 在 finally 块中清理资源或者使用 try-with-resource 语句 2. 优先明确的异常 3. 对异常进行文档说明 4. 使用描述性消息抛出异常 5. 优先捕获最具体的异常 6. 不要捕获 Throwable 类 7. 不要忽略异常 8. 不要记录并抛出异常 9. 包装异常时不要抛弃原始的异常 10. 不要使用异常控制程序的流程 11. 使用标准异常 12. 异常会影响性能 13. 总结 五、异常处理-阿里巴巴Java开发手册"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-05T14:04:17.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-05T14:04:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-05T14:04:17.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":2,"title":"一、Java异常架构与异常关键字","slug":"一、java异常架构与异常关键字","link":"#一、java异常架构与异常关键字","children":[]},{"level":2,"title":"1. Java异常简介","slug":"_1-java异常简介","link":"#_1-java异常简介","children":[]},{"level":2,"title":"2. Java异常架构","slug":"_2-java异常架构","link":"#_2-java异常架构","children":[{"level":3,"title":"1.Throwable","slug":"_1-throwable","link":"#_1-throwable","children":[]},{"level":3,"title":"2. Error（错误）","slug":"_2-error-错误","link":"#_2-error-错误","children":[]},{"level":3,"title":"3. Exception（异常）","slug":"_3-exception-异常","link":"#_3-exception-异常","children":[]}]},{"level":2,"title":"3. Java异常关键字","slug":"_3-java异常关键字","link":"#_3-java异常关键字","children":[]},{"level":2,"title":"二、Java异常处理","slug":"二、java异常处理","link":"#二、java异常处理","children":[]},{"level":2,"title":"1. 声明异常","slug":"_1-声明异常","link":"#_1-声明异常","children":[]},{"level":2,"title":"2. 抛出异常","slug":"_2-抛出异常","link":"#_2-抛出异常","children":[]},{"level":2,"title":"3. 捕获异常","slug":"_3-捕获异常","link":"#_3-捕获异常","children":[]},{"level":2,"title":"4. 如何选择异常类型","slug":"_4-如何选择异常类型","link":"#_4-如何选择异常类型","children":[]},{"level":2,"title":"5. 常见异常处理方式","slug":"_5-常见异常处理方式","link":"#_5-常见异常处理方式","children":[]},{"level":2,"title":"三、Java异常常见面试题","slug":"三、java异常常见面试题","link":"#三、java异常常见面试题","children":[]},{"level":2,"title":"1. Error 和 Exception 区别是什么？","slug":"_1-error-和-exception-区别是什么","link":"#_1-error-和-exception-区别是什么","children":[]},{"level":2,"title":"2. 运行时异常和一般异常(受检异常)区别是什么？","slug":"_2-运行时异常和一般异常-受检异常-区别是什么","link":"#_2-运行时异常和一般异常-受检异常-区别是什么","children":[]},{"level":2,"title":"3. JVM 是如何处理异常的？","slug":"_3-jvm-是如何处理异常的","link":"#_3-jvm-是如何处理异常的","children":[]},{"level":2,"title":"4. throw 和 throws 的区别是什么？","slug":"_4-throw-和-throws-的区别是什么","link":"#_4-throw-和-throws-的区别是什么","children":[]},{"level":2,"title":"5. final、finally、finalize 有什么区别？","slug":"_5-final、finally、finalize-有什么区别","link":"#_5-final、finally、finalize-有什么区别","children":[]},{"level":2,"title":"6. NoClassDefFoundError 和 ClassNotFoundException 区别？","slug":"_6-noclassdeffounderror-和-classnotfoundexception-区别","link":"#_6-noclassdeffounderror-和-classnotfoundexception-区别","children":[]},{"level":2,"title":"7. try-catch-finally 中哪个部分可以省略？","slug":"_7-try-catch-finally-中哪个部分可以省略","link":"#_7-try-catch-finally-中哪个部分可以省略","children":[]},{"level":2,"title":"8. try-catch-finally 中，如果 catch 中 return 了，finally 还会执行吗？","slug":"_8-try-catch-finally-中-如果-catch-中-return-了-finally-还会执行吗","link":"#_8-try-catch-finally-中-如果-catch-中-return-了-finally-还会执行吗","children":[]},{"level":2,"title":"9. 类 ExampleA 继承 Exception，类 ExampleB 继承ExampleA。","slug":"_9-类-examplea-继承-exception-类-exampleb-继承examplea。","link":"#_9-类-examplea-继承-exception-类-exampleb-继承examplea。","children":[]},{"level":2,"title":"10. 常见的 RuntimeException 有哪些？","slug":"_10-常见的-runtimeexception-有哪些","link":"#_10-常见的-runtimeexception-有哪些","children":[]},{"level":2,"title":"11. Java常见异常有哪些","slug":"_11-java常见异常有哪些","link":"#_11-java常见异常有哪些","children":[]},{"level":2,"title":"四、Java异常处理最佳实践","slug":"四、java异常处理最佳实践","link":"#四、java异常处理最佳实践","children":[]},{"level":2,"title":"1. 在 finally 块中清理资源或者使用 try-with-resource 语句","slug":"_1-在-finally-块中清理资源或者使用-try-with-resource-语句","link":"#_1-在-finally-块中清理资源或者使用-try-with-resource-语句","children":[]},{"level":2,"title":"2. 优先明确的异常","slug":"_2-优先明确的异常","link":"#_2-优先明确的异常","children":[]},{"level":2,"title":"3. 对异常进行文档说明","slug":"_3-对异常进行文档说明","link":"#_3-对异常进行文档说明","children":[]},{"level":2,"title":"4. 使用描述性消息抛出异常","slug":"_4-使用描述性消息抛出异常","link":"#_4-使用描述性消息抛出异常","children":[]},{"level":2,"title":"5. 优先捕获最具体的异常","slug":"_5-优先捕获最具体的异常","link":"#_5-优先捕获最具体的异常","children":[]},{"level":2,"title":"6. 不要捕获 Throwable 类","slug":"_6-不要捕获-throwable-类","link":"#_6-不要捕获-throwable-类","children":[]},{"level":2,"title":"7. 不要忽略异常","slug":"_7-不要忽略异常","link":"#_7-不要忽略异常","children":[]},{"level":2,"title":"8. 不要记录并抛出异常","slug":"_8-不要记录并抛出异常","link":"#_8-不要记录并抛出异常","children":[]},{"level":2,"title":"9. 包装异常时不要抛弃原始的异常","slug":"_9-包装异常时不要抛弃原始的异常","link":"#_9-包装异常时不要抛弃原始的异常","children":[]},{"level":2,"title":"10. 不要使用异常控制程序的流程","slug":"_10-不要使用异常控制程序的流程","link":"#_10-不要使用异常控制程序的流程","children":[]},{"level":2,"title":"11. 使用标准异常","slug":"_11-使用标准异常","link":"#_11-使用标准异常","children":[]},{"level":2,"title":"12. 异常会影响性能","slug":"_12-异常会影响性能","link":"#_12-异常会影响性能","children":[]},{"level":2,"title":"13. 总结","slug":"_13-总结","link":"#_13-总结","children":[]},{"level":2,"title":"五、异常处理-阿里巴巴Java开发手册","slug":"五、异常处理-阿里巴巴java开发手册","link":"#五、异常处理-阿里巴巴java开发手册","children":[]}],"git":{"createdTime":1693922657000,"updatedTime":1693922657000,"contributors":[{"name":"bincooo","email":"admin@bincooodeiMac.local","commits":1}]},"readingTime":{"minutes":36.85,"words":11055},"filePathRelative":"guide/markdown/Java面试宝典/Java异常面试题 （33道含答案）.md","localizedDate":"2023年9月5日","excerpt":"<h3> 目录</h3>\\n<ul>\\n<li><a href=\\"#Java_1\\">一、Java异常架构与异常关键字</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#1_Java_2\\">1. Java异常简介</a></li>\\n<li><a href=\\"#2_Java_8\\">2. Java异常架构</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#1Throwable_9\\">1.Throwable</a></li>\\n<li><a href=\\"#2_Error_15\\">2. Error（错误）</a></li>\\n<li><a href=\\"#3_Exception_20\\">3. Exception（异常）</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#_23\\">运行时异常</a></li>\\n<li><a href=\\"#_37\\">编译时异常</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li><a href=\\"#3_Java_58\\">3. Java异常关键字</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#Java_69\\">二、Java异常处理</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#1__79\\">1. 声明异常</a></li>\\n<li><a href=\\"#2__87\\">2. 抛出异常</a></li>\\n<li><a href=\\"#3__92\\">3. 捕获异常</a></li>\\n<li><a href=\\"#4__97\\">4. 如何选择异常类型</a></li>\\n<li><a href=\\"#5__101\\">5. 常见异常处理方式</a></li>\\n<li>\\n<ul>\\n<li>\\n<ul>\\n<li>\\n<ul>\\n<li><a href=\\"#_102\\">直接抛出异常</a></li>\\n<li><a href=\\"#_116\\">封装异常再抛出</a></li>\\n<li><a href=\\"#_131\\">捕获异常</a></li>\\n<li><a href=\\"#_156\\">自定义异常</a></li>\\n<li><a href=\\"#trycatchfinally_168\\">try-catch-finally</a></li>\\n<li><a href=\\"#trywithresource_218\\">try-with-resource</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li><a href=\\"#Java_235\\">三、Java异常常见面试题</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#1_Error__Exception__236\\">1. Error 和 Exception 区别是什么？</a></li>\\n<li><a href=\\"#2__243\\">2. 运行时异常和一般异常(受检异常)区别是什么？</a></li>\\n<li><a href=\\"#3_JVM__251\\">3. JVM 是如何处理异常的？</a></li>\\n<li><a href=\\"#4_throw__throws__261\\">4. throw 和 throws 的区别是什么？</a></li>\\n<li><a href=\\"#5_finalfinallyfinalize__272\\">5. final、finally、finalize 有什么区别？</a></li>\\n<li><a href=\\"#6_NoClassDefFoundError__ClassNotFoundException__280\\">6. NoClassDefFoundError 和 ClassNotFoundException 区别？</a></li>\\n<li><a href=\\"#7_trycatchfinally__290\\">7. try-catch-finally 中哪个部分可以省略？</a></li>\\n<li><a href=\\"#8_trycatchfinally__catch__return_finally__305\\">8. try-catch-finally 中，如果 catch 中 return 了，finally 还会执行吗？</a></li>\\n<li><a href=\\"#9__ExampleA__Exception_ExampleB_ExampleA_354\\">9. 类 ExampleA 继承 Exception，类 ExampleB 继承ExampleA。</a></li>\\n<li><a href=\\"#10__RuntimeException__397\\">10. 常见的 RuntimeException 有哪些？</a></li>\\n<li><a href=\\"#11_Java_404\\">11. Java常见异常有哪些</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#Java_436\\">四、Java异常处理最佳实践</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#1__finally__trywithresource__442\\">1. 在 finally 块中清理资源或者使用 try-with-resource 语句</a></li>\\n<li><a href=\\"#2__506\\">2. 优先明确的异常</a></li>\\n<li><a href=\\"#3__522\\">3. 对异常进行文档说明</a></li>\\n<li><a href=\\"#4__532\\">4. 使用描述性消息抛出异常</a></li>\\n<li><a href=\\"#5__548\\">5. 优先捕获最具体的异常</a></li>\\n<li><a href=\\"#6__Throwable__570\\">6. 不要捕获 Throwable 类</a></li>\\n<li><a href=\\"#7__586\\">7. 不要忽略异常</a></li>\\n<li><a href=\\"#8__612\\">8. 不要记录并抛出异常</a></li>\\n<li><a href=\\"#9__647\\">9. 包装异常时不要抛弃原始的异常</a></li>\\n<li><a href=\\"#10__663\\">10. 不要使用异常控制程序的流程</a></li>\\n<li><a href=\\"#11__667\\">11. 使用标准异常</a></li>\\n<li><a href=\\"#12__672\\">12. 异常会影响性能</a></li>\\n<li><a href=\\"#13__681\\">13. 总结</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#Java_688\\">五、异常处理-阿里巴巴Java开发手册</a></li>\\n</ul>","autoDesc":true}');export{l as data};
