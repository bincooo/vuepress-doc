const l=JSON.parse('{"key":"v-1cb869b4","path":"/guide/markdown/Java%E9%9D%A2%E8%AF%95%E5%AE%9D%E5%85%B8/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8891%E9%81%93%E5%90%AB%E7%AD%94%E6%A1%88%EF%BC%89.html","title":"","lang":"zh-CN","frontmatter":{"description":"目录 一、Java概述 1. 何为编程 2. 什么是Java 3. jdk1.5之后的三大版本 4. Jdk和Jre和JVM的区别 5. 什么是跨平台性？原理是什么 6. Java语言有哪些特点 7. 什么是字节码？采用字节码的最大好处是什么 8. 什么是Java程序的主类？应用程序和小程序的主类有何不同？ 9. Java应用程序与小程序之间有那些差别？ 10. Java和C++的区别 11. Oracle JDK 和 OpenJDK 的对比 二、基础语法 数据类型 12. Java有哪些数据类型 13. switch 是否能作用在 byte 上，是否能作用在 long 上，是否能作用在 String上 14. 用最有效率的方法计算 2 乘以 8 15. Math.round(11.5) 等于多少？Math.round(-11.5)等于多少 16. float f=3.4;是否正确 17. short s1 = 1; s1 = s1 + 1;有错吗?short s1 = 1; s1 += 1;有错吗 编码 18. Java语言采用何种编码方案？有何特点？ 注释 19. 什么Java注释 访问修饰符 20. 访问修饰符 public,private,protected,以及不写（默认）时的区别 运算符 21. &amp;和&amp;&amp;的区别 关键字 22. Java 有没有 goto 23. final 有什么用？ 24. final finally finalize区别 25. this关键字的用法 26. super关键字的用法 27. this与super的区别 28. static存在的主要意义 29. static的独特之处 30. static应用场景 31. static注意事项 流程控制语句 32. break ,continue ,return 的区别及作用 33. 在 Java 中，如何跳出当前的多重嵌套循环 三、面向对象 面向对象概述 34. 面向对象和面向过程的区别 面向对象三大特性 35. 面向对象的特征有哪些方面 36. 什么是多态机制？Java语言是如何实现多态的？ 37. 面向对象五大基本原则是什么（可选） 类与接口 38. 抽象类和接口的对比 39. 普通类和抽象类有哪些区别？ 40. 抽象类能使用 final 修饰吗？ 41. 创建一个对象用什么关键字？对象实例与对象引用有何不同？ 变量与方法 42. 成员变量与局部变量的区别有哪些 43. 在Java中定义一个不做事且没有参数的构造方法的作用 44. 在调用子类构造方法之前会先调用父类没有参数的构造方法，其目的是？ 45. 一个类的构造方法的作用是什么？若一个类没有声明构造方法，改程序能正确执行吗？为什么？ 46. 构造方法有哪些特性？ 47. 静态变量和实例变量区别 48. 静态变量与普通变量区别 49. 静态方法和实例方法有何不同？ 50. 在一个静态方法内调用一个非静态成员为什么是非法的？ 51. 什么是方法的返回值？返回值的作用是什么？ 内部类 52. 什么是内部类？ 53. 内部类的分类有哪些 54. 内部类的优点 55. 内部类有哪些应用场景 56. 局部内部类和匿名内部类访问局部变量的时候，为什么变量必须要加上final？ 57. 内部类相关，看程序说出运行结果 重写与重载 58. 构造器（constructor）是否可被重写（override） 59. 重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？ 对象相等判断 60. == 和 equals 的区别是什么 61. hashCode 与 equals (重要) 62. 对象的相等与指向他们的引用相等，两者有什么不同？ 值传递 63. 当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递 64. 为什么 Java 中只有值传递 65. 值传递和引用传递有什么区别 Java包 66. JDK 中常用的包有哪些 67. import java和javax有什么区别 四、IO流 68. java 中 IO 流分为几种? 69. BIO,NIO,AIO 有什么区别? 70. Files的常用方法都有哪些？ 五、反射 71. 什么是反射机制？ 72. 反射机制优缺点 73. 反射机制的应用场景有哪些？ 74. Java获取反射的三种方法 六、常用API String相关 75. 字符型常量和字符串常量的区别 76. 什么是字符串常量池？ 77. String 是最基本的数据类型吗 78. String有哪些特性 79. String为什么是不可变的吗？ 80. String真的是不可变的吗？ 81. 是否可以继承 String 类 82. String str=\\"i\\"与 String str=new String(“i”)一样吗？ 83. String s = new String(“xyz”);创建了几个字符串对象 84. 如何将字符串反转？ 85. 数组有没有 length()方法？String 有没有 length()方法 86. String 类的常用方法都有那些？ 87. 在使用 HashMap 的时候，用 String 做 key 有什么好处？ 88. String和StringBuffer、StringBuilder的区别是什么？String为什么是不可变的 包装类相关 89. 自动装箱与拆箱 90. int 和 Integer 有什么区别 91. Integer a= 127 与 Integer b = 127相等吗","head":[["meta",{"property":"og:url","content":"https://www.icu-web.tk/vuepress-doc/guide/markdown/Java%E9%9D%A2%E8%AF%95%E5%AE%9D%E5%85%B8/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8891%E9%81%93%E5%90%AB%E7%AD%94%E6%A1%88%EF%BC%89.html"}],["meta",{"property":"og:site_name","content":"折戟沉沙、丿"}],["meta",{"property":"og:description","content":"目录 一、Java概述 1. 何为编程 2. 什么是Java 3. jdk1.5之后的三大版本 4. Jdk和Jre和JVM的区别 5. 什么是跨平台性？原理是什么 6. Java语言有哪些特点 7. 什么是字节码？采用字节码的最大好处是什么 8. 什么是Java程序的主类？应用程序和小程序的主类有何不同？ 9. Java应用程序与小程序之间有那些差别？ 10. Java和C++的区别 11. Oracle JDK 和 OpenJDK 的对比 二、基础语法 数据类型 12. Java有哪些数据类型 13. switch 是否能作用在 byte 上，是否能作用在 long 上，是否能作用在 String上 14. 用最有效率的方法计算 2 乘以 8 15. Math.round(11.5) 等于多少？Math.round(-11.5)等于多少 16. float f=3.4;是否正确 17. short s1 = 1; s1 = s1 + 1;有错吗?short s1 = 1; s1 += 1;有错吗 编码 18. Java语言采用何种编码方案？有何特点？ 注释 19. 什么Java注释 访问修饰符 20. 访问修饰符 public,private,protected,以及不写（默认）时的区别 运算符 21. &amp;和&amp;&amp;的区别 关键字 22. Java 有没有 goto 23. final 有什么用？ 24. final finally finalize区别 25. this关键字的用法 26. super关键字的用法 27. this与super的区别 28. static存在的主要意义 29. static的独特之处 30. static应用场景 31. static注意事项 流程控制语句 32. break ,continue ,return 的区别及作用 33. 在 Java 中，如何跳出当前的多重嵌套循环 三、面向对象 面向对象概述 34. 面向对象和面向过程的区别 面向对象三大特性 35. 面向对象的特征有哪些方面 36. 什么是多态机制？Java语言是如何实现多态的？ 37. 面向对象五大基本原则是什么（可选） 类与接口 38. 抽象类和接口的对比 39. 普通类和抽象类有哪些区别？ 40. 抽象类能使用 final 修饰吗？ 41. 创建一个对象用什么关键字？对象实例与对象引用有何不同？ 变量与方法 42. 成员变量与局部变量的区别有哪些 43. 在Java中定义一个不做事且没有参数的构造方法的作用 44. 在调用子类构造方法之前会先调用父类没有参数的构造方法，其目的是？ 45. 一个类的构造方法的作用是什么？若一个类没有声明构造方法，改程序能正确执行吗？为什么？ 46. 构造方法有哪些特性？ 47. 静态变量和实例变量区别 48. 静态变量与普通变量区别 49. 静态方法和实例方法有何不同？ 50. 在一个静态方法内调用一个非静态成员为什么是非法的？ 51. 什么是方法的返回值？返回值的作用是什么？ 内部类 52. 什么是内部类？ 53. 内部类的分类有哪些 54. 内部类的优点 55. 内部类有哪些应用场景 56. 局部内部类和匿名内部类访问局部变量的时候，为什么变量必须要加上final？ 57. 内部类相关，看程序说出运行结果 重写与重载 58. 构造器（constructor）是否可被重写（override） 59. 重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？ 对象相等判断 60. == 和 equals 的区别是什么 61. hashCode 与 equals (重要) 62. 对象的相等与指向他们的引用相等，两者有什么不同？ 值传递 63. 当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递 64. 为什么 Java 中只有值传递 65. 值传递和引用传递有什么区别 Java包 66. JDK 中常用的包有哪些 67. import java和javax有什么区别 四、IO流 68. java 中 IO 流分为几种? 69. BIO,NIO,AIO 有什么区别? 70. Files的常用方法都有哪些？ 五、反射 71. 什么是反射机制？ 72. 反射机制优缺点 73. 反射机制的应用场景有哪些？ 74. Java获取反射的三种方法 六、常用API String相关 75. 字符型常量和字符串常量的区别 76. 什么是字符串常量池？ 77. String 是最基本的数据类型吗 78. String有哪些特性 79. String为什么是不可变的吗？ 80. String真的是不可变的吗？ 81. 是否可以继承 String 类 82. String str=\\"i\\"与 String str=new String(“i”)一样吗？ 83. String s = new String(“xyz”);创建了几个字符串对象 84. 如何将字符串反转？ 85. 数组有没有 length()方法？String 有没有 length()方法 86. String 类的常用方法都有那些？ 87. 在使用 HashMap 的时候，用 String 做 key 有什么好处？ 88. String和StringBuffer、StringBuilder的区别是什么？String为什么是不可变的 包装类相关 89. 自动装箱与拆箱 90. int 和 Integer 有什么区别 91. Integer a= 127 与 Integer b = 127相等吗"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-05T14:04:17.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-05T14:04:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-05T14:04:17.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":2,"title":"一、Java概述","slug":"一、java概述","link":"#一、java概述","children":[]},{"level":2,"title":"1. 何为编程","slug":"_1-何为编程","link":"#_1-何为编程","children":[]},{"level":2,"title":"2. 什么是Java","slug":"_2-什么是java","link":"#_2-什么是java","children":[]},{"level":2,"title":"3. jdk1.5之后的三大版本","slug":"_3-jdk1-5之后的三大版本","link":"#_3-jdk1-5之后的三大版本","children":[]},{"level":2,"title":"4. Jdk和Jre和JVM的区别","slug":"_4-jdk和jre和jvm的区别","link":"#_4-jdk和jre和jvm的区别","children":[]},{"level":2,"title":"5. 什么是跨平台性？原理是什么","slug":"_5-什么是跨平台性-原理是什么","link":"#_5-什么是跨平台性-原理是什么","children":[]},{"level":2,"title":"6. Java语言有哪些特点","slug":"_6-java语言有哪些特点","link":"#_6-java语言有哪些特点","children":[]},{"level":2,"title":"7. 什么是字节码？采用字节码的最大好处是什么","slug":"_7-什么是字节码-采用字节码的最大好处是什么","link":"#_7-什么是字节码-采用字节码的最大好处是什么","children":[]},{"level":2,"title":"8. 什么是Java程序的主类？应用程序和小程序的主类有何不同？","slug":"_8-什么是java程序的主类-应用程序和小程序的主类有何不同","link":"#_8-什么是java程序的主类-应用程序和小程序的主类有何不同","children":[]},{"level":2,"title":"9. Java应用程序与小程序之间有那些差别？","slug":"_9-java应用程序与小程序之间有那些差别","link":"#_9-java应用程序与小程序之间有那些差别","children":[]},{"level":2,"title":"10. Java和C++的区别","slug":"_10-java和c-的区别","link":"#_10-java和c-的区别","children":[]},{"level":2,"title":"11. Oracle JDK 和 OpenJDK 的对比","slug":"_11-oracle-jdk-和-openjdk-的对比","link":"#_11-oracle-jdk-和-openjdk-的对比","children":[]},{"level":2,"title":"二、基础语法","slug":"二、基础语法","link":"#二、基础语法","children":[]},{"level":2,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[{"level":3,"title":"12. Java有哪些数据类型","slug":"_12-java有哪些数据类型","link":"#_12-java有哪些数据类型","children":[]},{"level":3,"title":"13. switch 是否能作用在 byte 上，是否能作用在 long 上，是否能作用在 String上","slug":"_13-switch-是否能作用在-byte-上-是否能作用在-long-上-是否能作用在-string上","link":"#_13-switch-是否能作用在-byte-上-是否能作用在-long-上-是否能作用在-string上","children":[]},{"level":3,"title":"14. 用最有效率的方法计算 2 乘以 8","slug":"_14-用最有效率的方法计算-2-乘以-8","link":"#_14-用最有效率的方法计算-2-乘以-8","children":[]},{"level":3,"title":"15. Math.round(11.5) 等于多少？Math.round(-11.5)等于多少","slug":"_15-math-round-11-5-等于多少-math-round-11-5-等于多少","link":"#_15-math-round-11-5-等于多少-math-round-11-5-等于多少","children":[]},{"level":3,"title":"16. float f=3.4;是否正确","slug":"_16-float-f-3-4-是否正确","link":"#_16-float-f-3-4-是否正确","children":[]},{"level":3,"title":"17. short s1 = 1; s1 = s1 + 1;有错吗?short s1 = 1; s1 += 1;有错吗","slug":"_17-short-s1-1-s1-s1-1-有错吗-short-s1-1-s1-1-有错吗","link":"#_17-short-s1-1-s1-s1-1-有错吗-short-s1-1-s1-1-有错吗","children":[]}]},{"level":2,"title":"编码","slug":"编码","link":"#编码","children":[{"level":3,"title":"18. Java语言采用何种编码方案？有何特点？","slug":"_18-java语言采用何种编码方案-有何特点","link":"#_18-java语言采用何种编码方案-有何特点","children":[]}]},{"level":2,"title":"注释","slug":"注释","link":"#注释","children":[{"level":3,"title":"19. 什么Java注释","slug":"_19-什么java注释","link":"#_19-什么java注释","children":[]}]},{"level":2,"title":"访问修饰符","slug":"访问修饰符","link":"#访问修饰符","children":[{"level":3,"title":"20. 访问修饰符 public,private,protected,以及不写（默认）时的区别","slug":"_20-访问修饰符-public-private-protected-以及不写-默认-时的区别","link":"#_20-访问修饰符-public-private-protected-以及不写-默认-时的区别","children":[]}]},{"level":2,"title":"运算符","slug":"运算符","link":"#运算符","children":[{"level":3,"title":"21. &和&&的区别","slug":"_21-和-的区别","link":"#_21-和-的区别","children":[]}]},{"level":2,"title":"关键字","slug":"关键字","link":"#关键字","children":[{"level":3,"title":"22. Java 有没有 goto","slug":"_22-java-有没有-goto","link":"#_22-java-有没有-goto","children":[]},{"level":3,"title":"23. final 有什么用？","slug":"_23-final-有什么用","link":"#_23-final-有什么用","children":[]},{"level":3,"title":"24. final finally finalize区别","slug":"_24-final-finally-finalize区别","link":"#_24-final-finally-finalize区别","children":[]},{"level":3,"title":"25. this关键字的用法","slug":"_25-this关键字的用法","link":"#_25-this关键字的用法","children":[]},{"level":3,"title":"26. super关键字的用法","slug":"_26-super关键字的用法","link":"#_26-super关键字的用法","children":[]},{"level":3,"title":"27. this与super的区别","slug":"_27-this与super的区别","link":"#_27-this与super的区别","children":[]},{"level":3,"title":"28. static存在的主要意义","slug":"_28-static存在的主要意义","link":"#_28-static存在的主要意义","children":[]},{"level":3,"title":"29. static的独特之处","slug":"_29-static的独特之处","link":"#_29-static的独特之处","children":[]},{"level":3,"title":"30. static应用场景","slug":"_30-static应用场景","link":"#_30-static应用场景","children":[]},{"level":3,"title":"31. static注意事项","slug":"_31-static注意事项","link":"#_31-static注意事项","children":[]}]},{"level":2,"title":"流程控制语句","slug":"流程控制语句","link":"#流程控制语句","children":[{"level":3,"title":"32. break ,continue ,return 的区别及作用","slug":"_32-break-continue-return-的区别及作用","link":"#_32-break-continue-return-的区别及作用","children":[]},{"level":3,"title":"33. 在 Java 中，如何跳出当前的多重嵌套循环","slug":"_33-在-java-中-如何跳出当前的多重嵌套循环","link":"#_33-在-java-中-如何跳出当前的多重嵌套循环","children":[]}]},{"level":2,"title":"三、面向对象","slug":"三、面向对象","link":"#三、面向对象","children":[]},{"level":2,"title":"面向对象概述","slug":"面向对象概述","link":"#面向对象概述","children":[{"level":3,"title":"34. 面向对象和面向过程的区别","slug":"_34-面向对象和面向过程的区别","link":"#_34-面向对象和面向过程的区别","children":[]}]},{"level":2,"title":"面向对象三大特性","slug":"面向对象三大特性","link":"#面向对象三大特性","children":[{"level":3,"title":"35. 面向对象的特征有哪些方面","slug":"_35-面向对象的特征有哪些方面","link":"#_35-面向对象的特征有哪些方面","children":[]},{"level":3,"title":"36. 什么是多态机制？Java语言是如何实现多态的？","slug":"_36-什么是多态机制-java语言是如何实现多态的","link":"#_36-什么是多态机制-java语言是如何实现多态的","children":[]},{"level":3,"title":"37. 面向对象五大基本原则是什么（可选）","slug":"_37-面向对象五大基本原则是什么-可选","link":"#_37-面向对象五大基本原则是什么-可选","children":[]}]},{"level":2,"title":"类与接口","slug":"类与接口","link":"#类与接口","children":[{"level":3,"title":"38. 抽象类和接口的对比","slug":"_38-抽象类和接口的对比","link":"#_38-抽象类和接口的对比","children":[]},{"level":3,"title":"39. 普通类和抽象类有哪些区别？","slug":"_39-普通类和抽象类有哪些区别","link":"#_39-普通类和抽象类有哪些区别","children":[]},{"level":3,"title":"40. 抽象类能使用 final 修饰吗？","slug":"_40-抽象类能使用-final-修饰吗","link":"#_40-抽象类能使用-final-修饰吗","children":[]},{"level":3,"title":"41. 创建一个对象用什么关键字？对象实例与对象引用有何不同？","slug":"_41-创建一个对象用什么关键字-对象实例与对象引用有何不同","link":"#_41-创建一个对象用什么关键字-对象实例与对象引用有何不同","children":[]}]},{"level":2,"title":"变量与方法","slug":"变量与方法","link":"#变量与方法","children":[{"level":3,"title":"42. 成员变量与局部变量的区别有哪些","slug":"_42-成员变量与局部变量的区别有哪些","link":"#_42-成员变量与局部变量的区别有哪些","children":[]},{"level":3,"title":"43. 在Java中定义一个不做事且没有参数的构造方法的作用","slug":"_43-在java中定义一个不做事且没有参数的构造方法的作用","link":"#_43-在java中定义一个不做事且没有参数的构造方法的作用","children":[]},{"level":3,"title":"44. 在调用子类构造方法之前会先调用父类没有参数的构造方法，其目的是？","slug":"_44-在调用子类构造方法之前会先调用父类没有参数的构造方法-其目的是","link":"#_44-在调用子类构造方法之前会先调用父类没有参数的构造方法-其目的是","children":[]},{"level":3,"title":"45. 一个类的构造方法的作用是什么？若一个类没有声明构造方法，改程序能正确执行吗？为什么？","slug":"_45-一个类的构造方法的作用是什么-若一个类没有声明构造方法-改程序能正确执行吗-为什么","link":"#_45-一个类的构造方法的作用是什么-若一个类没有声明构造方法-改程序能正确执行吗-为什么","children":[]},{"level":3,"title":"46. 构造方法有哪些特性？","slug":"_46-构造方法有哪些特性","link":"#_46-构造方法有哪些特性","children":[]},{"level":3,"title":"47. 静态变量和实例变量区别","slug":"_47-静态变量和实例变量区别","link":"#_47-静态变量和实例变量区别","children":[]},{"level":3,"title":"48. 静态变量与普通变量区别","slug":"_48-静态变量与普通变量区别","link":"#_48-静态变量与普通变量区别","children":[]},{"level":3,"title":"49. 静态方法和实例方法有何不同？","slug":"_49-静态方法和实例方法有何不同","link":"#_49-静态方法和实例方法有何不同","children":[]},{"level":3,"title":"50. 在一个静态方法内调用一个非静态成员为什么是非法的？","slug":"_50-在一个静态方法内调用一个非静态成员为什么是非法的","link":"#_50-在一个静态方法内调用一个非静态成员为什么是非法的","children":[]},{"level":3,"title":"51. 什么是方法的返回值？返回值的作用是什么？","slug":"_51-什么是方法的返回值-返回值的作用是什么","link":"#_51-什么是方法的返回值-返回值的作用是什么","children":[]}]},{"level":2,"title":"内部类","slug":"内部类","link":"#内部类","children":[{"level":3,"title":"52. 什么是内部类？","slug":"_52-什么是内部类","link":"#_52-什么是内部类","children":[]},{"level":3,"title":"53. 内部类的分类有哪些","slug":"_53-内部类的分类有哪些","link":"#_53-内部类的分类有哪些","children":[]},{"level":3,"title":"54. 内部类的优点","slug":"_54-内部类的优点","link":"#_54-内部类的优点","children":[]},{"level":3,"title":"55. 内部类有哪些应用场景","slug":"_55-内部类有哪些应用场景","link":"#_55-内部类有哪些应用场景","children":[]},{"level":3,"title":"56. 局部内部类和匿名内部类访问局部变量的时候，为什么变量必须要加上final？","slug":"_56-局部内部类和匿名内部类访问局部变量的时候-为什么变量必须要加上final","link":"#_56-局部内部类和匿名内部类访问局部变量的时候-为什么变量必须要加上final","children":[]},{"level":3,"title":"57. 内部类相关，看程序说出运行结果","slug":"_57-内部类相关-看程序说出运行结果","link":"#_57-内部类相关-看程序说出运行结果","children":[]}]},{"level":2,"title":"重写与重载","slug":"重写与重载","link":"#重写与重载","children":[{"level":3,"title":"58. 构造器（constructor）是否可被重写（override）","slug":"_58-构造器-constructor-是否可被重写-override","link":"#_58-构造器-constructor-是否可被重写-override","children":[]},{"level":3,"title":"59. 重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？","slug":"_59-重载-overload-和重写-override-的区别。重载的方法能否根据返回类型进行区分","link":"#_59-重载-overload-和重写-override-的区别。重载的方法能否根据返回类型进行区分","children":[]}]},{"level":2,"title":"对象相等判断","slug":"对象相等判断","link":"#对象相等判断","children":[{"level":3,"title":"60. == 和 equals 的区别是什么","slug":"_60-和-equals-的区别是什么","link":"#_60-和-equals-的区别是什么","children":[]},{"level":3,"title":"61. hashCode 与 equals (重要)","slug":"_61-hashcode-与-equals-重要","link":"#_61-hashcode-与-equals-重要","children":[]},{"level":3,"title":"62. 对象的相等与指向他们的引用相等，两者有什么不同？","slug":"_62-对象的相等与指向他们的引用相等-两者有什么不同","link":"#_62-对象的相等与指向他们的引用相等-两者有什么不同","children":[]}]},{"level":2,"title":"值传递","slug":"值传递","link":"#值传递","children":[{"level":3,"title":"63. 当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递","slug":"_63-当一个对象被当作参数传递到一个方法后-此方法可改变这个对象的属性-并可返回变化后的结果-那么这里到底是值传递还是引用传递","link":"#_63-当一个对象被当作参数传递到一个方法后-此方法可改变这个对象的属性-并可返回变化后的结果-那么这里到底是值传递还是引用传递","children":[]},{"level":3,"title":"64. 为什么 Java 中只有值传递","slug":"_64-为什么-java-中只有值传递","link":"#_64-为什么-java-中只有值传递","children":[]},{"level":3,"title":"65. 值传递和引用传递有什么区别","slug":"_65-值传递和引用传递有什么区别","link":"#_65-值传递和引用传递有什么区别","children":[]}]},{"level":2,"title":"Java包","slug":"java包","link":"#java包","children":[{"level":3,"title":"66. JDK 中常用的包有哪些","slug":"_66-jdk-中常用的包有哪些","link":"#_66-jdk-中常用的包有哪些","children":[]},{"level":3,"title":"67. import java和javax有什么区别","slug":"_67-import-java和javax有什么区别","link":"#_67-import-java和javax有什么区别","children":[]}]},{"level":2,"title":"四、IO流","slug":"四、io流","link":"#四、io流","children":[{"level":3,"title":"68. java 中 IO 流分为几种?","slug":"_68-java-中-io-流分为几种","link":"#_68-java-中-io-流分为几种","children":[]},{"level":3,"title":"69. BIO,NIO,AIO 有什么区别?","slug":"_69-bio-nio-aio-有什么区别","link":"#_69-bio-nio-aio-有什么区别","children":[]},{"level":3,"title":"70. Files的常用方法都有哪些？","slug":"_70-files的常用方法都有哪些","link":"#_70-files的常用方法都有哪些","children":[]}]},{"level":2,"title":"五、反射","slug":"五、反射","link":"#五、反射","children":[{"level":3,"title":"71. 什么是反射机制？","slug":"_71-什么是反射机制","link":"#_71-什么是反射机制","children":[]},{"level":3,"title":"72. 反射机制优缺点","slug":"_72-反射机制优缺点","link":"#_72-反射机制优缺点","children":[]},{"level":3,"title":"73. 反射机制的应用场景有哪些？","slug":"_73-反射机制的应用场景有哪些","link":"#_73-反射机制的应用场景有哪些","children":[]},{"level":3,"title":"74. Java获取反射的三种方法","slug":"_74-java获取反射的三种方法","link":"#_74-java获取反射的三种方法","children":[]}]},{"level":2,"title":"六、常用API","slug":"六、常用api","link":"#六、常用api","children":[]},{"level":2,"title":"String相关","slug":"string相关","link":"#string相关","children":[{"level":3,"title":"75. 字符型常量和字符串常量的区别","slug":"_75-字符型常量和字符串常量的区别","link":"#_75-字符型常量和字符串常量的区别","children":[]},{"level":3,"title":"76. 什么是字符串常量池？","slug":"_76-什么是字符串常量池","link":"#_76-什么是字符串常量池","children":[]},{"level":3,"title":"77. String 是最基本的数据类型吗","slug":"_77-string-是最基本的数据类型吗","link":"#_77-string-是最基本的数据类型吗","children":[]},{"level":3,"title":"78. String有哪些特性","slug":"_78-string有哪些特性","link":"#_78-string有哪些特性","children":[]},{"level":3,"title":"79. String为什么是不可变的吗？","slug":"_79-string为什么是不可变的吗","link":"#_79-string为什么是不可变的吗","children":[]},{"level":3,"title":"80. String真的是不可变的吗？","slug":"_80-string真的是不可变的吗","link":"#_80-string真的是不可变的吗","children":[]},{"level":3,"title":"81. 是否可以继承 String 类","slug":"_81-是否可以继承-string-类","link":"#_81-是否可以继承-string-类","children":[]},{"level":3,"title":"82. String str=\\"i\\"与 String str=new String(“i”)一样吗？","slug":"_82-string-str-i-与-string-str-new-string-i-一样吗","link":"#_82-string-str-i-与-string-str-new-string-i-一样吗","children":[]},{"level":3,"title":"83. String s = new String(“xyz”);创建了几个字符串对象","slug":"_83-string-s-new-string-xyz-创建了几个字符串对象","link":"#_83-string-s-new-string-xyz-创建了几个字符串对象","children":[]},{"level":3,"title":"84. 如何将字符串反转？","slug":"_84-如何将字符串反转","link":"#_84-如何将字符串反转","children":[]},{"level":3,"title":"85. 数组有没有 length()方法？String 有没有 length()方法","slug":"_85-数组有没有-length-方法-string-有没有-length-方法","link":"#_85-数组有没有-length-方法-string-有没有-length-方法","children":[]},{"level":3,"title":"86. String 类的常用方法都有那些？","slug":"_86-string-类的常用方法都有那些","link":"#_86-string-类的常用方法都有那些","children":[]},{"level":3,"title":"87. 在使用 HashMap 的时候，用 String 做 key 有什么好处？","slug":"_87-在使用-hashmap-的时候-用-string-做-key-有什么好处","link":"#_87-在使用-hashmap-的时候-用-string-做-key-有什么好处","children":[]},{"level":3,"title":"88. String和StringBuffer、StringBuilder的区别是什么？String为什么是不可变的","slug":"_88-string和stringbuffer、stringbuilder的区别是什么-string为什么是不可变的","link":"#_88-string和stringbuffer、stringbuilder的区别是什么-string为什么是不可变的","children":[]}]},{"level":2,"title":"包装类相关","slug":"包装类相关","link":"#包装类相关","children":[{"level":3,"title":"89. 自动装箱与拆箱","slug":"_89-自动装箱与拆箱","link":"#_89-自动装箱与拆箱","children":[]},{"level":3,"title":"90. int 和 Integer 有什么区别","slug":"_90-int-和-integer-有什么区别","link":"#_90-int-和-integer-有什么区别","children":[]},{"level":3,"title":"91. Integer a= 127 与 Integer b = 127相等吗","slug":"_91-integer-a-127-与-integer-b-127相等吗","link":"#_91-integer-a-127-与-integer-b-127相等吗","children":[]}]}],"git":{"createdTime":1693922657000,"updatedTime":1693922657000,"contributors":[{"name":"bincooo","email":"admin@bincooodeiMac.local","commits":1}]},"readingTime":{"minutes":64.86,"words":19458},"filePathRelative":"guide/markdown/Java面试宝典/Java基础面试题（91道含答案）.md","localizedDate":"2023年9月5日","excerpt":"<h3> 目录</h3>\\n<ul>\\n<li><a href=\\"#Java_4\\">一、Java概述</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#1__7\\">1. 何为编程</a></li>\\n<li><a href=\\"#2_Java_14\\">2. 什么是Java</a></li>\\n<li><a href=\\"#3_jdk15_19\\">3. jdk1.5之后的三大版本</a></li>\\n<li><a href=\\"#4_JdkJreJVM_30\\">4. Jdk和Jre和JVM的区别</a></li>\\n<li><a href=\\"#5__45\\">5. 什么是跨平台性？原理是什么</a></li>\\n<li><a href=\\"#6_Java_50\\">6. Java语言有哪些特点</a></li>\\n<li><a href=\\"#7__59\\">7. 什么是字节码？采用字节码的最大好处是什么</a></li>\\n<li><a href=\\"#8_Java_78\\">8. 什么是Java程序的主类？应用程序和小程序的主类有何不同？</a></li>\\n<li><a href=\\"#9_Java_83\\">9. Java应用程序与小程序之间有那些差别？</a></li>\\n<li><a href=\\"#10_JavaC_87\\">10. Java和C++的区别</a></li>\\n<li><a href=\\"#11_Oracle_JDK__OpenJDK__96\\">11. Oracle JDK 和 OpenJDK 的对比</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#_108\\">二、基础语法</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#_109\\">数据类型</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#12_Java_111\\">12. Java有哪些数据类型</a></li>\\n<li><a href=\\"#13_switch__byte__long__String_128\\">13. switch 是否能作用在 byte 上，是否能作用在 long 上，是否能作用在 String上</a></li>\\n<li><a href=\\"#14__2__8_133\\">14. 用最有效率的方法计算 2 乘以 8</a></li>\\n<li><a href=\\"#15_Mathround115_Mathround115_136\\">15. Math.round(11.5) 等于多少？Math.round(-11.5)等于多少</a></li>\\n<li><a href=\\"#16_float_f34_140\\">16. float f=3.4;是否正确</a></li>\\n<li><a href=\\"#17_short_s1__1_s1__s1__1short_s1__1_s1__1_143\\">17. short s1 = 1; s1 = s1 + 1;有错吗?short s1 = 1; s1 += 1;有错吗</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#_148\\">编码</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#18_Java_149\\">18. Java语言采用何种编码方案？有何特点？</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#_153\\">注释</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#19_Java_154\\">19. 什么Java注释</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#_170\\">访问修饰符</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#20__publicprivateprotected_171\\">20. 访问修饰符 public,private,protected,以及不写（默认）时的区别</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#_184\\">运算符</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#21__185\\">21. &amp;和&amp;&amp;的区别</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#_190\\">关键字</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#22_Java__goto_191\\">22. Java 有没有 goto</a></li>\\n<li><a href=\\"#23_final__194\\">23. final 有什么用？</a></li>\\n<li><a href=\\"#24_final_finally_finalize_200\\">24. final finally finalize区别</a></li>\\n<li><a href=\\"#25_this_210\\">25. this关键字的用法</a></li>\\n<li><a href=\\"#26_super_239\\">26. super关键字的用法</a></li>\\n<li><a href=\\"#27_thissuper_274\\">27. this与super的区别</a></li>\\n<li><a href=\\"#28_static_285\\">28. static存在的主要意义</a></li>\\n<li><a href=\\"#29_static_294\\">29. static的独特之处</a></li>\\n<li><a href=\\"#30_static_309\\">30. static应用场景</a></li>\\n<li><a href=\\"#31_static_319\\">31. static注意事项</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#_323\\">流程控制语句</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#32_break_continue_return__324\\">32. break ,continue ,return 的区别及作用</a></li>\\n<li><a href=\\"#33__Java__329\\">33. 在 Java 中，如何跳出当前的多重嵌套循环</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li><a href=\\"#_347\\">三、面向对象</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#_348\\">面向对象概述</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#34__349\\">34. 面向对象和面向过程的区别</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#_363\\">面向对象三大特性</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#35__364\\">35. 面向对象的特征有哪些方面</a></li>\\n<li><a href=\\"#36_Java_382\\">36. 什么是多态机制？Java语言是如何实现多态的？</a></li>\\n<li><a href=\\"#37__402\\">37. 面向对象五大基本原则是什么（可选）</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#_419\\">类与接口</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#38__420\\">38. 抽象类和接口的对比</a></li>\\n<li><a href=\\"#39__445\\">39. 普通类和抽象类有哪些区别？</a></li>\\n<li><a href=\\"#40__final__449\\">40. 抽象类能使用 final 修饰吗？</a></li>\\n<li><a href=\\"#41__453\\">41. 创建一个对象用什么关键字？对象实例与对象引用有何不同？</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#_458\\">变量与方法</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#42__459\\">42. 成员变量与局部变量的区别有哪些</a></li>\\n<li><a href=\\"#43_Java_483\\">43. 在Java中定义一个不做事且没有参数的构造方法的作用</a></li>\\n<li><a href=\\"#44__490\\">44. 在调用子类构造方法之前会先调用父类没有参数的构造方法，其目的是？</a></li>\\n<li><a href=\\"#45__493\\">45. 一个类的构造方法的作用是什么？若一个类没有声明构造方法，改程序能正确执行吗？为什么？</a></li>\\n<li><a href=\\"#46__497\\">46. 构造方法有哪些特性？</a></li>\\n<li><a href=\\"#47__502\\">47. 静态变量和实例变量区别</a></li>\\n<li><a href=\\"#48__508\\">48. 静态变量与普通变量区别</a></li>\\n<li><a href=\\"#49__514\\">49. 静态方法和实例方法有何不同？</a></li>\\n<li><a href=\\"#50__521\\">50. 在一个静态方法内调用一个非静态成员为什么是非法的？</a></li>\\n<li><a href=\\"#51__525\\">51. 什么是方法的返回值？返回值的作用是什么？</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#_529\\">内部类</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#52__530\\">52. 什么是内部类？</a></li>\\n<li><a href=\\"#53__534\\">53. 内部类的分类有哪些</a></li>\\n<li><a href=\\"#54__649\\">54. 内部类的优点</a></li>\\n<li><a href=\\"#55__656\\">55. 内部类有哪些应用场景</a></li>\\n<li><a href=\\"#56_final_662\\">56. 局部内部类和匿名内部类访问局部变量的时候，为什么变量必须要加上final？</a></li>\\n<li><a href=\\"#57__682\\">57. 内部类相关，看程序说出运行结果</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#_706\\">重写与重载</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#58_constructoroverride_707\\">58. 构造器（constructor）是否可被重写（override）</a></li>\\n<li><a href=\\"#59_OverloadOverride_710\\">59. 重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#_719\\">对象相等判断</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#60___equals__720\\">60. == 和 equals 的区别是什么</a></li>\\n<li><a href=\\"#61_hashCode__equals__754\\">61. hashCode 与 equals (重要)</a></li>\\n<li><a href=\\"#62__785\\">62. 对象的相等与指向他们的引用相等，两者有什么不同？</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#_789\\">值传递</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#63__790\\">63. 当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递</a></li>\\n<li><a href=\\"#64__Java__795\\">64. 为什么 Java 中只有值传递</a></li>\\n<li><a href=\\"#65__888\\">65. 值传递和引用传递有什么区别</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#Java_895\\">Java包</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#66_JDK__896\\">66. JDK 中常用的包有哪些</a></li>\\n<li><a href=\\"#67_import_javajavax_904\\">67. import java和javax有什么区别</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li><a href=\\"#IO_911\\">四、IO流</a></li>\\n<li>\\n<ul>\\n<li>\\n<ul>\\n<li><a href=\\"#68_java__IO__912\\">68. java 中 IO 流分为几种?</a></li>\\n<li><a href=\\"#69_BIONIOAIO__928\\">69. BIO,NIO,AIO 有什么区别?</a></li>\\n<li><a href=\\"#70_Files_959\\">70. Files的常用方法都有哪些？</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li><a href=\\"#_970\\">五、反射</a></li>\\n<li>\\n<ul>\\n<li>\\n<ul>\\n<li><a href=\\"#71__971\\">71. 什么是反射机制？</a></li>\\n<li><a href=\\"#72__979\\">72. 反射机制优缺点</a></li>\\n<li><a href=\\"#73__983\\">73. 反射机制的应用场景有哪些？</a></li>\\n<li><a href=\\"#74_Java_995\\">74. Java获取反射的三种方法</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li><a href=\\"#API_1022\\">六、常用API</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#String_1023\\">String相关</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#75__1024\\">75. 字符型常量和字符串常量的区别</a></li>\\n<li><a href=\\"#76__1030\\">76. 什么是字符串常量池？</a></li>\\n<li><a href=\\"#77_String__1035\\">77. String 是最基本的数据类型吗</a></li>\\n<li><a href=\\"#78_String_1042\\">78. String有哪些特性</a></li>\\n<li><a href=\\"#79_String_1050\\">79. String为什么是不可变的吗？</a></li>\\n<li><a href=\\"#80_String_1054\\">80. String真的是不可变的吗？</a></li>\\n<li><a href=\\"#81__String__1089\\">81. 是否可以继承 String 类</a></li>\\n<li><a href=\\"#82_String_stri_String_strnew_Stringi_1092\\">82. String str=\\"i\\"与 String str=new String(“i”)一样吗？</a></li>\\n<li><a href=\\"#83_String_s__new_Stringxyz_1096\\">83. String s = new String(“xyz”);创建了几个字符串对象</a></li>\\n<li><a href=\\"#84__1113\\">84. 如何将字符串反转？</a></li>\\n<li><a href=\\"#85__lengthString__length_1127\\">85. 数组有没有 length()方法？String 有没有 length()方法</a></li>\\n<li><a href=\\"#86_String__1131\\">86. String 类的常用方法都有那些？</a></li>\\n<li><a href=\\"#87__HashMap__String__key__1144\\">87. 在使用 HashMap 的时候，用 String 做 key 有什么好处？</a></li>\\n<li><a href=\\"#88_StringStringBufferStringBuilderString_1149\\">88. String和StringBuffer、StringBuilder的区别是什么？String为什么是不可变的</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#_1172\\">包装类相关</a></li>\\n<li>\\n<ul>\\n<li><a href=\\"#89__1173\\">89. 自动装箱与拆箱</a></li>\\n<li><a href=\\"#90_int__Integer__1177\\">90. int 和 Integer 有什么区别</a></li>\\n<li><a href=\\"#91_Integer_a_127__Integer_b__127_1186\\">91. Integer a= 127 与 Integer b = 127相等吗</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{l as data};
